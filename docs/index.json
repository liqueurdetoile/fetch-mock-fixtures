[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Fixture.js",
    "content": "import Preset from './Preset';\r\nimport ResponseConfigurator from './helpers/ResponseConfigurator';\r\nimport RequestMatcher from './helpers/RequestMatcher';\r\nimport pathToRegexp from 'path-to-regexp';\r\n\r\nexport class Fixture extends ResponseConfigurator {\r\n  /**\r\n   * Stores the number of responses generated by this fixture\r\n   * @type {Number}\r\n   */\r\n  calls = 0;\r\n\r\n  ownCalls = [];\r\n  globalCalls = [];\r\n\r\n  /**\r\n   * Flag for response configuration\r\n   * @type {null|Number}\r\n   */\r\n  _callnum = null;\r\n  _matcher = null;\r\n  _ownCall = false;\r\n\r\n  constructor(server) {\r\n    super(server);\r\n  }\r\n\r\n  get on() {\r\n    if (this._mode === 'respond') return this.server.on;\r\n\r\n    this._matcher = this._matcher || new RequestMatcher(this);\r\n\r\n    return new Proxy(this._matcher, {\r\n      get: (obj, prop) => prop in obj ? obj[prop] : obj.getProcessor(prop.toLowerCase())\r\n    });\r\n  }\r\n\r\n  _getCurrentResponseSet() {\r\n    if (this._callnum !== null) {\r\n      if (this._ownCall) {\r\n        this.ownCalls[this._callnum] = this.ownCalls[this._callnum] || {}\r\n        return this.ownCalls[this._callnum];\r\n      }\r\n      this.globalCalls[this._callnum] = this.globalCalls[this._callnum] || {}\r\n      return this.globalCalls[this._callnum] || {};\r\n    }\r\n\r\n    this._any = this._any || {};\r\n    return this._any;\r\n  }\r\n\r\n  preset(name) {\r\n    const preset = this.server._presets[name];\r\n\r\n    if (!preset) throw new Error('Unknown preset');\r\n\r\n    this.set(preset._any);\r\n\r\n    return this;\r\n  }\r\n\r\n  get to() {\r\n    return this;\r\n  }\r\n\r\n  firstCall(own = false) {\r\n    this._callnum = 1;\r\n    this._ownCall = own;\r\n\r\n    return this;\r\n  }\r\n\r\n  secondCall(own = false) {\r\n    this._callnum = 2;\r\n    this._ownCall = own;\r\n\r\n    return this;\r\n  }\r\n\r\n  thirdCall(own = false) {\r\n    this._callnum = 3;\r\n    this._ownCall = own;\r\n\r\n    return this;\r\n  }\r\n\r\n  call(n, own) {\r\n    this._callnum = parseInt(n, 10);\r\n    this._ownCall = own;\r\n\r\n    return this;\r\n  }\r\n\r\n  get any() {\r\n    this._callnum = null;\r\n    this._ownCall = false;\r\n\r\n    return this;\r\n  }\r\n\r\n  async match(request) {\r\n    let matched = true;\r\n\r\n    if (!this._matcher) return matched;\r\n\r\n    return await this._matcher.match(request);\r\n  }\r\n\r\n  async sleep(delay) {\r\n    await new Promise(resolve => setTimeout(resolve, delay));\r\n  }\r\n\r\n  extractParams(pathname, pattern) {\r\n    const params = {};\r\n    const keys = [];\r\n    const re = pathToRegexp(pattern, keys);\r\n    const parsed = re.exec(pathname);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      let name = keys[i].name;\r\n      let value = parsed[i+1];\r\n\r\n      params[name] = value;\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  wrap(body, wrapper) {\r\n    if (wrapper instanceof Function) return wrapper(body);\r\n\r\n    return body || null;\r\n  }\r\n\r\n  getPath(request, response) {\r\n    let url = response.pattern || request.pathname;\r\n    let path = url.split('/').filter(p => p && p.indexOf(':') < 0);\r\n    let filename = request.method.toLowerCase();\r\n\r\n    return path.concat(filename).join('/');\r\n  }\r\n\r\n  async _exceptionManagement(err, defaultMessage) {\r\n    if (err instanceof Response) {\r\n      return err;\r\n    }\r\n\r\n    if (err instanceof Preset) {\r\n      let {body, headers, status, statusText} = err._any;\r\n\r\n      return new Response(body, {headers, status, statusText});\r\n    }\r\n\r\n    if (err instanceof Error) {\r\n      return new Response(Error.captureStackTrace, {\r\n        headers: {'content-type': 'text/html'},\r\n        status: 500,\r\n        statusText: err.__proto__.name + (err.__proto__.message ? `- ${err.__proto__.message}` : '')\r\n      });\r\n    }\r\n\r\n    if (err instanceof Object) {\r\n      let {body, headers, status, statusText} = err;\r\n\r\n      return new Response(body, {headers, status, statusText});\r\n    }\r\n\r\n    return new Response(err.toString(), {\r\n      status: 500,\r\n      statusText: defaultMessage\r\n    });\r\n  }\r\n\r\n  async _buildResponse(request, response) {\r\n    // Process before hook and update response if one is returned\r\n    if (response.before instanceof Function) {\r\n      try {\r\n        let responseReplacement = await response.before.call(this, this.server, request, response);\r\n\r\n        if (responseReplacement) response = responseReplacement;\r\n      } catch (err) {\r\n        return this._exceptionManagement(err, 'Unable to process before callback');\r\n      }\r\n    }\r\n\r\n    // Destructure response\r\n    let {body, headers, status, statusText, ...extras} = response;\r\n\r\n    // Extract params if a pattern have been set\r\n    extras.params = extras.pattern ? this.extractParams(request.pathname, extras.pattern) : {};\r\n\r\n    // Process body callback\r\n    try {\r\n      if (body instanceof Function) body = await body(extras.params, request, this.server);\r\n    } catch (err) {\r\n      return this._exceptionManagement(err, 'Unable to process body callback');\r\n    }\r\n\r\n    // Construct response\r\n    const responseObject = new Response(this.wrap(body, extras.wrapper), {headers, status, statusText});\r\n\r\n    // Process after hook\r\n    try {\r\n      if (extras.after instanceof Function) await extras.after.call(this, this.server, responseObject);\r\n    } catch (err) {\r\n      return this._exceptionManagement(err, 'Unable to process after callback');\r\n    }\r\n\r\n    // Delay response\r\n    if (extras.delay) await this.sleep(extras.delay);\r\n\r\n    return responseObject;\r\n  }\r\n\r\n  getResponse(request) {\r\n    const localCalls = ++this.calls;\r\n    const globalCalls = this.server.calls;\r\n\r\n    // Match local calls first\r\n    return this._buildResponse(request,\r\n      this.ownCalls[localCalls] ||\r\n      this.globalCalls[globalCalls] ||\r\n      this._any\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fixture;\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/Fixture.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Fixture",
    "memberof": "src/Fixture.js",
    "static": true,
    "longname": "src/Fixture.js~Fixture",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/Fixture.js",
    "importStyle": "{Fixture}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/helpers/ResponseConfigurator.js~ResponseConfigurator"
    ]
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "calls",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#calls",
    "access": "public",
    "description": "Stores the number of responses generated by this fixture",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "ownCalls",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#ownCalls",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "globalCalls",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#globalCalls",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_callnum",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#_callnum",
    "access": "private",
    "description": "Flag for response configuration",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "null",
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_matcher",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#_matcher",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_ownCall",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#_ownCall",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 57,
    "kind": "get",
    "name": "on",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#on",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "_getCurrentResponseSet",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#_getCurrentResponseSet",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_any",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#_any",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "preset",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#preset",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "get",
    "name": "to",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#to",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "firstCall",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#firstCall",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "own",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "secondCall",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#secondCall",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "own",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "thirdCall",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#thirdCall",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "own",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "call",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#call",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      },
      {
        "name": "own",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "get",
    "name": "any",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#any",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "match",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Fixture.js~Fixture#match",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "sleep",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Fixture.js~Fixture#sleep",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "delay",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "extractParams",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#extractParams",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "pathname",
        "types": [
          "*"
        ]
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "wrap",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#wrap",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "body",
        "types": [
          "*"
        ]
      },
      {
        "name": "wrapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "getPath",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#getPath",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "_exceptionManagement",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Fixture.js~Fixture#_exceptionManagement",
    "access": "private",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultMessage",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "_buildResponse",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Fixture.js~Fixture#_buildResponse",
    "access": "private",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "getResponse",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#getResponse",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/helpers/FMFRequest.js",
    "content": "import parse from 'url-parse';\n\nexport class FMFRequest extends Request {\n  constructor(resource, init) {\n    super(resource, init);\n\n    const parts = parse(this.url, true);\n\n    for (let key in parts) {\n      Object.defineProperty(this, key, {\n        value: parts[key]\n      })\n    }\n  }\n\n  clone() {\n    return new FMFRequest(super.clone());\n  }\n}\n\nexport default FMFRequest;\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/helpers/FMFRequest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "FMFRequest",
    "memberof": "src/helpers/FMFRequest.js",
    "static": true,
    "longname": "src/helpers/FMFRequest.js~FMFRequest",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/helpers/FMFRequest.js",
    "importStyle": "{FMFRequest}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "Request"
    ]
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/FMFRequest.js~FMFRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/FMFRequest.js~FMFRequest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "clone",
    "memberof": "src/helpers/FMFRequest.js~FMFRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/FMFRequest.js~FMFRequest#clone",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/helpers/RequestMatcher.js",
    "content": "import BooleanProcessor from '@/processors/BooleanProcessor';\nimport BodyProcessor from '@/processors/BodyProcessor';\nimport HeadersProcessor from '@/processors/HeadersProcessor';\nimport QueryProcessor from '@/processors/QueryProcessor';\nimport StringProcessor from '@/processors/StringProcessor';\n\nexport class RequestMatcher {\n  _processors = [];\n  _requestKeys = [\n    'method', 'url', 'headers', 'destination', 'referrer', 'referrerPolicy', 'mode',\n    'credentials', 'redirect', 'integrity', 'cache',\n    'protocol', 'slashes', 'auth', 'username', 'password', 'host', 'hostname', 'port',\n    'pathname', 'query', 'hash', 'href', 'method', 'header', 'body'\n  ];\n\n  constructor(fixture) {\n    this.fixture = fixture;\n  }\n\n  get on() {\n    return this.fixture.on;\n  }\n\n  get respond() {\n    return this.fixture.respond;\n  }\n\n  getProcessor(key) {\n    let processor;\n\n    switch (key) {\n      case 'headers':\n        processor = new HeadersProcessor(key, this);\n        break;\n      case 'query':\n        processor = new QueryProcessor(key, this);\n        break;\n      case 'slashes':\n        processor = new BooleanProcessor(key, this);\n        break;\n      case 'auth':\n      case 'cache':\n      case 'credentials':\n      case 'destination':\n      case 'hash':\n      case 'href':\n      case 'host':\n      case 'hostname':\n      case 'integrity':\n      case 'method':\n      case 'password':\n      case 'pathname':\n      case 'protocol':\n      case 'redirect':\n      case 'referrer':\n      case 'referrerPolicy':\n      case 'url':\n      case 'username':\n        processor = new StringProcessor(key, this)\n        break;\n      default:\n        throw new Error('Unsupported request parameter to check');\n    }\n\n    this._processors.push(processor);\n\n    return processor;\n  }\n\n  body(type = 'text', warn = true) {\n    const processor = new BodyProcessor('headers', this, type, warn);\n\n    this._processors.push(processor);\n\n    return processor;\n  }\n\n  header(name) {\n    const processor = new HeadersProcessor('headers', this, name);\n\n    this._processors.push(processor);\n\n    return processor;\n  }\n\n  async match(request) {\n    for (let processor of this._processors) {\n      let passed = await processor.process(request);\n      if (!passed) return false;\n    }\n\n    return true;\n  }\n\n  request(conditions) {\n    if (!(conditions instanceof Object)) throw new Error('Request conditions set must be an object');\n\n    for (let key in conditions) {\n      if (!this._requestKeys.includes(key)) {\n        console.warn(`Invalid key \"${key}\" for request conditions configuration`); //eslint-disable-line\n        continue;\n      }\n\n      // Run setters\n      this[key].equal(conditions[key]);\n    }\n\n    return this;\n  }\n}\n\nexport default RequestMatcher;\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/helpers/RequestMatcher.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "RequestMatcher",
    "memberof": "src/helpers/RequestMatcher.js",
    "static": true,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/helpers/RequestMatcher.js",
    "importStyle": "{RequestMatcher}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "_processors",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#_processors",
    "access": "private",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "_requestKeys",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#_requestKeys",
    "access": "private",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "fixture",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#fixture",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "get",
    "name": "on",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#on",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "respond",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#respond",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getProcessor",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#getProcessor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "body",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#body",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "text",
        "defaultValue": "text"
      },
      {
        "name": "warn",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "header",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#header",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "match",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#match",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "request",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#request",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "conditions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/helpers/ResponseConfigurator.js",
    "content": "export class ResponseConfigurator {\n  server = null;\n\n  /**\n   * Ordered independent response for fixture. It will be used\n   * when ordered responses are not matching current call count.\n   * @type {Object}\n   */\n  _any = {};\n  _responseKeys = ['body', 'delay', 'headers', 'status', 'statusText', 'wrapper', 'pattern', 'before', 'after'];\n\n  constructor(server) {\n    this.server = server;\n  }\n\n  preset(name, preset) {\n    return this.server.preset(name, preset);\n  }\n\n  get on() {\n    return this.server ? this.server.on : this;\n  }\n\n  get when() {\n    return this.server.on;\n  }\n\n  get respond() {\n    return this.server ? this.server._processRespond(this) : this;\n  }\n\n  get with() {\n    return this;\n  }\n\n  get and() {\n    return this;\n  }\n\n  set(response = {}) {\n    if (!(response instanceof Object)) throw new Error('Response set must be an object');\n\n    for (let key in response) {\n      if (!this._responseKeys.includes(key)) {\n        console.warn(`Invalid key \"${key}\" for response set configuration`); //eslint-disable-line\n        continue;\n      }\n\n      // Run setters\n      this[key](response[key]);\n    }\n\n    return this;\n  }\n\n  body(body) {\n    let response = this._getCurrentResponseSet();\n\n    if (body === false) delete response.body;\n    else response.body = body;\n\n    return this;\n  }\n\n  delay(delay) {\n    let response = this._getCurrentResponseSet();\n\n    if (delay === false) delete response.delay;\n    else response.delay = parseInt(delay, 10);\n\n    return this;\n  }\n\n  headers(headers) {\n    if (headers && !(headers instanceof Object || headers instanceof Headers)) {\n      throw new Error('Headers must be an object or an Headers instance');\n    }\n\n    if (headers instanceof Object) headers = new Headers(headers);\n\n    let response = this._getCurrentResponseSet();\n\n    if (headers) response.headers = headers;\n    else delete response.headers;\n\n    return this;\n  }\n\n  status(status) {\n    let response = this._getCurrentResponseSet();\n\n    if (status === false) delete response.status;\n    else response.status = parseInt(status, 10);\n\n    return this;\n  }\n\n  statusText(text) {\n    let response = this._getCurrentResponseSet();\n\n    if (text) response.statusText = text;\n    else delete response.statusText;\n\n    return this;\n  }\n\n  wrapper(wrapper) {\n    let response = this._getCurrentResponseSet();\n\n    if (wrapper) response.wrapper = wrapper;\n    else delete response.wrapper;\n\n    return this;\n  }\n\n  pattern(pattern) {\n    let response = this._getCurrentResponseSet();\n\n    if (pattern) response.pattern = pattern;\n    else delete response.pattern;\n\n    return this;\n  }\n\n  before(cb) {\n    if (cb && !(cb instanceof Function)) {\n      throw new Error('Before hook must be a function');\n    }\n\n    let response = this._getCurrentResponseSet();\n\n    if (cb) response.before = cb;\n    else delete response.before;\n\n    return this;\n  }\n\n  after(cb) {\n    if (cb && !(cb instanceof Function)) {\n      throw new Error('Before hook must be a function');\n    }\n\n    let response = this._getCurrentResponseSet();\n\n    if (cb) response.after = cb;\n    else delete response.after;\n\n    return this;\n  }\n}\n\nexport default ResponseConfigurator\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/helpers/ResponseConfigurator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "ResponseConfigurator",
    "memberof": "src/helpers/ResponseConfigurator.js",
    "static": true,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/helpers/ResponseConfigurator.js",
    "importStyle": "{ResponseConfigurator}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "server",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#server",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "_any",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#_any",
    "access": "private",
    "description": "Ordered independent response for fixture. It will be used\nwhen ordered responses are not matching current call count.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "_responseKeys",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#_responseKeys",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "preset",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#preset",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "preset",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "get",
    "name": "on",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#on",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "get",
    "name": "when",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#when",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "get",
    "name": "respond",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#respond",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "get",
    "name": "with",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#with",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "get",
    "name": "and",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#and",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "set",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#set",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "response",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "body",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#body",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "body",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "delay",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#delay",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "delay",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "headers",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#headers",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "headers",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "status",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#status",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "statusText",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#statusText",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "wrapper",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "wrapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "pattern",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "before",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#before",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "after",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#after",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/helpers/ServerHistory.js",
    "content": "export default class ServerHistory {\n  _history = [];\n  _target = null;\n\n  push(request, response) {\n    this._history.push({\n      request,\n      response\n    })\n  }\n\n  get request() {\n    this._target = 'request';\n    return this;\n  }\n\n  get response() {\n    this._target = 'response';\n    return this;\n  }\n\n  get first() {\n    return this.atCall(1);\n  }\n\n  get second() {\n    return this.atCall(1);\n  }\n\n  get third() {\n    return this.atCall(1);\n  }\n\n  get last() {\n    return this.atCall(this._history.length);\n  }\n\n  atCall(n) {\n    if (!this._target) throw new Error('You must select request or response target before selecting call number')\n\n    return this._history[n-1][this._target];\n  }\n\n  reset() {\n    this._history = [];\n  }\n}\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/helpers/ServerHistory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "class",
    "name": "ServerHistory",
    "memberof": "src/helpers/ServerHistory.js",
    "static": true,
    "longname": "src/helpers/ServerHistory.js~ServerHistory",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/helpers/ServerHistory.js",
    "importStyle": "ServerHistory",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "_history",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#_history",
    "access": "private",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "_target",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#_target",
    "access": "private",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "push",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#push",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "get",
    "name": "request",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#request",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "get",
    "name": "response",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#response",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "get",
    "name": "first",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#first",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "get",
    "name": "second",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#second",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "get",
    "name": "third",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#third",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "get",
    "name": "last",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#last",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "atCall",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#atCall",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "reset",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#reset",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Server from './Server';\nimport Preset from './Preset';\nimport Fixture from './Fixture';\nimport FMFRequest from './helpers/FMFRequest';\n\nexport default Server;\n\nexport {\n  Fixture,\n  FMFRequest,\n  Preset,\n  Server\n}\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/Preset.js",
    "content": "import ResponseConfigurator from './helpers/ResponseConfigurator';\n\nexport class Preset extends ResponseConfigurator {\n  constructor(server, name, preset) {\n    super(server);\n\n    if (!name) throw new Error('You must provide a name to the preset');\n    this.name = name;\n\n    if (preset) {\n      if (!(preset instanceof Object)) throw new Error('Preset options must be provided as an object');\n      this.set(preset);\n    }\n  }\n\n  _getCurrentResponseSet() {\n    this._any = this._any || {};\n    return this._any;\n  }\n}\n\nexport default Preset;\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/Preset.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "class",
    "name": "Preset",
    "memberof": "src/Preset.js",
    "static": true,
    "longname": "src/Preset.js~Preset",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/Preset.js",
    "importStyle": "{Preset}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/helpers/ResponseConfigurator.js~ResponseConfigurator"
    ]
  },
  {
    "__docId__": 145,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Preset.js~Preset",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Preset.js~Preset#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "name",
    "memberof": "src/Preset.js~Preset",
    "static": false,
    "longname": "src/Preset.js~Preset#name",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "_getCurrentResponseSet",
    "memberof": "src/Preset.js~Preset",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Preset.js~Preset#_getCurrentResponseSet",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "_any",
    "memberof": "src/Preset.js~Preset",
    "static": false,
    "longname": "src/Preset.js~Preset#_any",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/presets.js",
    "content": "export default {\n  default: {\n    body: 'Hello world !',\n    delay: 0,\n    headers: {'content-type': 'text/html'},\n    status: 200,\n    statusText: 'OK'\n  },\n\n  json: {\n    headers: {'content-type': 'application/json'},\n    wrapper: body => JSON.stringify(body)\n  },\n\n  204: {\n    body: null,\n    headers: {'content-type': 'text/html'},\n    status: 204,\n    statusText: 'No Content'\n  },\n\n  400: {\n    body: null,\n    headers: {'content-type': 'text/html'},\n    status: 400,\n    statusText: 'Bad Request'\n  },\n\n  401: {\n    body: null,\n    headers: {'content-type': 'text/html'},\n    status: 401,\n    statusText: 'Unauthorized'\n  },\n\n  403: {\n    body: null,\n    headers: {'content-type': 'text/html'},\n    status: 403,\n    statusText: 'Forbidden'\n  },\n\n  404: {\n    body: null,\n    headers: {'content-type': 'text/html'},\n    status: 404,\n    statusText: 'Not found'\n  },\n\n  500: {\n    body: null,\n    headers: {'content-type': 'text/html'},\n    status: 500,\n    statusText: 'Internal Server Error'\n  }\n}\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/presets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/processors/AbstractProcessor.js",
    "content": "import _isEqual from 'lodash.isequal';\n\nexport default class AbstractProcessor {\n  _key = null;\n  _not = false;\n  _test = null;\n\n  constructor(key, matcher) {\n    this._key = key;\n    this._matcher = matcher;\n  }\n\n  get is() {\n    return this;\n  }\n\n  get not() {\n    this._not = !this._not;\n\n    return this;\n  }\n\n  equal(expected) {\n    this._test = async request => {\n      let requestValue = request[this._key];\n      let passed;\n\n      if (expected instanceof Function) passed = await expected(requestValue, this._key, request);\n      else if (expected instanceof RegExp) passed = expected.test(requestValue);\n      else passed = _isEqual(requestValue, expected);\n\n      return passed;\n    }\n\n    return this._matcher;\n  }\n\n  async process(request) {\n    let passed = await this._test(request);\n\n    return this._not ? !passed: passed;\n  }\n}\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/AbstractProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "AbstractProcessor",
    "memberof": "src/processors/AbstractProcessor.js",
    "static": true,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/AbstractProcessor.js",
    "importStyle": "AbstractProcessor",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "_key",
    "memberof": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "static": false,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor#_key",
    "access": "private",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "_not",
    "memberof": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "static": false,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor#_not",
    "access": "private",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "_test",
    "memberof": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "static": false,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor#_test",
    "access": "private",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "_matcher",
    "memberof": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "static": false,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor#_matcher",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "get",
    "name": "is",
    "memberof": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor#is",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "get",
    "name": "not",
    "memberof": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor#not",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "equal",
    "memberof": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor#equal",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "expected",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "process",
    "memberof": "src/processors/AbstractProcessor.js~AbstractProcessor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/processors/AbstractProcessor.js~AbstractProcessor#process",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/processors/BodyProcessor.js",
    "content": "import AbstractProcessor from './AbstractProcessor';\nimport _isEqual from 'lodash.isequal';\n\nexport default class BodyProcessor extends AbstractProcessor {\n  _type = null;\n  _warn = true;\n\n  constructor(key, matcher, type, warn = true) {\n    super(key, matcher);\n    this._type = type;\n    this._warn = warn;\n  }\n\n  equal(expected) {\n    this._test = async request => {\n      let requestValue, passed = false;\n\n      // Try to decode body\n      switch (this._type.toLowerCase()) {\n        case 'text':\n          try {\n            requestValue = await request.clone().text();\n          } catch (err) {\n            if(this._warn) console.warn('Unable to parse body as blob'); // eslint-disable-line\n            return false;\n          }\n          break;\n        case 'json':\n          try {\n            requestValue = await request.clone().json();\n          } catch (err) {\n            if(this._warn) console.warn('Unable to parse body as JSON'); // eslint-disable-line\n            return false;\n          }\n          break;\n        case 'formdata':\n          try {\n            requestValue = await request.clone().formData();\n          } catch (err) {\n            if(this._warn) console.warn('Unable to parse body as FormData'); // eslint-disable-line\n            return false;\n          }\n          break;\n        case 'blob':\n          try {\n            requestValue = await request.clone().blob();\n          } catch (err) {\n            if(this._warn) console.warn('Unable to parse body as Blob'); // eslint-disable-line\n            return false;\n          }\n          break;\n        default:\n          throw new Error('Unknown body decoder callback')\n      }\n\n      if (expected instanceof Function) passed = await expected(requestValue, this._key, request);\n      else if (expected instanceof RegExp) passed = expected.test(requestValue);\n      else passed = _isEqual(requestValue, expected);\n\n      return passed;\n    }\n\n    return this._matcher;\n  }\n}\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/BodyProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "BodyProcessor",
    "memberof": "src/processors/BodyProcessor.js",
    "static": true,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/BodyProcessor.js",
    "importStyle": "BodyProcessor",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/processors/AbstractProcessor.js~AbstractProcessor"
    ]
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "_type",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#_type",
    "access": "private",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "_warn",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#_warn",
    "access": "private",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "equal",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#equal",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "expected",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "_test",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#_test",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "file",
    "name": "src/processors/BooleanProcessor.js",
    "content": "import AbstractProcessor from './AbstractProcessor';\n\nexport default class BooleanProcessor extends AbstractProcessor {\n\n}\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/BooleanProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 174,
    "kind": "class",
    "name": "BooleanProcessor",
    "memberof": "src/processors/BooleanProcessor.js",
    "static": true,
    "longname": "src/processors/BooleanProcessor.js~BooleanProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/BooleanProcessor.js",
    "importStyle": "BooleanProcessor",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/processors/AbstractProcessor.js~AbstractProcessor"
    ]
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/processors/HeadersProcessor.js",
    "content": "import AbstractProcessor from './AbstractProcessor';\nimport _isEqual from 'lodash.isequal';\n\nexport default class HeadersProcessor extends AbstractProcessor {\n  _name = null;\n\n  constructor(key, matcher, name) {\n    super(key, matcher);\n    this._name = name;\n  }\n\n  equal(expected) {\n    this._test = async request => {\n      const headers = request.headers;\n\n      if (!(headers instanceof Headers)) throw new Error('Unable to extract headers from request');\n\n      const requestValue = this._name ? headers.get(this._name) : headers;\n      let passed = false;\n\n      if (expected instanceof Function) passed = await expected(requestValue, this._key, request);\n      else if (expected instanceof RegExp) passed = expected.test(requestValue);\n      else passed = _isEqual(requestValue, expected);\n\n      return passed;\n    }\n\n    return this._matcher;\n  }\n}\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/HeadersProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "HeadersProcessor",
    "memberof": "src/processors/HeadersProcessor.js",
    "static": true,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/HeadersProcessor.js",
    "importStyle": "HeadersProcessor",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/processors/AbstractProcessor.js~AbstractProcessor"
    ]
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "_name",
    "memberof": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "static": false,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor#_name",
    "access": "private",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "equal",
    "memberof": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor#equal",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "expected",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "_test",
    "memberof": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "static": false,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor#_test",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/processors/QueryProcessor.js",
    "content": "import AbstractProcessor from './AbstractProcessor';\n\nexport default class QueryProcessor extends AbstractProcessor {\n\n}\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/QueryProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "QueryProcessor",
    "memberof": "src/processors/QueryProcessor.js",
    "static": true,
    "longname": "src/processors/QueryProcessor.js~QueryProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/QueryProcessor.js",
    "importStyle": "QueryProcessor",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/processors/AbstractProcessor.js~AbstractProcessor"
    ]
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/processors/StringProcessor.js",
    "content": "import AbstractProcessor from './AbstractProcessor';\n\nexport default class StringProcessor extends AbstractProcessor {\n  \n}\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/StringProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "StringProcessor",
    "memberof": "src/processors/StringProcessor.js",
    "static": true,
    "longname": "src/processors/StringProcessor.js~StringProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/StringProcessor.js",
    "importStyle": "StringProcessor",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/processors/AbstractProcessor.js~AbstractProcessor"
    ]
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/Server.js",
    "content": "import {FMFRequest, Fixture, Preset} from '.';\nimport ServerHistory from './helpers/ServerHistory';\nimport presets from './presets';\n// import parse from 'url-parse';\n// import pathToRegexp from 'path-to-regexp';\nimport sinon from 'sinon';\n\n/**\n * Build a mock server to respond to fetch calls. It stubs\n * window.fetch\n *\n * @since 1.0.0\n * @version 1.0.0\n * @author Liqueur de Toile <contact@liqueurdetoile.com>\n */\nexport class Server {\n  _fixtures = [];\n  _onError = 'throw';\n  _presets = {};\n\n  history = new ServerHistory();\n\n  constructor() {\n    // Load presets\n    for (let name in presets) {\n      this._presets[name] = new Preset(this, name, presets[name]);\n    }\n  }\n\n  /**\n   * Start the server by stubbing `window.fetch`\n   * @version 1.0.0\n   * @since   1.0.0\n   * @return  {Server}               Server instance\n   */\n  start() {\n    /* istanbul ignore else */\n    if (!this.running) {\n      sinon.stub(window, 'fetch');\n      this.stub.callsFake(this._processRequest.bind(this));\n    }\n\n    return this;\n  }\n\n  /**\n   * Stop the server\n   * @version 1.0.0\n   * @since   1.0.0\n   * @return  {Server}               Server instance\n   */\n  stop(resetServer = false) {\n    if (this.running) window.fetch.restore();\n\n    if (resetServer) this.reset();\n\n    return this;\n  }\n\n  /**\n   * Reset the server configuration to default and\n   * clear stub overrides and server history\n   * @version 1.1.0\n   * @since   1.0.0\n   * @return  {Server}               Server instance\n   */\n  reset(resetStub = true) {\n    if (this.running && resetStub) this.stub.resetHistory();\n    this.history.reset();\n    this._fixtures = [];\n    this.throwOnError(true);\n\n    return this;\n  }\n\n  throwOnError(throwOnError) {\n    this._onError = throwOnError ? 'throw' : 'fail500';\n\n    return this;\n  }\n\n  /**\n   * Check if server is running by trying to access a stub property\n   * @version 1.0.0\n   * @since   1.1.0\n   * @return  {Boolean}\n   */\n  get running() {\n    return window.fetch.reset instanceof Function;\n  }\n\n  get calls() {\n    return this.stub.callCount;\n  }\n\n  /**\n   * Exposes the underlying stub or throws error if server is not started\n   * @version 1.0.0\n   * @since   1.1.0\n   * @return  {Object}  Sinon stub\n   */\n  get stub() {\n    if (this.running) return window.fetch;\n\n    throw new Error('Server is not started');\n  }\n\n  preset(name, preset = {}) {\n    if (this._presets[name]) return this._presets[name].set(preset);\n\n    let newPreset = new Preset(this, name, preset);\n\n    this._presets[name] = newPreset;\n\n    return newPreset;\n  }\n\n  get on() {\n    const fixture = new Fixture(this)\n\n    this._fixtures.push(fixture);\n\n    fixture._mode = 'on';\n\n    return fixture.on;\n  }\n\n  get when() {\n    return this.on;\n  }\n\n  _getDefaultFixture() {\n    // If a default fixture exists, return it\n    const index = this._fixtures.findIndex(f => f._matcher === null);\n\n    if (index >= 0) return this._fixtures[index];\n\n    // Create a new default Fixture and register it\n    const fixture = new Fixture(this);\n\n    this._fixtures.push(fixture);\n    return fixture;\n  }\n\n  _processRespond(fixture = {}) {\n    if (fixture._mode === 'respond') fixture = this._getDefaultFixture();\n\n    fixture._mode = 'respond';\n\n    return fixture;\n  }\n\n  get respond() {\n    return this._getDefaultFixture();\n  }\n\n  async _findFixture(request) {\n    let matches = [];\n\n    if (!this._fixtures.length) throw new Error('No fixtures defined to respond to request');\n\n    for (let fixture of this._fixtures) {\n      // Do not register fallback fixture\n      if (fixture._matcher === null) continue;\n      if (await fixture.match(request)) matches.push(fixture);\n    }\n\n    if (!matches.length) {\n      const index = this._fixtures.findIndex(f => f._matcher === null);\n\n      if (index >= 0) return this._fixtures[index];\n\n      throw new Error('Unable to find a matching fixture for the current request and no fixture is set as fallback');\n    }\n\n    if (matches.length > 1) {\n      console.warn(`FMF : Server found ${matches.length} fixtures matching the request \"${request.url}\". Using the first one.`); // eslint-disable-line\n    }\n\n    return matches[0];\n  }\n\n  async _processRequest(request, init) {\n    try {\n      // Build FMFRequest object\n      request = new FMFRequest(request, init);\n\n      // Locate matching fixture\n      let fixture = await this._findFixture(request.clone());\n\n      // Prepare response\n      let response = await fixture.getResponse(request.clone());\n\n      // Store request in history\n      this.history.push(request.clone(), response.clone());\n\n      return response;\n    } catch (err) {\n      if (this._onError === 'throw') throw err;\n      if (this._onError instanceof Function) return this._onError(err);\n\n      return new Response(err.toString(), {\n        'content-type': 'text/html',\n        status: 500,\n        statusText: 'FMF error'\n      })\n    }\n  }\n\n  get request() {\n    return this.history.request.last;\n  }\n\n  get response() {\n    return this.history.response.last;\n  }\n}\n\nexport default Server;\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/Server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "Server",
    "memberof": "src/Server.js",
    "static": true,
    "longname": "src/Server.js~Server",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/Server.js",
    "importStyle": "{Server}",
    "description": "Build a mock server to respond to fetch calls. It stubs\nwindow.fetch",
    "lineNumber": 16,
    "since": "1.0.0",
    "version": "1.0.0",
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Liqueur de Toile <contact@liqueurdetoile.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "_fixtures",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#_fixtures",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_onError",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#_onError",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "_presets",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#_presets",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "history",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#history",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "start",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#start",
    "access": "public",
    "description": "Start the server by stubbing `window.fetch`",
    "lineNumber": 36,
    "since": "  1.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    },
    "params": []
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "stop",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#stop",
    "access": "public",
    "description": "Stop the server",
    "lineNumber": 52,
    "since": "  1.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    },
    "params": [
      {
        "name": "resetServer",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ]
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "reset",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#reset",
    "access": "public",
    "description": "Reset the server configuration to default and\nclear stub overrides and server history",
    "lineNumber": 67,
    "since": "  1.0.0",
    "version": "1.1.0",
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    },
    "params": [
      {
        "name": "resetStub",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ]
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "throwOnError",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#throwOnError",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "throwOnError",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "get",
    "name": "running",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#running",
    "access": "public",
    "description": "Check if server is running by trying to access a stub property",
    "lineNumber": 88,
    "since": "  1.1.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "get",
    "name": "calls",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#calls",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "get",
    "name": "stub",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#stub",
    "access": "public",
    "description": "Exposes the underlying stub or throws error if server is not started",
    "lineNumber": 102,
    "since": "  1.1.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Sinon stub"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "preset",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#preset",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "preset",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "get",
    "name": "on",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#on",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "get",
    "name": "when",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#when",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "_getDefaultFixture",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#_getDefaultFixture",
    "access": "private",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "_processRespond",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#_processRespond",
    "access": "private",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "fixture",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "get",
    "name": "respond",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#respond",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "_findFixture",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Server.js~Server#_findFixture",
    "access": "private",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_processRequest",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Server.js~Server#_processRequest",
    "access": "private",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "init",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "get",
    "name": "request",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#request",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "get",
    "name": "response",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#response",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "[![Build Status](https://travis-ci.org/liqueurdetoile/fetch-mock-fixtures.svg?branch=master)](https://travis-ci.org/liqueurdetoile/fetch-mock-fixtures)\r\n[![Coverage Status](https://coveralls.io/repos/github/liqueurdetoile/fetch-mock-fixtures/badge.svg?branch=master)](https://coveralls.io/github/liqueurdetoile/fetch-mock-fixtures?branch=master)\r\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\r\n[![Documentation](https://liqueurdetoile.github.io/fetch-mock-fixtures/badge.svg)](https://liqueurdetoile.github.io/fetch-mock-fixtures/) [![Greenkeeper badge](https://badges.greenkeeper.io/liqueurdetoile/fetch-mock-fixtures.svg)](https://greenkeeper.io/)\r\n\r\n<p align=\"center\"><a href=\"https://liqueurdetoile.com\" target=\"\\_blank\"><img src=\"https://hosting.liqueurdetoile.com/logo_lqdt.png\" alt=\"Liqueur de Toile\"></a></p>\r\n\r\n# Fetch-mock-fixtures (FMF)\r\n\r\nSince v2, FMF is meant to :\r\n- offers a BDD style syntax to configure responses in more readable-friendly way\r\n- provide an easy way to configure response on-the-fly\r\n- provide a powerful responses preset and fixtures system to avoid writing the same things again and again and ease functional tests\r\n\r\nWhile most of mockers for fetch are only meant to intercept and define the next response content, FMF goes far beyond and offers a wide range of tools.\r\n\r\nFMF will give its best with any testing framework (Mocha, Jasmine, Junit...) that allows to automate operations between each tests.\r\n\r\n## Installation\r\n\r\nInstallation can easily be done through NPM or Yarn. Sinon is required by FMF to stub `fetch` but is not included in the bundle. It must be installed as well if not already present.\r\n\r\n```bash\r\nnpm install sinon fetch-mock-fixtures --save-dev\r\n\r\nyarn add sinon fetch-mock-fixtures --dev\r\n```\r\nFMF should be installed as a dev dependency. It is not meant to be used as an in-app offline mode feature.\r\n\r\n**Note** : FMF is built upon Promise, Proxy and fetch API (Request, Headers, Response) that are available in all modern browsers. If you intend to run tests on older browsers (IE) or versions, you may need to polyfill them. Here's some available tools you can use :\r\n- Promise: [ES6-Promise](https://www.npmjs.com/package/es6-promise)\r\n- Fetch API : [window.fetch polyfill](https://www.npmjs.com/package/whatwg-fetch)\r\n- Proxy: [proxy-polyfill](https://www.npmjs.com/package/proxy-polyfill)\r\n\r\n\r\n\r\n## Usage and configuration for mocking fetch calls\r\n### Most basic example\r\n```javascript\r\n// Create a server\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\n// Create the server instance\r\nserver = new Server();\r\n\r\n// Start intercepting fetch calls\r\nserver.start();\r\n\r\n// Set up the server response (no matter the url)\r\nserver.respondWith('Hello world !');\r\n\r\n// Do fetch call\r\nfetch('/').then(response => {\r\n  response.text().then(message => {\r\n    console.log(message); // outputs 'Hello world !'\r\n  });\r\n})\r\n\r\n// Stop intercepting fetch calls\r\nserver.stop();\r\n```\r\nUnder the hood, the server is simply sending back a [`Response` object](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response) that mimics a regular fetch call response.\r\n\r\n### Controlling server\r\nAn FMF server instance exposes a few methods/properties to control server state.\r\n\r\nMethod  |  Description\r\n--|--\r\n`start()` |  Start the server by stubbing `window.fetch`\r\n`reset(stub=false)`  |  Reset to the server default configuration (see below). If `stub` is true, the sinon stub will also be resetted at the same time.\r\n`stop()`  |  Stop the server by restoring `window.fetch`. That does not affect server actual configuration.\r\n`running`  |  Returns true if server is running\r\n`stub`  |  Direct access to the stub of `window.fetch`. Accessing the property when server is not started will raise an Error.\r\n\r\nwindow.fetch is a fully functional [Sinon stub](https://sinonjs.org/releases/latest/stubs/). Therefore, you can use any of the method available on a stub.\r\n\r\n### Accessing request(s) sent to server\r\nThe server keeps all requests sent since the last start/stub reset. To ease, outgoing API requests tests, an FMF sever instance exposes a bunch of properties/method to access requests :\r\n\r\nProperty/Method  |  Description\r\n--|--\r\n`request`  |  Returns the last request made as a [Request object](https://developer.mozilla.org/en-US/docs/Web/API/Request)\r\n`url`  |  Returns the last url called as a parsed object (see [url-parse](https://www.npmjs.com/package/url-parse))\r\n`query`  |  Returns the parsed query part of the last called url (see [url-parse](https://www.npmjs.com/package/url-parse))\r\n`callCount`  |  Returns the number of requests received\r\n`getRequest(n)`  |  Returns the request send on the (n + 1)<sup>th</sup> call as a [Request object](https://developer.mozilla.org/en-US/docs/Web/API/Request). For instance, `server.getRequest(0)` will return the first request made\r\n`getAllRequests()`  |  Returns an array of all requests made as [Request objects](https://developer.mozilla.org/en-US/docs/Web/API/Request) in the same order than the calls\r\n`requestToUrl(request)`  |  Expects a [Request object](https://developer.mozilla.org/en-US/docs/Web/API/Request) as argument and returns a parsed url (see [url-parse](https://www.npmjs.com/package/url-parse))\r\n\r\n### Setting up Response\r\nIf you only need to disable `window.fetch`, you can simply start the server. All calls will be answered with the same default response configuration (see below).\r\n\r\nFor testing purposes, you may want to go deeper. FMF have three ways of dealing with incoming requests :\r\n\r\n1. Sending a response based on the current configuration\r\n\r\n2. Sending a response that can vary on a call count (it can be pretty handy when dealing with functional tests that may performs several calls)\r\n\r\n3. Using fixtures (see below). Fixtures can be combined with ordered responses\r\n\r\n### A more advanced example with Mocha\r\nIn real world, you may use some frameworks for your tests. Here's a full real-like example with FMF and Mocha :\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures';\r\n// The api you're testing\r\nimport api from 'modules/api';\r\n\r\ndescribe('API test suite', function() {\r\n\tconst server = new Server();\r\n\r\n\tbefore(() => server.start()) // start the server at the beginning\r\n\tafterEach(() => server.reset(true)) // Fully reset server between each tests\r\n\tafter(() => server.stop()) // Stop the server at the end\r\n\r\n\tdescribe('Unit test API', function() {\r\n\t\tit('should GET data', async function() {\r\n\t\t\tserver.respondWithJSON({\r\n\t\t\t\tid: 1,\r\n\t\t\t\tname: 'foo'\r\n\t\t\t})\r\n\r\n\t\t\tconst data = await api.get('/api/v1/users/1');\r\n\t\t\tdata.should.deep.equal({\r\n\t\t\t\tid: 1,\r\n\t\t\t\tname: 'foo'\r\n\t\t\t});\r\n\r\n\t\t\tserver.respondWithJSON({ // Changing server configuration between calls\r\n\t\t\t\tid: 2,\r\n\t\t\t\tname: 'baz'\r\n\t\t\t})\r\n\r\n\t\t\tconst data = await api.get('/api/v1/users/2');\r\n\t\t\tdata.should.deep.equal({\r\n\t\t\t\tid: 2,\r\n\t\t\t\tname: 'baz'\r\n\t\t\t});\r\n\t\t})\r\n\t})\r\n\r\n\t// Others unit tests\r\n\r\n\tdescribe('Functional tests API', function() {\r\n\t\t// Okay, we have a two steps auth. First username, then password\r\n\t\tit('should log in user', async function() {\r\n\t\t\tserver\r\n\t\t\t\t.onFirstCall()\r\n\t\t\t\t.setStatus(401)\r\n\t\t\t\t.respondWithJSON({\r\n\t\t\t\t\tsuccess: true\r\n\t\t\t\t})\r\n\t\t\t\t.onSecondCall()\r\n\t\t\t\t.setStatus(200) // Can be skipped as it is the default server status\r\n\t\t\t\t.respondWithJSON({\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\ttoken: '123'\r\n\t\t\t\t})\r\n\r\n\t\t\tlet logged = api.login({id: 1}); // will do the two requests\r\n\t\t\tlogged.should.be.true;\t\t\t\r\n\t\t\tapi.token.should.equal('123');\r\n\r\n\t\t\t// You can also check requests\r\n\t\t\tconst q1 = server.requestToUrl(server.getRequest(0)).query; // query part of the first request\r\n\t\t\tconst r2 = server.request; // Last request\r\n\r\n\t\t\tq1.username.should.equal('foo');\r\n\t\t\t// [...]\r\n\t\t})\r\n\t})\r\n\r\n\t// Others functional tests\r\n})\r\n```\r\n\r\n### Response configuration\r\n\r\n#### Data\r\n\r\n**Important: configuration persists through each calls and can be changed at runtime without the need to start/stop server. All changes will be applied on the next fetch call.**\r\n\r\nServer can be set to send back data. Without fixtures, you can use the `respondWith(body, init)` server method. For additional configuration, see below.\r\n\r\nThe server instance also exposes two shortcuts :\r\n- `respondWithStatus(status, body)` : This will send back the optionally provided body with the given status,\r\n- `respondWithJSON(body, init)` : this will apply `JSON.stringify` to the provided data and set content-type response headers to `application/json`.\r\n\r\n**Body can also be provided as a callback that will be evaluated synchronously at runtime. The server instance is passed as argument.**\r\n\r\n#### Response init parameters\r\n\r\nHere's the available response configuration options :\r\n\r\n  Configuration key | Chainable setter  | Description  |  Default\r\n--|---|---|---\r\n`delay`  | `setDelay`  |  Set a delay (in ms) before sending back response. It can be useful when testing timeout management  | `0`\r\n`headers`  | `setHeaders`  | Define the response headers. It accepts an object with header names as keys or an [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) instance  |  Default header is `content-type: text/html`\r\n`status` | `setStatus` | Define the response status code | `200`\r\n`statusText`  | `setStatusText`  | Define the response status text  |  `'OK'`\r\n\r\nFMF also accepts two other options that will be discussed below : `pattern` and `wrapper`.\r\n\r\n```javascript\r\n// Create a server\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\n// Create the server instance and start it\r\nserver = new Server();\r\nserver.start();\r\n\r\n// Set headers status to 201 and content-type to application/json\r\nserver\r\n  .configure({\r\n    status: 201,\r\n    headers: {'content-type': 'application/json'}\r\n  })\r\n  .respondWith(JSON.stringify({test: 'ok'}));\r\n\r\n// or\r\nserver\r\n  .setHeaders({\r\n    'content-type': 'application/json'\r\n  })\r\n  .setStatus(201)\r\n  .respondWith(JSON.stringify({test: 'ok'}));\r\n\r\n// or shorter\r\nserver\r\n  .setStatus(201)\r\n  .respondWithJSON({test: 'ok'});\r\n\r\n// Reset configuration to default\r\nserver.reset();\r\n```\r\n\r\n### Using response wrappers\r\nThe server instance allow the configuration of a wrapper that will be applied on data. The behavior of the wrapper depends on wrapper and data types :\r\n\r\nwrapper type  | data type  |  behavior\r\n--|---|--\r\n string | string  | The server will look for a `%data%` template in the wrapper and replace it with the data\r\n  string | object  | For each data key, the server will try to find a `%<key>%` template in the wrapper string and replace it with data value\r\n  function | anything  |  The server will use the returned value of the callback. Data is passed as argument of the callback\r\n\r\nYou may have a look at the wrapper test suite for some examples.\r\n\r\n## Fixtures system\r\n### Basics\r\nThe fixture is a simple way to automatically configure a Response object when matching a given \"url\". FMF provides a `Fixture` class as a convenient way to do it while adding a callback before and after building the response object. Usually, you do not need to create the fixture instance but provides parameters as an object :\r\n\r\nParameter name  |  Type | Description\r\n:--:|:--:|--\r\ndelay  |  `Number` | Number of ms to wait before sending the response\r\nbody  |  `null, Number, String, Function` | Body to send back with response. If provided as a function, the body will be evaluated **synchronously**\r\nheaders |  `Object, Headers` | Headers can be provided as an `Headers` instance  or as an object with headers names as keys\r\nstatus |  `Number` | Response status code\r\nstatusText | `String` | Response status text\r\nwrapper | `String, Function` | See [Using response wrappers](#using-response-wrappers)\r\ninitialized  |  `Function` | Callback called **asynchronously** before building response\r\ndestroyed  |  `Function` | Callback called **asynchronously** after building response\r\n\r\n**If no configuration value for a given parameter is available from fixture, the current server configuration value will be inherited.**\r\n\r\nYou can provide two functions as hooks (see below). In the hooks, the `server` instance is available as a property from `this`.\r\n\r\nFinally, to go into fixture mode, you must call the server `respondWithFixture` method **before** sending the request or accordingly to the call order.\r\n\r\nUnder the hood, the fixture is used to populate properties from a `Fixture` instance. The `Response` object is then configured from fixture properties.\r\n\r\n### Fixture lifecycle\r\nWhen server is dealing with a request, it will :\r\n1. load fixture and create an instance if needed;\r\n2. call and await the `initialized` hook on fixture. Fetching returned data and further configuration can be made at this step;\r\n3. ask fixture to provide its `Response` object build from fixture properties. Dynamic synced response can be configured in a body as a callback;\r\n4. call and await the `destroyed` hook on fixture. Cleaning can be made at this step;\r\n5. send back the `Response` object\r\n\r\nTo update fixture properties or access server property within hooks, you must **not** use anonymous functions as `this` will point to your test script and not the fixture instance.\r\n\r\n### Configuring fixture response data\r\nFor static data, providing a value to body is enough. For dynamic data, you can use the `initialized` hook which is called async.\r\n\r\nThe inheritance between server and fixture can ease the process.\r\n\r\n```javascript\r\n// Fixture file\r\nexport default {\r\n\tbody: {\r\n    id: 1,\r\n    name: 'foo'\r\n  }\r\n}\r\n```\r\n\r\n```javascript\r\n// Within test\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver\r\n  // The header will default in any fixtures\r\n  .setHeaders({'content-type':'application/json'})\r\n  // All fixture body will be transformed with JSON.stringify\r\n  .wrapper(data => JSON.stringify(data))\r\n  // Activate fixture mode\r\n  .respondWithFixture()\r\n\r\n// Url will be used to locate fixture\r\nconst response = fetch('/api/users/1');\r\n```\r\n\r\n### Setting up fixtures resolution\r\nIn order to let FMF loads the fixture, the server expects to have a `getFixtureParams` method (`_getFixtureParams` prior to 1.1.0) to resolve url into fixture params.\r\n\r\nFrom 1.0.2, FMF will respond with a `500` error if the loader is not set.\r\n\r\nIn case of error, the server will respond with a `404` error and provide the error description as status text.\r\n\r\n### Using webpack and fixtures as files\r\nWith Webpack, it's pretty easy to [create an alias](https://webpack.js.org/configuration/resolve/#resolvealias) to resolve fixtures location and require them at runtime. **Nevertheless, to avoid importing tests fixtures in your production bundle, you must use either separate configuration for building and testing or use the webpack [`IgnorePlugin`](https://webpack.js.org/plugins/ignore-plugin/).** You can have a look at the webpack configuration for this current repo for an example.\r\n\r\nFor instance, if you fixtures are located under `tests/fixtures` within your project root folder, you can use this code in your webpack tests configuration :\r\n\r\n```javascript\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  // [...]\r\n  resolve: {\r\n    alias: {\r\n      'fixtures': path.resolve('./tests/fixtures')\r\n    }\r\n  }\r\n  // [...]\r\n};\r\n```\r\n\r\n```javascript\r\n// Then in test\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver.getFixtureParams = function () {\r\n  return require(`fixtures/${this.fixture}.fixture.js`).default\r\n}\r\n```\r\n\r\nYou can affect any logic the `getFixtureParams` server's method to provide any finder to load the fixture file.\r\n\r\n#### Pure path resolution\r\nWhen not using pattern to analyze url, the server simply split the path and will look for a file named from the method used with `.fixture.js` as extension.\r\n\r\nFor instance, `/api/v1/users/1` with GET method will resolve in `fixtures/api/v1/users/1/get.fixture.js` and `/users` with POST method will resolve in `fixtures/users/post.fixture.js`.\r\n\r\nThis is most appropriate when you want a small set of samples for your testing purposes.\r\n\r\n#### Pattern resolution\r\nIf you have a larger set of data or want to rely on external data source, you may want to use pattern resolution to extract params from url path.\r\n\r\nFMF uses the pattern available with [`path-to-regexp`](https://github.com/pillarjs/path-to-regexp). The resulting file path will be the one without params and the params will be passed in arguments to the initialized hook.\r\n\r\nFor instance, `/api/v1/users/:id` as pattern and `api/v1/users/1`with GET method in fetch call will resolve in `fixtures/api/v1/users/get.fixture.js` as file and will provide an `{id: 1}` as param to the `initialzed` hook.\r\n\r\n```javascript\r\n// Fixture file\r\n\r\n// Located at /fixtures/api/users/get.fixture.js\r\n// We want to aggregate two requests to have the full users\r\n\r\nexport default {\r\n\t// Do not use anonymous function here as we're using' this\r\n\tinitialized: function({id}) {\r\n    return new Promise((resolve, reject) => {\r\n      // Restoring fetch to do outside call\r\n      this.server.stop();\r\n\r\n      let p1 = fetch(`http://api.example.com/users/${id}`);\r\n      let p2 = fetch(`http://api2.example.com/users/${id}`);\r\n\r\n      // Restoring server\r\n      this.server.start();\r\n\r\n      Promise.all([p1, p2]).then([r1, r2] => {\r\n        this.body = Object.assign({}, r1, r2);\r\n\t\t\t\tresolve();\r\n      })\r\n    });\r\n  }\r\n}\r\n```\r\n```javascript\r\n// Test code\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver\r\n  .setHeaders({'content-type':'application/json'})\r\n  .setWrapper(data => JSON.stringify(data))\r\n\t// Set pattern\r\n\t.setFixturePattern('/api/users/:id')\r\n  .respondWithFixture()\r\n\r\n// Url will be used to locate fixture file\r\nconst response = fetch('/api/users/56');\r\n```\r\n\r\nThe initialized hook is always called asynchronously, even if declared only as sync operations. Therefore, you can simply return a promise or use the `async/await` statements.\r\n\r\nIn the fixtures test suite, you will find a similar example with PouchDB.\r\n\r\nThis way is more appropriate when generating bunches of data server side and import it client side for testing purposes.\r\n\r\n### Fixture on-the-fly\r\nIt's also possible to create a fixture on-the-fly by providing the fixture params to the `fetch` call. Path resolution will be ignored in that case.\r\n\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver.start().respondWithFixture();\r\n\r\n// Give the fixture as parameter to fetch\r\nconst response = fetch({\r\n\tbody: 'test'\r\n});\r\n```\r\n\r\n## Setting up multiple responses based on call count\r\nFor functional testing, it may be useful to configure multiple responses at once as there will be multiple requests made without ability to tweak server's response between them.\r\n\r\nThis can be easily done with `onCall` method and the shortcuts `onFirstCall` (i.e. `onCall(0)`), `onSecondCall` (i.e. `onCall(1)`) and `onThirdCall` (i.e. `onCall(2)`).\r\n\r\nWithout `onCall`, the server will use its current response configuration if `respondWith` have been used or fixture if `respondWithFixture` have been used. This also apply when request doesn't match a predefined count.\r\n\r\nFor instance, let's say we want to simulate a timeout management.\r\n\r\nFirst request response must be delayed by 5s then a 504 error, second one must be immediate still with a 504 error and next ones from a fixture.\r\n\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver\r\n\t.start()\r\n\r\n\t.onFirstCall() // Tells server to freeze response configuration at next respondWithXXX call and keep it for first response\r\n\t.setDelay(5000)\r\n\t.respondWithStatus(504) // Freeze the configuration at this step\r\n\r\n\t.onSecondCall() // Tells server to freeze response configuration at next respondWithXXX call and keep it for second response\r\n\t.setDelay(0) // Set back delay to 0\r\n\t.respondWithStatus(504) // Freeze the actual configuration for the second request\r\n\r\n\t.respondWithFixture(); // Default response for third and next requests\r\n```\r\n\r\n**The default configuration must be provided at the very end of the chain.**\r\n\r\n## Bugs and improvements\r\nAny bugs and issues can be filed on the [github repository](https://github.com/liqueurdetoile/fetch-mock-fixtures/issues).\r\n\r\nYou are free and very welcome to fork the project and submit any PR to fix or improve FMF.\r\n\r\n## Changelog\r\n- 1.0.1 : Add requests history and possibility to set up different responses based on requests order. Add delay as a response parameter into fixture.\r\n",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"fetch-mock-fixtures\",\r\n  \"version\": \"2.0.0\",\r\n  \"description\": \"Fixtures based mocker for fetch API with BDD style configuration\",\r\n  \"main\": \"dist/index.min.js\",\r\n  \"keywords\": [\r\n    \"fetch\",\r\n    \"mock\",\r\n    \"fixtures\",\r\n    \"bdd\"\r\n  ],\r\n  \"author\": \"Liqueur de Toile\",\r\n  \"license\": \"MIT\",\r\n  \"homepage\": \"https://github.com/liqueurdetoile/fetch-mock-fixtures\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/liqueurdetoile/fetch-mock-fixtures.git\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/liqueurdetoile/fetch-mock-fixtures/issues\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"webpack --config webpack.conf/build.js -p\",\r\n    \"test\": \"cross-env BABEL_ENV=test karma start --single-run --browsers ChromeHeadless && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage\",\r\n    \"test:watch\": \"cross-env BABEL_ENV=test karma start --browsers ChromeHeadless  --log-level warn\",\r\n    \"test:all\": \"cross-env BABEL_ENV=test karma start --single-run --log-level error\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.4.3\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.4.0\",\r\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.4.3\",\r\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.2.0\",\r\n    \"@babel/preset-env\": \"^7.4.3\",\r\n    \"babel-eslint\": \"^10.0.0\",\r\n    \"babel-loader\": \"^8\",\r\n    \"babel-plugin-istanbul\": \"^5.1.0\",\r\n    \"chai\": \"^4.2.0\",\r\n    \"coveralls\": \"^3.0.3\",\r\n    \"cross-env\": \"^5.2.0\",\r\n    \"cz-conventional-changelog\": \"^2.1.0\",\r\n    \"eslint\": \"^5.16.0\",\r\n    \"eslint-loader\": \"^2.1.2\",\r\n    \"json-loader\": \"^0.5.7\",\r\n    \"karma\": \"^4.0.0\",\r\n    \"karma-babel-preprocessor\": \"^8.0.0\",\r\n    \"karma-chai\": \"^0.1.0\",\r\n    \"karma-chrome-launcher\": \"^2.2.0\",\r\n    \"karma-coverage\": \"^1.1.2\",\r\n    \"karma-coverage-istanbul-reporter\": \"^2.0.4\",\r\n    \"karma-edge-launcher\": \"^0.4.2\",\r\n    \"karma-firefox-launcher\": \"^1.1.0\",\r\n    \"karma-ie-launcher\": \"^1.0.0\",\r\n    \"karma-mocha\": \"^1.3.0\",\r\n    \"karma-mocha-reporter\": \"^2.2.5\",\r\n    \"karma-sinon\": \"^1.0.5\",\r\n    \"karma-sourcemap-loader\": \"^0.3.7\",\r\n    \"karma-webpack\": \"^4.0.0-rc.6\",\r\n    \"mocha\": \"^6.1.2\",\r\n    \"mocha-lcov-reporter\": \"^1.3.0\",\r\n    \"pouchdb\": \"^7.0.0\",\r\n    \"semantic-release\": \"^15.13.3\",\r\n    \"sinon\": \"^7.3.1\",\r\n    \"webpack\": \"^4.29.6\",\r\n    \"webpack-bundle-analyzer\": \"^3.2.0\",\r\n    \"webpack-cli\": \"^3.3.0\",\r\n    \"webpack-merge\": \"^4.2.1\"\r\n  },\r\n  \"dependencies\": {\r\n    \"lodash.isequal\": \"^4.5.0\",\r\n    \"path-to-regexp\": \"^3.0.0\",\r\n    \"url-parse\": \"^1.4.4\"\r\n  },\r\n  \"peerDependencies\": {\r\n    \"sinon\": \"^7\"\r\n  },\r\n  \"config\": {\r\n    \"commitizen\": {\r\n      \"path\": \"./node_modules/cz-conventional-changelog\"\r\n    }\r\n  }\r\n}\r\n",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "[![Build Status](https://travis-ci.org/liqueurdetoile/fetch-mock-fixtures.svg?branch=master)](https://travis-ci.org/liqueurdetoile/fetch-mock-fixtures)\r\n[![Coverage Status](https://coveralls.io/repos/github/liqueurdetoile/fetch-mock-fixtures/badge.svg?branch=master)](https://coveralls.io/github/liqueurdetoile/fetch-mock-fixtures?branch=master)\r\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\r\n[![Documentation](https://liqueurdetoile.github.io/fetch-mock-fixtures/badge.svg)](https://liqueurdetoile.github.io/fetch-mock-fixtures/) [![Greenkeeper badge](https://badges.greenkeeper.io/liqueurdetoile/fetch-mock-fixtures.svg)](https://greenkeeper.io/)\r\n\r\n<p align=\"center\"><a href=\"https://liqueurdetoile.com\" target=\"\\_blank\"><img src=\"https://hosting.liqueurdetoile.com/logo_lqdt.png\" alt=\"Liqueur de Toile\"></a></p>\r\n\r\n# Fetch-mock-fixtures (FMF)\r\n\r\nSince v2, FMF is meant to :\r\n- offers a BDD style syntax to configure responses in more readable-friendly way\r\n- provide an easy way to configure response on-the-fly\r\n- provide a powerful responses preset and fixtures system to avoid writing the same things again and again and ease functional tests\r\n\r\nWhile most of mockers for fetch are only meant to intercept and define the next response content, FMF goes far beyond and offers a wide range of tools.\r\n\r\nFMF will give its best with any testing framework (Mocha, Jasmine, Junit...) that allows to automate operations between each tests.\r\n\r\n## Installation\r\n\r\nInstallation can easily be done through NPM or Yarn. Sinon is required by FMF to stub `fetch` but is not included in the bundle. It must be installed as well if not already present.\r\n\r\n```bash\r\nnpm install sinon fetch-mock-fixtures --save-dev\r\n\r\nyarn add sinon fetch-mock-fixtures --dev\r\n```\r\nFMF should be installed as a dev dependency. It is not meant to be used as an in-app offline mode feature.\r\n\r\n**Note** : FMF is built upon Promise, Proxy and fetch API (Request, Headers, Response) that are available in all modern browsers. If you intend to run tests on older browsers (IE) or versions, you may need to polyfill them. Here's some available tools you can use :\r\n- Promise: [ES6-Promise](https://www.npmjs.com/package/es6-promise)\r\n- Fetch API : [window.fetch polyfill](https://www.npmjs.com/package/whatwg-fetch)\r\n- Proxy: [proxy-polyfill](https://www.npmjs.com/package/proxy-polyfill)\r\n\r\n\r\n\r\n## Usage and configuration for mocking fetch calls\r\n### Most basic example\r\n```javascript\r\n// Create a server\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\n// Create the server instance\r\nserver = new Server();\r\n\r\n// Start intercepting fetch calls\r\nserver.start();\r\n\r\n// Set up the server response (no matter the url)\r\nserver.respondWith('Hello world !');\r\n\r\n// Do fetch call\r\nfetch('/').then(response => {\r\n  response.text().then(message => {\r\n    console.log(message); // outputs 'Hello world !'\r\n  });\r\n})\r\n\r\n// Stop intercepting fetch calls\r\nserver.stop();\r\n```\r\nUnder the hood, the server is simply sending back a [`Response` object](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response) that mimics a regular fetch call response.\r\n\r\n### Controlling server\r\nAn FMF server instance exposes a few methods/properties to control server state.\r\n\r\nMethod  |  Description\r\n--|--\r\n`start()` |  Start the server by stubbing `window.fetch`\r\n`reset(stub=false)`  |  Reset to the server default configuration (see below). If `stub` is true, the sinon stub will also be resetted at the same time.\r\n`stop()`  |  Stop the server by restoring `window.fetch`. That does not affect server actual configuration.\r\n`running`  |  Returns true if server is running\r\n`stub`  |  Direct access to the stub of `window.fetch`. Accessing the property when server is not started will raise an Error.\r\n\r\nwindow.fetch is a fully functional [Sinon stub](https://sinonjs.org/releases/latest/stubs/). Therefore, you can use any of the method available on a stub.\r\n\r\n### Accessing request(s) sent to server\r\nThe server keeps all requests sent since the last start/stub reset. To ease, outgoing API requests tests, an FMF sever instance exposes a bunch of properties/method to access requests :\r\n\r\nProperty/Method  |  Description\r\n--|--\r\n`request`  |  Returns the last request made as a [Request object](https://developer.mozilla.org/en-US/docs/Web/API/Request)\r\n`url`  |  Returns the last url called as a parsed object (see [url-parse](https://www.npmjs.com/package/url-parse))\r\n`query`  |  Returns the parsed query part of the last called url (see [url-parse](https://www.npmjs.com/package/url-parse))\r\n`callCount`  |  Returns the number of requests received\r\n`getRequest(n)`  |  Returns the request send on the (n + 1)<sup>th</sup> call as a [Request object](https://developer.mozilla.org/en-US/docs/Web/API/Request). For instance, `server.getRequest(0)` will return the first request made\r\n`getAllRequests()`  |  Returns an array of all requests made as [Request objects](https://developer.mozilla.org/en-US/docs/Web/API/Request) in the same order than the calls\r\n`requestToUrl(request)`  |  Expects a [Request object](https://developer.mozilla.org/en-US/docs/Web/API/Request) as argument and returns a parsed url (see [url-parse](https://www.npmjs.com/package/url-parse))\r\n\r\n### Setting up Response\r\nIf you only need to disable `window.fetch`, you can simply start the server. All calls will be answered with the same default response configuration (see below).\r\n\r\nFor testing purposes, you may want to go deeper. FMF have three ways of dealing with incoming requests :\r\n\r\n1. Sending a response based on the current configuration\r\n\r\n2. Sending a response that can vary on a call count (it can be pretty handy when dealing with functional tests that may performs several calls)\r\n\r\n3. Using fixtures (see below). Fixtures can be combined with ordered responses\r\n\r\n### A more advanced example with Mocha\r\nIn real world, you may use some frameworks for your tests. Here's a full real-like example with FMF and Mocha :\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures';\r\n// The api you're testing\r\nimport api from 'modules/api';\r\n\r\ndescribe('API test suite', function() {\r\n\tconst server = new Server();\r\n\r\n\tbefore(() => server.start()) // start the server at the beginning\r\n\tafterEach(() => server.reset(true)) // Fully reset server between each tests\r\n\tafter(() => server.stop()) // Stop the server at the end\r\n\r\n\tdescribe('Unit test API', function() {\r\n\t\tit('should GET data', async function() {\r\n\t\t\tserver.respondWithJSON({\r\n\t\t\t\tid: 1,\r\n\t\t\t\tname: 'foo'\r\n\t\t\t})\r\n\r\n\t\t\tconst data = await api.get('/api/v1/users/1');\r\n\t\t\tdata.should.deep.equal({\r\n\t\t\t\tid: 1,\r\n\t\t\t\tname: 'foo'\r\n\t\t\t});\r\n\r\n\t\t\tserver.respondWithJSON({ // Changing server configuration between calls\r\n\t\t\t\tid: 2,\r\n\t\t\t\tname: 'baz'\r\n\t\t\t})\r\n\r\n\t\t\tconst data = await api.get('/api/v1/users/2');\r\n\t\t\tdata.should.deep.equal({\r\n\t\t\t\tid: 2,\r\n\t\t\t\tname: 'baz'\r\n\t\t\t});\r\n\t\t})\r\n\t})\r\n\r\n\t// Others unit tests\r\n\r\n\tdescribe('Functional tests API', function() {\r\n\t\t// Okay, we have a two steps auth. First username, then password\r\n\t\tit('should log in user', async function() {\r\n\t\t\tserver\r\n\t\t\t\t.onFirstCall()\r\n\t\t\t\t.setStatus(401)\r\n\t\t\t\t.respondWithJSON({\r\n\t\t\t\t\tsuccess: true\r\n\t\t\t\t})\r\n\t\t\t\t.onSecondCall()\r\n\t\t\t\t.setStatus(200) // Can be skipped as it is the default server status\r\n\t\t\t\t.respondWithJSON({\r\n\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\ttoken: '123'\r\n\t\t\t\t})\r\n\r\n\t\t\tlet logged = api.login({id: 1}); // will do the two requests\r\n\t\t\tlogged.should.be.true;\t\t\t\r\n\t\t\tapi.token.should.equal('123');\r\n\r\n\t\t\t// You can also check requests\r\n\t\t\tconst q1 = server.requestToUrl(server.getRequest(0)).query; // query part of the first request\r\n\t\t\tconst r2 = server.request; // Last request\r\n\r\n\t\t\tq1.username.should.equal('foo');\r\n\t\t\t// [...]\r\n\t\t})\r\n\t})\r\n\r\n\t// Others functional tests\r\n})\r\n```\r\n\r\n### Response configuration\r\n\r\n#### Data\r\n\r\n**Important: configuration persists through each calls and can be changed at runtime without the need to start/stop server. All changes will be applied on the next fetch call.**\r\n\r\nServer can be set to send back data. Without fixtures, you can use the `respondWith(body, init)` server method. For additional configuration, see below.\r\n\r\nThe server instance also exposes two shortcuts :\r\n- `respondWithStatus(status, body)` : This will send back the optionally provided body with the given status,\r\n- `respondWithJSON(body, init)` : this will apply `JSON.stringify` to the provided data and set content-type response headers to `application/json`.\r\n\r\n**Body can also be provided as a callback that will be evaluated synchronously at runtime. The server instance is passed as argument.**\r\n\r\n#### Response init parameters\r\n\r\nHere's the available response configuration options :\r\n\r\n  Configuration key | Chainable setter  | Description  |  Default\r\n--|---|---|---\r\n`delay`  | `setDelay`  |  Set a delay (in ms) before sending back response. It can be useful when testing timeout management  | `0`\r\n`headers`  | `setHeaders`  | Define the response headers. It accepts an object with header names as keys or an [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) instance  |  Default header is `content-type: text/html`\r\n`status` | `setStatus` | Define the response status code | `200`\r\n`statusText`  | `setStatusText`  | Define the response status text  |  `'OK'`\r\n\r\nFMF also accepts two other options that will be discussed below : `pattern` and `wrapper`.\r\n\r\n```javascript\r\n// Create a server\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\n// Create the server instance and start it\r\nserver = new Server();\r\nserver.start();\r\n\r\n// Set headers status to 201 and content-type to application/json\r\nserver\r\n  .configure({\r\n    status: 201,\r\n    headers: {'content-type': 'application/json'}\r\n  })\r\n  .respondWith(JSON.stringify({test: 'ok'}));\r\n\r\n// or\r\nserver\r\n  .setHeaders({\r\n    'content-type': 'application/json'\r\n  })\r\n  .setStatus(201)\r\n  .respondWith(JSON.stringify({test: 'ok'}));\r\n\r\n// or shorter\r\nserver\r\n  .setStatus(201)\r\n  .respondWithJSON({test: 'ok'});\r\n\r\n// Reset configuration to default\r\nserver.reset();\r\n```\r\n\r\n### Using response wrappers\r\nThe server instance allow the configuration of a wrapper that will be applied on data. The behavior of the wrapper depends on wrapper and data types :\r\n\r\nwrapper type  | data type  |  behavior\r\n--|---|--\r\n string | string  | The server will look for a `%data%` template in the wrapper and replace it with the data\r\n  string | object  | For each data key, the server will try to find a `%<key>%` template in the wrapper string and replace it with data value\r\n  function | anything  |  The server will use the returned value of the callback. Data is passed as argument of the callback\r\n\r\nYou may have a look at the wrapper test suite for some examples.\r\n\r\n## Fixtures system\r\n### Basics\r\nThe fixture is a simple way to automatically configure a Response object when matching a given \"url\". FMF provides a `Fixture` class as a convenient way to do it while adding a callback before and after building the response object. Usually, you do not need to create the fixture instance but provides parameters as an object :\r\n\r\nParameter name  |  Type | Description\r\n:--:|:--:|--\r\ndelay  |  `Number` | Number of ms to wait before sending the response\r\nbody  |  `null, Number, String, Function` | Body to send back with response. If provided as a function, the body will be evaluated **synchronously**\r\nheaders |  `Object, Headers` | Headers can be provided as an `Headers` instance  or as an object with headers names as keys\r\nstatus |  `Number` | Response status code\r\nstatusText | `String` | Response status text\r\nwrapper | `String, Function` | See [Using response wrappers](#using-response-wrappers)\r\ninitialized  |  `Function` | Callback called **asynchronously** before building response\r\ndestroyed  |  `Function` | Callback called **asynchronously** after building response\r\n\r\n**If no configuration value for a given parameter is available from fixture, the current server configuration value will be inherited.**\r\n\r\nYou can provide two functions as hooks (see below). In the hooks, the `server` instance is available as a property from `this`.\r\n\r\nFinally, to go into fixture mode, you must call the server `respondWithFixture` method **before** sending the request or accordingly to the call order.\r\n\r\nUnder the hood, the fixture is used to populate properties from a `Fixture` instance. The `Response` object is then configured from fixture properties.\r\n\r\n### Fixture lifecycle\r\nWhen server is dealing with a request, it will :\r\n1. load fixture and create an instance if needed;\r\n2. call and await the `initialized` hook on fixture. Fetching returned data and further configuration can be made at this step;\r\n3. ask fixture to provide its `Response` object build from fixture properties. Dynamic synced response can be configured in a body as a callback;\r\n4. call and await the `destroyed` hook on fixture. Cleaning can be made at this step;\r\n5. send back the `Response` object\r\n\r\nTo update fixture properties or access server property within hooks, you must **not** use anonymous functions as `this` will point to your test script and not the fixture instance.\r\n\r\n### Configuring fixture response data\r\nFor static data, providing a value to body is enough. For dynamic data, you can use the `initialized` hook which is called async.\r\n\r\nThe inheritance between server and fixture can ease the process.\r\n\r\n```javascript\r\n// Fixture file\r\nexport default {\r\n\tbody: {\r\n    id: 1,\r\n    name: 'foo'\r\n  }\r\n}\r\n```\r\n\r\n```javascript\r\n// Within test\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver\r\n  // The header will default in any fixtures\r\n  .setHeaders({'content-type':'application/json'})\r\n  // All fixture body will be transformed with JSON.stringify\r\n  .wrapper(data => JSON.stringify(data))\r\n  // Activate fixture mode\r\n  .respondWithFixture()\r\n\r\n// Url will be used to locate fixture\r\nconst response = fetch('/api/users/1');\r\n```\r\n\r\n### Setting up fixtures resolution\r\nIn order to let FMF loads the fixture, the server expects to have a `getFixtureParams` method (`_getFixtureParams` prior to 1.1.0) to resolve url into fixture params.\r\n\r\nFrom 1.0.2, FMF will respond with a `500` error if the loader is not set.\r\n\r\nIn case of error, the server will respond with a `404` error and provide the error description as status text.\r\n\r\n### Using webpack and fixtures as files\r\nWith Webpack, it's pretty easy to [create an alias](https://webpack.js.org/configuration/resolve/#resolvealias) to resolve fixtures location and require them at runtime. **Nevertheless, to avoid importing tests fixtures in your production bundle, you must use either separate configuration for building and testing or use the webpack [`IgnorePlugin`](https://webpack.js.org/plugins/ignore-plugin/).** You can have a look at the webpack configuration for this current repo for an example.\r\n\r\nFor instance, if you fixtures are located under `tests/fixtures` within your project root folder, you can use this code in your webpack tests configuration :\r\n\r\n```javascript\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  // [...]\r\n  resolve: {\r\n    alias: {\r\n      'fixtures': path.resolve('./tests/fixtures')\r\n    }\r\n  }\r\n  // [...]\r\n};\r\n```\r\n\r\n```javascript\r\n// Then in test\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver.getFixtureParams = function () {\r\n  return require(`fixtures/${this.fixture}.fixture.js`).default\r\n}\r\n```\r\n\r\nYou can affect any logic the `getFixtureParams` server's method to provide any finder to load the fixture file.\r\n\r\n#### Pure path resolution\r\nWhen not using pattern to analyze url, the server simply split the path and will look for a file named from the method used with `.fixture.js` as extension.\r\n\r\nFor instance, `/api/v1/users/1` with GET method will resolve in `fixtures/api/v1/users/1/get.fixture.js` and `/users` with POST method will resolve in `fixtures/users/post.fixture.js`.\r\n\r\nThis is most appropriate when you want a small set of samples for your testing purposes.\r\n\r\n#### Pattern resolution\r\nIf you have a larger set of data or want to rely on external data source, you may want to use pattern resolution to extract params from url path.\r\n\r\nFMF uses the pattern available with [`path-to-regexp`](https://github.com/pillarjs/path-to-regexp). The resulting file path will be the one without params and the params will be passed in arguments to the initialized hook.\r\n\r\nFor instance, `/api/v1/users/:id` as pattern and `api/v1/users/1`with GET method in fetch call will resolve in `fixtures/api/v1/users/get.fixture.js` as file and will provide an `{id: 1}` as param to the `initialzed` hook.\r\n\r\n```javascript\r\n// Fixture file\r\n\r\n// Located at /fixtures/api/users/get.fixture.js\r\n// We want to aggregate two requests to have the full users\r\n\r\nexport default {\r\n\t// Do not use anonymous function here as we're using' this\r\n\tinitialized: function({id}) {\r\n    return new Promise((resolve, reject) => {\r\n      // Restoring fetch to do outside call\r\n      this.server.stop();\r\n\r\n      let p1 = fetch(`http://api.example.com/users/${id}`);\r\n      let p2 = fetch(`http://api2.example.com/users/${id}`);\r\n\r\n      // Restoring server\r\n      this.server.start();\r\n\r\n      Promise.all([p1, p2]).then([r1, r2] => {\r\n        this.body = Object.assign({}, r1, r2);\r\n\t\t\t\tresolve();\r\n      })\r\n    });\r\n  }\r\n}\r\n```\r\n```javascript\r\n// Test code\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver\r\n  .setHeaders({'content-type':'application/json'})\r\n  .setWrapper(data => JSON.stringify(data))\r\n\t// Set pattern\r\n\t.setFixturePattern('/api/users/:id')\r\n  .respondWithFixture()\r\n\r\n// Url will be used to locate fixture file\r\nconst response = fetch('/api/users/56');\r\n```\r\n\r\nThe initialized hook is always called asynchronously, even if declared only as sync operations. Therefore, you can simply return a promise or use the `async/await` statements.\r\n\r\nIn the fixtures test suite, you will find a similar example with PouchDB.\r\n\r\nThis way is more appropriate when generating bunches of data server side and import it client side for testing purposes.\r\n\r\n### Fixture on-the-fly\r\nIt's also possible to create a fixture on-the-fly by providing the fixture params to the `fetch` call. Path resolution will be ignored in that case.\r\n\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver.start().respondWithFixture();\r\n\r\n// Give the fixture as parameter to fetch\r\nconst response = fetch({\r\n\tbody: 'test'\r\n});\r\n```\r\n\r\n## Setting up multiple responses based on call count\r\nFor functional testing, it may be useful to configure multiple responses at once as there will be multiple requests made without ability to tweak server's response between them.\r\n\r\nThis can be easily done with `onCall` method and the shortcuts `onFirstCall` (i.e. `onCall(0)`), `onSecondCall` (i.e. `onCall(1)`) and `onThirdCall` (i.e. `onCall(2)`).\r\n\r\nWithout `onCall`, the server will use its current response configuration if `respondWith` have been used or fixture if `respondWithFixture` have been used. This also apply when request doesn't match a predefined count.\r\n\r\nFor instance, let's say we want to simulate a timeout management.\r\n\r\nFirst request response must be delayed by 5s then a 504 error, second one must be immediate still with a 504 error and next ones from a fixture.\r\n\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver\r\n\t.start()\r\n\r\n\t.onFirstCall() // Tells server to freeze response configuration at next respondWithXXX call and keep it for first response\r\n\t.setDelay(5000)\r\n\t.respondWithStatus(504) // Freeze the configuration at this step\r\n\r\n\t.onSecondCall() // Tells server to freeze response configuration at next respondWithXXX call and keep it for second response\r\n\t.setDelay(0) // Set back delay to 0\r\n\t.respondWithStatus(504) // Freeze the actual configuration for the second request\r\n\r\n\t.respondWithFixture(); // Default response for third and next requests\r\n```\r\n\r\n**The default configuration must be provided at the very end of the chain.**\r\n\r\n## Bugs and improvements\r\nAny bugs and issues can be filed on the [github repository](https://github.com/liqueurdetoile/fetch-mock-fixtures/issues).\r\n\r\nYou are free and very welcome to fork the project and submit any PR to fix or improve FMF.\r\n\r\n## Changelog\r\n- 1.0.1 : Add requests history and possibility to set up different responses based on requests order. Add delay as a response parameter into fixture.\r\n",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\readme.md",
    "name": "./readme.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\manual\\pages\\installation.md",
    "name": "./manual/pages/installation.md",
    "content": "# Installation\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 212,
    "kind": "testFile",
    "name": "tests/examples/simple.setup.and.process.spec.js",
    "content": "import {Server} from '@';\n\nconst server = new Server();\n\ndescribe('Simple setup and process', function() {\n  before(() => server.start())\n  afterEach(() => server.reset());\n  after(() => server.stop())\n\n  describe('Error management', function() {\n\n  })\n})\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/examples/simple.setup.and.process.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "tests/examples/simple.setup.and.process.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/examples/simple.setup.and.process.spec.js~describe0",
    "access": null,
    "description": "Simple setup and process",
    "lineNumber": 5
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "tests/examples/simple.setup.and.process.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/examples/simple.setup.and.process.spec.js~describe0.describe1",
    "access": null,
    "description": "Error management",
    "lineNumber": 10
  },
  {
    "__docId__": 215,
    "kind": "testFile",
    "name": "tests/examples/webpack.dynamic.fixture.spec.js",
    "content": "import Server from '@';\nimport PouchDB from 'pouchdb';\n\nconst server = new Server();\nconst fetchFixture = function(server, request, response) {\n  let path = this.getPath(request, response), newResponse;\n  try {\n    newResponse = require(`fixtures/${path}.fixture.js`).default;\n  } catch (err) {\n    throw server.preset(404);\n  }\n\n  newResponse = Object.assign({}, response, newResponse)\n\n  return {\n    ...newResponse,\n    headers: {'content-type': 'application/json'},\n    wrapper: body => JSON.stringify(body)\n  }\n}\n\nlet db;\n\ndescribe('Webpack dynamic fixture example', function() {\n  before(async () => {\n    // Create data set\n    db = new PouchDB('test');\n\n    await db.put({\n      _id: '1',\n      id: 1,\n      name: 'foo'\n    });\n\n    await db.put({\n      _id: '2',\n      id: 2,\n      name: 'bar'\n    });\n\n    server.start().respond.before(fetchFixture);\n  })\n\n  after(() => {\n    server.stop();\n    db.destroy();\n  })\n\n  it('should load a fixture without pattern', async function() {\n    let response, data;\n\n    response = await fetch('/api/users');\n    response.status.should.equal(200);\n    data = await response.json();\n    data.should.deep.equal([\n      {\n        id: 1,\n        name: 'foo'\n      },\n      {\n        id: 2,\n        name: 'bar'\n      }\n    ]);\n\n    response = await fetch('/api/users/1');\n    response.status.should.equal(200);\n    data = await response.json();\n    data.should.deep.equal({\n      id: 1,\n      name: 'foo'\n    });\n\n    response = await fetch('/api/users', {method: 'POST'});\n    response.status.should.equal(201);\n    data = await response.json();\n    data.should.deep.equal({\n      id: 3,\n      name: 'baz'\n    });\n\n    response = await fetch('/api/users/5');\n    response.status.should.equal(404);\n  })\n\n  it('should load a fixture with pattern', async function() {\n    server.respond.pattern('/api2/users/:id?');\n\n    let response, data;\n\n    response = await fetch('/api2/users');\n    response.status.should.equal(200);\n    data = await response.json();\n    data.should.deep.equal([\n      {\n        id: 1,\n        name: 'foo'\n      },\n      {\n        id: 2,\n        name: 'bar'\n      }\n    ]);\n\n    response = await fetch('/api2/users/1');\n    response.status.should.equal(200);\n    data = await response.json();\n    data.should.deep.equal({\n      id: 1,\n      name: 'foo'\n    });\n\n    response = await fetch('/api2/users/5');\n    response.status.should.equal(404);\n  })\n})\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/examples/webpack.dynamic.fixture.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "describe2",
    "testId": 2,
    "memberof": "tests/examples/webpack.dynamic.fixture.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/examples/webpack.dynamic.fixture.spec.js~describe2",
    "access": null,
    "description": "Webpack dynamic fixture example",
    "lineNumber": 24
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "tests/examples/webpack.dynamic.fixture.spec.js~describe2",
    "testDepth": 1,
    "static": true,
    "longname": "tests/examples/webpack.dynamic.fixture.spec.js~describe2.it3",
    "access": null,
    "description": "should load a fixture without pattern",
    "lineNumber": 49
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "tests/examples/webpack.dynamic.fixture.spec.js~describe2",
    "testDepth": 1,
    "static": true,
    "longname": "tests/examples/webpack.dynamic.fixture.spec.js~describe2.it4",
    "access": null,
    "description": "should load a fixture with pattern",
    "lineNumber": 86
  },
  {
    "__docId__": 219,
    "kind": "testFile",
    "name": "tests/functionals/requests.processing.spec.js",
    "content": "import {Server} from '@';\n\nconst server = new Server();\n\ndescribe('Request processing test suite', function() {\n  beforeEach(() => {\n    server.start();\n  })\n\n  afterEach(() => server.reset().stop());\n\n  it('should throw if no fixtures defined', async function() {\n    try {\n      await fetch('/');\n    } catch (err) {\n      err.should.be.instanceof(Error);\n    }\n  })\n\n  it('should throw if no matching fixtures found', async function() {\n    server\n      .on\n      .method.is.equal('POST')\n      .respond\n      .with.status(201)\n\n    try {\n      await fetch('/');\n    } catch (err) {\n      err.should.be.instanceof(Error);\n    }\n  })\n\n  it('Should reset between calls', async function() {\n    let response;\n\n    server.respond.with.preset('json').and.body({test: true});\n    response = await fetch('/');\n    response.headers.get('content-type').should.equal('application/json');\n\n    server\n      .reset()\n      .respond.with.preset('default');\n\n    response = await fetch('/');\n    response.headers.get('content-type').should.equal('text/html');\n  })\n\n  it('should return response build from fixture', async function() {\n    server.respond.with.preset('json').and.body({test: true});\n\n    const response = await fetch('/');\n\n    response.headers.get('content-type').should.equal('application/json');\n\n    const data = await response.json();\n    data.test.should.be.true;\n  })\n\n  it('should return ordered responses', async function() {\n    server\n      .respond\n      .to.firstCall().with.body('first global call').and.status(201)\n      .to.call(2).with.body('Second global call. ** never see. Overriden by local call ** ').and.status(202)\n      .to.secondCall(true).with.body('Second local call').and.status(203)\n      .to.any.with.body('Other calls').and.status(206);\n\n    let response;\n\n    response = await fetch('/');\n    response.status.should.equal(201);\n    response = await fetch('/');\n    response.status.should.equal(203);\n    response = await fetch('/');\n    response.status.should.equal(206);\n    response = await fetch('/');\n    response.status.should.equal(206);\n  })\n\n  it('should parse body of request for matching', async function() {\n    server\n      .on.body('text').equal('test')\n      .respond.with.status('200')\n      .on.body('json', false).equal({test: true})\n      .respond.with.status('201')\n      .on.body('formData', false).equal(data => data && data.get('test') === 'true')\n      .respond.with.status('202')\n      .on.body('blob').equal(blob => blob.type === 'application/x-binary')\n      .respond.with.status('203');\n\n    let response;\n\n    response = await fetch('/text', {method: 'POST', body: 'test'});\n    response.status.should.equal(200);\n\n    response = await fetch('/json', {method: 'POST', body: JSON.stringify({test: true})});\n    response.status.should.equal(201);\n\n    let body = new FormData()\n    body.set('test', true)\n\n    response = await fetch('/formdata', {\n      method: 'POST',\n      body\n    });\n    response.status.should.equal(202);\n\n    response = await fetch('/blob', {\n      method: 'POST',\n      headers: {'content-type': 'application/x-binary'},\n      body: new Blob()\n    });\n    response.status.should.equal(203);\n  })\n})\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/functionals/requests.processing.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "tests/functionals/requests.processing.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/functionals/requests.processing.spec.js~describe5",
    "access": null,
    "description": "Request processing test suite",
    "lineNumber": 5
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "tests/functionals/requests.processing.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "tests/functionals/requests.processing.spec.js~describe5.it6",
    "access": null,
    "description": "should throw if no fixtures defined",
    "lineNumber": 12
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "tests/functionals/requests.processing.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "tests/functionals/requests.processing.spec.js~describe5.it7",
    "access": null,
    "description": "should throw if no matching fixtures found",
    "lineNumber": 20
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "tests/functionals/requests.processing.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "tests/functionals/requests.processing.spec.js~describe5.it8",
    "access": null,
    "description": "Should reset between calls",
    "lineNumber": 34
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "tests/functionals/requests.processing.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "tests/functionals/requests.processing.spec.js~describe5.it9",
    "access": null,
    "description": "should return response build from fixture",
    "lineNumber": 49
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "tests/functionals/requests.processing.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "tests/functionals/requests.processing.spec.js~describe5.it10",
    "access": null,
    "description": "should return ordered responses",
    "lineNumber": 60
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "tests/functionals/requests.processing.spec.js~describe5",
    "testDepth": 1,
    "static": true,
    "longname": "tests/functionals/requests.processing.spec.js~describe5.it11",
    "access": null,
    "description": "should parse body of request for matching",
    "lineNumber": 80
  },
  {
    "__docId__": 227,
    "kind": "testFile",
    "name": "tests/units/errors.spec.js",
    "content": "import {Server} from '@';\n\nconst server = new Server();\n\ndescribe('Errors management', function() {\n  before(() => server.start())\n  beforeEach(() => server.reset())\n  after(() => server.stop())\n\n  describe('Server errors', function() {\n    it('should be set to throw on error by default', async function() {\n      try {\n        await fetch();\n        expect.fail('Error not thrown');\n      } catch (err) {\n        err.should.be.instanceof(Error);\n      }\n    })\n\n    it('should be set to respond with 500 error when failing', async function() {\n      server.throwOnError(false);\n\n      const response = await fetch();\n\n      response.status.should.equal(500);\n    })\n  })\n})\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/errors.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "tests/units/errors.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe12",
    "access": null,
    "description": "Errors management",
    "lineNumber": 5
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "tests/units/errors.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe12.describe13",
    "access": null,
    "description": "Server errors",
    "lineNumber": 10
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "tests/units/errors.spec.js~describe12.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe12.describe13.it14",
    "access": null,
    "description": "should be set to throw on error by default",
    "lineNumber": 11
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "tests/units/errors.spec.js~describe12.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe12.describe13.it15",
    "access": null,
    "description": "should be set to respond with 500 error when failing",
    "lineNumber": 20
  },
  {
    "__docId__": 232,
    "kind": "testFile",
    "name": "tests/units/extending.request.spec.js",
    "content": "import FMFRequest from '@/helpers/FMFRequest';\n\ndescribe('Extended request test suite', function() {\n  it('should create Request from fetch params and expose parsed request properties', function() {\n    let r = new FMFRequest('/api/test?param1=true&param2=test', {method: 'GET'});\n\n    r.method.should.equal('GET');\n    r.url.should.equal('http://localhost:9876/api/test?param1=true&param2=test');\n    r.pathname.should.equal('/api/test');\n    r.query.should.deep.equal({\n      param1: 'true',\n      param2: 'test'\n    });\n  })\n\n  it('should extend existing Request Object and expose parsed request properties', function() {\n    let r = new FMFRequest(new Request('/api/test?param1=true&param2=test', {method: 'GET'}));\n\n    r.method.should.equal('GET');\n    r.url.should.equal('http://localhost:9876/api/test?param1=true&param2=test');\n    r.pathname.should.equal('/api/test');\n    r.query.should.deep.equal({\n      param1: 'true',\n      param2: 'test'\n    });\n  })\n\n  it('should return an FMF request as clone', function() {\n    let r = new FMFRequest('/');\n\n    r.clone().should.be.instanceof(FMFRequest);\n  })\n})\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/extending.request.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "tests/units/extending.request.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/extending.request.spec.js~describe16",
    "access": null,
    "description": "Extended request test suite",
    "lineNumber": 3
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "tests/units/extending.request.spec.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/extending.request.spec.js~describe16.it17",
    "access": null,
    "description": "should create Request from fetch params and expose parsed request properties",
    "lineNumber": 4
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "tests/units/extending.request.spec.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/extending.request.spec.js~describe16.it18",
    "access": null,
    "description": "should extend existing Request Object and expose parsed request properties",
    "lineNumber": 16
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "tests/units/extending.request.spec.js~describe16",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/extending.request.spec.js~describe16.it19",
    "access": null,
    "description": "should return an FMF request as clone",
    "lineNumber": 28
  },
  {
    "__docId__": 237,
    "kind": "testFile",
    "name": "tests/units/fixtures.spec.js",
    "content": "import {FMFRequest, Fixture, Server} from '@';\nimport RequestMatcher from '@/helpers/RequestMatcher';\n\nconst server = new Server();\n\ndescribe('Fixtures test suite', function() {\n  before(() => server.start())\n  afterEach(() => server.reset())\n  after(() => server.stop());\n\n  describe('Fixture configuration', function() {\n    it('should create a fixture', function() {\n      const f = new Fixture(server);\n\n      f.should.be.instanceof(Fixture);\n      expect(f._matcher).to.be.null;\n      f.on.should.be.instanceof(RequestMatcher);\n      f.on.should.deep.equal(f._matcher);\n      f.respond.should.deep.equal(f);\n    })\n  })\n\n  describe('Fixture requests processing', function() {\n    it('should process fixture lifecyle', async function() {\n      const request = new FMFRequest('/api/v1/users/1');\n      const f = new Fixture(server);\n      const before = sinon.spy();\n      const body = sinon.spy();\n      const after = sinon.spy();\n      const response = {\n        pattern: '/api/v1/users/:id?',\n        before,\n        body,\n        after\n      };\n\n      f.respond.set(response)\n\n      const responseObject = await f.getResponse(request);\n\n      before.calledOnceWithExactly(server, request, response).should.be.true;\n      body.calledOnceWithExactly({id: '1'}, request, server).should.true;\n      after.calledOnceWithExactly(server, responseObject).should.be.true;\n    })\n\n    it('should alter response from before response callback', async function() {\n      server.respond.with.preset('default');\n\n      let response = await fetch('/api/v1/users/1');\n      response.status.should.equal(200);\n\n      server.respond.before(() => ({\n        status: 404\n      }));\n\n      response = await fetch('/api/v1/users/1');\n      response.status.should.equal(404);\n    })\n\n    it('should use a preset if one is thrown in fixture lifecycle', async function() {\n      server.respond\n        .with.preset('default')\n        .before(server => {\n          throw server.preset(404)\n        });\n\n      let response = await fetch('/api/v1/users/1');\n      response.status.should.equal(404);\n    })\n\n    it('should use a Response instance if one is thrown in fixture lifecycle', async function() {\n      server.respond\n        .with.preset('default')\n        .body(() => {\n          throw new Response(null, {status: 404});\n        });\n\n      let response = await fetch('/api/v1/users/1');\n      response.status.should.equal(404);\n    })\n\n    it('should use a response object descriptor if one is thrown in fixture lifecycle', async function() {\n      server.respond\n        .with.preset('default')\n        .after(() => {\n          throw {status: 404}\n        });\n\n      let response = await fetch('/api/v1/users/1');\n      response.status.should.equal(404);\n    })\n\n    it('should return a 500 error for Error throws', async function() {\n      server.respond\n        .with.preset('default')\n        .before(() => {\n          throw new TypeError()\n        });\n\n      let response = await fetch('/api/v1/users/1');\n      response.status.should.equal(500);\n      response.statusText.should.equal('TypeError');\n    })\n\n    it('should return a 500 error for other throws', async function() {\n      server.respond\n        .with.preset('default')\n        .before(() => {\n          throw 'thing'\n        });\n\n      let response = await fetch('/api/v1/users/1');\n      response.status.should.equal(500);\n    })\n  })\n})\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/fixtures.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "describe20",
    "testId": 20,
    "memberof": "tests/units/fixtures.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20",
    "access": null,
    "description": "Fixtures test suite",
    "lineNumber": 6
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "tests/units/fixtures.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe21",
    "access": null,
    "description": "Fixture configuration",
    "lineNumber": 11
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "tests/units/fixtures.spec.js~describe20.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe21.it22",
    "access": null,
    "description": "should create a fixture",
    "lineNumber": 12
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "tests/units/fixtures.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe23",
    "access": null,
    "description": "Fixture requests processing",
    "lineNumber": 23
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "tests/units/fixtures.spec.js~describe20.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe23.it24",
    "access": null,
    "description": "should process fixture lifecyle",
    "lineNumber": 24
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "tests/units/fixtures.spec.js~describe20.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe23.it25",
    "access": null,
    "description": "should alter response from before response callback",
    "lineNumber": 46
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "tests/units/fixtures.spec.js~describe20.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe23.it26",
    "access": null,
    "description": "should use a preset if one is thrown in fixture lifecycle",
    "lineNumber": 60
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "tests/units/fixtures.spec.js~describe20.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe23.it27",
    "access": null,
    "description": "should use a Response instance if one is thrown in fixture lifecycle",
    "lineNumber": 71
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "tests/units/fixtures.spec.js~describe20.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe23.it28",
    "access": null,
    "description": "should use a response object descriptor if one is thrown in fixture lifecycle",
    "lineNumber": 82
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "tests/units/fixtures.spec.js~describe20.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe23.it29",
    "access": null,
    "description": "should return a 500 error for Error throws",
    "lineNumber": 93
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "tests/units/fixtures.spec.js~describe20.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe20.describe23.it30",
    "access": null,
    "description": "should return a 500 error for other throws",
    "lineNumber": 105
  },
  {
    "__docId__": 249,
    "kind": "testFile",
    "name": "tests/units/history.spec.js",
    "content": "import Server from '@';\n\nconst server = new Server();\n\ndescribe('History test suite', function() {\n  before(async () => {\n    server.start()\n    server.respond.with.preset('default');\n\n    await (await fetch('/1')).text();\n    await fetch('/2');\n    await fetch('/3');\n    await fetch('/4');\n    await fetch('/5');\n  })\n  after(() => server.stop())\n\n  it('should get last request and response', function() {\n    server.request.should.be.instanceof(Request);\n    server.response.should.be.instanceof(Response);\n  })\n\n  it('should have cloned response before body parsing', function() {\n    server.history.response.first.should.be.instanceof(Response);\n    server.history.response.first.bodyUsed.should.be.false;\n  })\n})\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/history.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "tests/units/history.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/history.spec.js~describe31",
    "access": null,
    "description": "History test suite",
    "lineNumber": 5
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "tests/units/history.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/history.spec.js~describe31.it32",
    "access": null,
    "description": "should get last request and response",
    "lineNumber": 18
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "tests/units/history.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/history.spec.js~describe31.it33",
    "access": null,
    "description": "should have cloned response before body parsing",
    "lineNumber": 23
  },
  {
    "__docId__": 253,
    "kind": "testFile",
    "name": "tests/units/presets.spec.js",
    "content": "import {Preset, Server} from '@';\n\nconst p1 = {\n  body: null,\n  delay: 0,\n  headers: new Headers({'content-type': 'application/json'}),\n  status: 200,\n  statusText: 'OK',\n  wrapper: '%data%',\n  pattern: 'pattern',\n  before: () => 'before',\n  after: () => 'after'\n};\n\nconst r1 = p1;\n\nconst p2 = {\n  body: 'test',\n  delay: 1000,\n  headers: false,\n  status: 200,\n  statusText: 'OK',\n  wrapper: false,\n  pattern: false,\n  before: false,\n  after: false\n}\n\nconst r2 = {\n  body: 'test',\n  delay: 1000,\n  status: 200,\n  statusText: 'OK'\n}\n\nlet server;\n\ndescribe('Presets test suite', function() {\n  beforeEach(function() {\n    server = new Server();\n  });\n\n  it('should create a blank preset', function() {\n    const preset = server.preset('test');\n\n    preset.should.be.instanceof(Preset);\n  });\n\n  it('should create a configured preset', function() {\n    const preset = server.preset('test', {\n      status: 204\n    });\n\n    preset._any.should.deep.equal({status: 204});\n  });\n\n  it('should update preset', function() {\n    let preset;\n\n    preset = server.preset('test', p1);\n    preset._any.should.deep.equal(r1);\n    server._presets['test'].should.equal(preset);\n    preset = server.preset('test', p2);\n    server._presets['test'].should.equal(preset);\n    preset._any.should.deep.equal(r2);\n  })\n});\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/presets.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "tests/units/presets.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe34",
    "access": null,
    "description": "Presets test suite",
    "lineNumber": 38
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "tests/units/presets.spec.js~describe34",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe34.it35",
    "access": null,
    "description": "should create a blank preset",
    "lineNumber": 43
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "tests/units/presets.spec.js~describe34",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe34.it36",
    "access": null,
    "description": "should create a configured preset",
    "lineNumber": 49
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "tests/units/presets.spec.js~describe34",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe34.it37",
    "access": null,
    "description": "should update preset",
    "lineNumber": 57
  },
  {
    "__docId__": 258,
    "kind": "testFile",
    "name": "tests/units/request.configurator.spec.js",
    "content": "import FMFRequest from '@/helpers/FMFRequest';\nimport Fixture from '@/Fixture';\nimport RequestMatcher from '@/helpers/RequestMatcher';\nimport AbstractProcessor from '@/processors/AbstractProcessor';\nimport StringProcessor from '@/processors/AbstractProcessor';\n\ndescribe('Request configurator test suite', function() {\n  it('should create a matcher', function() {\n    const f = new Fixture();\n\n    f.on.should.be.instanceof(RequestMatcher);\n  })\n\n  it('should throw on unsupported FMFRequest property', function() {\n    const f = new Fixture();\n\n    expect(() => f.on.bugsy).to.throw();\n  })\n\n  it('should return a processor', function() {\n    const f = new Fixture();\n\n    f.on.method.should.be.instanceof(AbstractProcessor);\n    f.on._processors.length.should.equal(1);\n    f.on._processors[0].should.be.instanceof(StringProcessor);\n  })\n\n  it('should process equal', async function () {\n    const f = new Fixture();\n    const r = new FMFRequest('/');\n\n    f.on.method.equal('GET').should.deep.equal(f._matcher);\n    (await f.match(r)).should.be.true;\n  })\n\n  it('should process header', async function () {\n    const f = new Fixture();\n    const r = new FMFRequest('/', {headers: {'content-type': 'application/json'}});\n\n    f.on.header('content-type').equal(/json/).should.deep.equal(f._matcher);\n    (await f.match(r)).should.be.true;\n  })\n})\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/request.configurator.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "tests/units/request.configurator.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/request.configurator.spec.js~describe38",
    "access": null,
    "description": "Request configurator test suite",
    "lineNumber": 7
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "tests/units/request.configurator.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/request.configurator.spec.js~describe38.it39",
    "access": null,
    "description": "should create a matcher",
    "lineNumber": 8
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "tests/units/request.configurator.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/request.configurator.spec.js~describe38.it40",
    "access": null,
    "description": "should throw on unsupported FMFRequest property",
    "lineNumber": 14
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "tests/units/request.configurator.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/request.configurator.spec.js~describe38.it41",
    "access": null,
    "description": "should return a processor",
    "lineNumber": 20
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "tests/units/request.configurator.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/request.configurator.spec.js~describe38.it42",
    "access": null,
    "description": "should process equal",
    "lineNumber": 28
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "tests/units/request.configurator.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/request.configurator.spec.js~describe38.it43",
    "access": null,
    "description": "should process header",
    "lineNumber": 36
  },
  {
    "__docId__": 265,
    "kind": "testFile",
    "name": "tests/units/respond.spec.js",
    "content": "import {Fixture, Server} from '@';\n\nconst p1 = {\n  body: null,\n  delay: 0,\n  headers: new Headers({'content-type': 'application/json'}),\n  status: 200,\n  statusText: 'OK',\n  wrapper: '%data%',\n  pattern: 'pattern',\n  before: () => 'before',\n  after: () => 'after'\n};\n\nconst p2 = {\n  body: 'test',\n  delay: 1000,\n  headers: false,\n  status: 200,\n  statusText: 'OK',\n  wrapper: false,\n  pattern: false,\n  before: false,\n  after: false\n}\n\nconst r2 = {\n  body: 'test',\n  delay: 1000,\n  status: 200,\n  statusText: 'OK'\n}\n\nlet server;\n\ndescribe('Respond test suite', function() {\n  beforeEach(function() {\n    server = new Server();\n  });\n\n  it('should create a blank fixture and register it', function() {\n    const f = server.respond;\n\n    f.should.be.instanceof(Fixture);\n    server._fixtures[0].should.deep.equal(f);\n  })\n\n  it('should set a default response', function() {\n    server.respond.set(p1);\n    server._fixtures[0]._any.should.deep.equal(p1);\n  })\n\n  it('should update default response', function() {\n    server.respond.set(p1).set(p2);\n    server._fixtures[0]._any.should.deep.equal(r2);\n  })\n\n  it('should change default response again', function() {\n    server.respond.set(p1);\n    server.respond.set(p2);\n    server._fixtures.length.should.equal(1);\n    server._fixtures[0]._any.should.deep.equal(r2);\n  })\n\n  it('should register ordered responses with global call count', function() {\n    server.respond.set(p1);\n    server._fixtures[0]._any.should.deep.equal(p1);\n    server.respond.to.firstCall().set(p2)\n    server._fixtures[0].globalCalls[1].should.deep.equal(r2);\n  })\n\n  it('should register ordered responses with own call count', function() {\n    server.respond.set(p1);\n    server._fixtures[0]._any.should.deep.equal(p1);\n    server.respond.to.firstCall(true).set(p2)\n    server._fixtures[0].ownCalls[1].should.deep.equal(r2);\n  })\n});\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/respond.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "tests/units/respond.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe44",
    "access": null,
    "description": "Respond test suite",
    "lineNumber": 36
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "tests/units/respond.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe44.it45",
    "access": null,
    "description": "should create a blank fixture and register it",
    "lineNumber": 41
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "tests/units/respond.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe44.it46",
    "access": null,
    "description": "should set a default response",
    "lineNumber": 48
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "tests/units/respond.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe44.it47",
    "access": null,
    "description": "should update default response",
    "lineNumber": 53
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "tests/units/respond.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe44.it48",
    "access": null,
    "description": "should change default response again",
    "lineNumber": 58
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "tests/units/respond.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe44.it49",
    "access": null,
    "description": "should register ordered responses with global call count",
    "lineNumber": 65
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "tests/units/respond.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe44.it50",
    "access": null,
    "description": "should register ordered responses with own call count",
    "lineNumber": 72
  },
  {
    "__docId__": 273,
    "kind": "testFile",
    "name": "tests/units/server.controls.spec.js",
    "content": "import {Server} from '@';\n\ndescribe('Server control test suite', function() {\n  it('should construct a server', function() {\n    const server = new Server();\n\n    server.should.be.instanceof(Server);\n  })\n\n  it('should start, reset and stop server', function() {\n    const server = new Server();\n\n    server.running.should.be.false;\n    server.start().should.deep.equal(server);\n    server.running.should.be.true;\n    server.reset().should.deep.equal(server);\n    server.running.should.be.true;\n    server.stop().should.deep.equal(server);\n    server.running.should.be.false;\n  })\n\n  it('should expose stub when running and throw when not running', function() {\n    const server = new Server();\n\n    expect(() => server.stub).to.throw();\n    server.start()\n    server.stub.should.be.instanceof(Function);\n  })\n})\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/server.controls.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "describe51",
    "testId": 51,
    "memberof": "tests/units/server.controls.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe51",
    "access": null,
    "description": "Server control test suite",
    "lineNumber": 3
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "tests/units/server.controls.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe51.it52",
    "access": null,
    "description": "should construct a server",
    "lineNumber": 4
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "tests/units/server.controls.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe51.it53",
    "access": null,
    "description": "should start, reset and stop server",
    "lineNumber": 10
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "tests/units/server.controls.spec.js~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe51.it54",
    "access": null,
    "description": "should expose stub when running and throw when not running",
    "lineNumber": 22
  }
]