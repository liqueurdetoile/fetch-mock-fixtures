[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Fixture.js",
    "content": "import Preset from './Preset';\r\nimport ResponseConfigurator from './helpers/ResponseConfigurator';\r\nimport RequestMatcher from './helpers/RequestMatcher';\r\nimport FMFException from './helpers/FMFException';\r\nimport pathToRegexp from 'path-to-regexp';\r\n\r\n/**\r\n * A fixture contains all the needed informations to find\r\n * out wich request can be matched and wich response\r\n * must be sent back\r\n * @version 1.0.0\r\n * @since 2.0.0\r\n */\r\nexport class Fixture extends ResponseConfigurator {\r\n  /**\r\n   * Stores the number of responses generated by this fixture\r\n   * @type {Number}\r\n   * @since 2.0.0\r\n   */\r\n  calls = 0;\r\n\r\n  /**\r\n   * Stores the response which are specific to own call count\r\n   * @type {Array}\r\n   * @since 2.0.0\r\n   */\r\n  ownCalls = [];\r\n\r\n  /**\r\n   * Stores the response which are specific to global call count\r\n   * @type {Array}\r\n   * @since 2.0.0\r\n   */\r\n  globalCalls = [];\r\n\r\n  /**\r\n   * Flag for response configuration\r\n   * @type {null|Number}\r\n   * @since 2.0.0\r\n   */\r\n  _callnum = null;\r\n\r\n  /**\r\n   * Request matcher instance\r\n   * @type {null|RequestMatcher}\r\n   * @since 2.0.0\r\n   */\r\n  _matcher = null;\r\n\r\n  /**\r\n   * Flag for call count configuration\r\n   * @type {Boolean}\r\n   * @since 2.0.0\r\n   */\r\n  _ownCall = false;\r\n\r\n  /**\r\n   * Allow response key for configuration\r\n   * @type {Array}\r\n   * @since 2.0.0\r\n   */\r\n  _responseKeys = ['body', 'delay', 'headers', 'status', 'statusText', 'wrapper', 'pattern', 'before', 'after', 'preset'];\r\n\r\n  /**\r\n   * Initialize the ResponseConfigurator helper\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {Server}  [server] Server instance\r\n   */\r\n  constructor(server) {\r\n    super(server);\r\n  }\r\n\r\n  /**\r\n   * Set the fixture in request matching mode. The matcher is\r\n   * behing a proxy to allow quick property mapping\r\n   *\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {RequestMatcher}  Request matcher\r\n   */\r\n  get on() {\r\n    if (this._mode === 'respond') return this.server.on;\r\n\r\n    this._matcher = this._matcher || new RequestMatcher(this);\r\n\r\n    return new Proxy(this._matcher, {\r\n      get: (obj, prop) => prop in obj ? obj[prop] : obj.getProcessor(prop)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Alias for `on`\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {RequestMatcher}  Request matcher\r\n   */\r\n  get when() {\r\n    return this.on;\r\n  }\r\n\r\n  /**\r\n   * Ask server to process the respond. If the fixture is already in response\r\n   * mode, a new fixture will be returned. Otherwise, it will be the same fixture\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Fixture}  Fixture\r\n   */\r\n  get respond() {\r\n    return this.server ? this.server._processRespond(this) : this;\r\n  }\r\n\r\n  /**\r\n   * Target the current response set based on call count configuration\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Object}  Response configuration object\r\n   */\r\n  _getCurrentResponseSet() {\r\n    if (this._callnum !== null) {\r\n      if (this._ownCall) {\r\n        this.ownCalls[this._callnum] = this.ownCalls[this._callnum] || {}\r\n        return this.ownCalls[this._callnum];\r\n      }\r\n      this.globalCalls[this._callnum] = this.globalCalls[this._callnum] || {}\r\n      return this.globalCalls[this._callnum];\r\n    }\r\n\r\n    this._any = this._any;\r\n    return this._any;\r\n  }\r\n\r\n  /**\r\n   * Syntax sugar for human readability\r\n   * @version 1.0.0\r\n   * @since   1.0.0\r\n   * @return  {Fixture}\r\n   */\r\n  get to() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Alias for respond that always return the fallback fixture\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Fixture}  Fallback fixture\r\n   */\r\n  get fallback() {\r\n    return this.server.fallback;\r\n  }\r\n\r\n  firstCall(own = false) {\r\n    this._callnum = 1;\r\n    this._ownCall = own;\r\n\r\n    return this;\r\n  }\r\n\r\n  secondCall(own = false) {\r\n    this._callnum = 2;\r\n    this._ownCall = own;\r\n\r\n    return this;\r\n  }\r\n\r\n  thirdCall(own = false) {\r\n    this._callnum = 3;\r\n    this._ownCall = own;\r\n\r\n    return this;\r\n  }\r\n\r\n  call(n, own) {\r\n    this._callnum = parseInt(n, 10);\r\n    this._ownCall = own;\r\n\r\n    return this;\r\n  }\r\n\r\n  get any() {\r\n    this._callnum = null;\r\n    this._ownCall = false;\r\n\r\n    return this;\r\n  }\r\n\r\n  preset(name) {\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (name) response.preset = name;\r\n    else delete response.preset;\r\n\r\n    return this;\r\n  }\r\n\r\n  async match(request, server) {\r\n    /* istanbul ignore if */\r\n    if (!this._matcher) return true;\r\n\r\n    return await this._matcher.match(request, server);\r\n  }\r\n\r\n  async sleep(delay) {\r\n    await new Promise(resolve => setTimeout(resolve, delay));\r\n  }\r\n\r\n  extractParams(pathname, pattern) {\r\n    const params = {};\r\n    const keys = [];\r\n    const re = pathToRegexp(pattern, keys);\r\n    const parsed = re.exec(pathname);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      let name = keys[i].name;\r\n      let value = parsed[i+1];\r\n\r\n      params[name] = value;\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  wrap(body, wrapper) {\r\n    if (wrapper instanceof Function) return wrapper(body);\r\n\r\n    return body || null;\r\n  }\r\n\r\n  getPath(request, response) {\r\n    let url = response.pattern || request.pathname;\r\n    let path = url.split('/').filter(p => p && p.indexOf(':') < 0);\r\n    let filename = request.method.toLowerCase();\r\n\r\n    return path.concat(filename).join('/');\r\n  }\r\n\r\n  _exceptionManagement(err, message) {\r\n    if (err instanceof Error || typeof err === 'string') {\r\n      throw new FMFException(message, err);\r\n    }\r\n\r\n    if (err instanceof Response) {\r\n      return err;\r\n    }\r\n\r\n    if (err instanceof Preset) {\r\n      let {body, headers, status, statusText} = err._any;\r\n\r\n      return new Response(body, {headers, status, statusText});\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (err instanceof Object) {\r\n      let {body, headers, status, statusText} = err;\r\n\r\n      return new Response(body, {headers, status, statusText});\r\n    }\r\n  }\r\n\r\n  async _buildResponse(request, response) {\r\n    let body;\r\n\r\n    // Process before hook and update response if one is returned\r\n    if (response.before instanceof Function) {\r\n      try {\r\n        let responseReplacement = await response.before.call(this, this.server, request, response);\r\n\r\n        if (responseReplacement) response = responseReplacement;\r\n      } catch (err) {\r\n        return this._exceptionManagement(err, 'Unable to process before callback');\r\n      }\r\n    }\r\n\r\n    // Extract params if a pattern have been set\r\n    let params = response.pattern ? this.extractParams(request.pathname, response.pattern) : {};\r\n\r\n    // Process body callback\r\n    try {\r\n      body = (response.body instanceof Function) ? await response.body.call(this, params, {\r\n        request,\r\n        response,\r\n        server: this.server\r\n      }) : response.body;\r\n    } catch (err) {\r\n      return this._exceptionManagement(err, 'Unable to process body callback');\r\n    }\r\n\r\n    // Apply preset\r\n    if (response.preset) {\r\n      let preset = this.server._presets[response.preset];\r\n\r\n      /* istanbul ignore if */\r\n      if (!preset) throw new FMFException(`Unable to apply preset. Preset ${response.preset} is not defined`);\r\n      response = Object.assign(response, preset._any);\r\n    }\r\n\r\n    // Construct response\r\n    let {headers, status, statusText, wrapper} = response;\r\n\r\n    const responseObject = new Response(this.wrap(body, wrapper), {headers, status, statusText});\r\n\r\n    // Process after hook\r\n    try {\r\n      if (response.after instanceof Function) await response.after.call(this, this.server, responseObject);\r\n    } catch (err) {\r\n      return this._exceptionManagement(err, 'Unable to process after callback');\r\n    }\r\n\r\n    // Delay response\r\n    if (response.delay) await this.sleep(response.delay);\r\n\r\n    return responseObject;\r\n  }\r\n\r\n  getResponse(request) {\r\n    const localCalls = ++this.calls;\r\n    const globalCalls = this.server.calls;\r\n\r\n    // Match local calls first\r\n    return this._buildResponse(request,\r\n      this.ownCalls[localCalls] ||\r\n      this.globalCalls[globalCalls] ||\r\n      this._any\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fixture;\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/Fixture.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Fixture",
    "memberof": "src/Fixture.js",
    "static": true,
    "longname": "src/Fixture.js~Fixture",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/Fixture.js",
    "importStyle": "{Fixture}",
    "description": "A fixture contains all the needed informations to find\nout wich request can be matched and wich response\nmust be sent back",
    "lineNumber": 14,
    "since": "2.0.0",
    "version": "1.0.0",
    "interface": false,
    "extends": [
      "src/helpers/ResponseConfigurator.js~ResponseConfigurator"
    ]
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "calls",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#calls",
    "access": "public",
    "description": "Stores the number of responses generated by this fixture",
    "lineNumber": 20,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "ownCalls",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#ownCalls",
    "access": "public",
    "description": "Stores the response which are specific to own call count",
    "lineNumber": 27,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "globalCalls",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#globalCalls",
    "access": "public",
    "description": "Stores the response which are specific to global call count",
    "lineNumber": 34,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_callnum",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#_callnum",
    "access": "private",
    "description": "Flag for response configuration",
    "lineNumber": 41,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "null",
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_matcher",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#_matcher",
    "access": "private",
    "description": "Request matcher instance",
    "lineNumber": 48,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "null",
        "RequestMatcher"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_ownCall",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#_ownCall",
    "access": "private",
    "description": "Flag for call count configuration",
    "lineNumber": 55,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_responseKeys",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#_responseKeys",
    "access": "private",
    "description": "Allow response key for configuration",
    "lineNumber": 62,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#constructor",
    "access": "public",
    "description": "Initialize the ResponseConfigurator helper",
    "lineNumber": 70,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": true,
        "name": "server",
        "description": "Server instance"
      }
    ]
  },
  {
    "__docId__": 58,
    "kind": "get",
    "name": "on",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#on",
    "access": "public",
    "description": "Set the fixture in request matching mode. The matcher is\nbehing a proxy to allow quick property mapping",
    "lineNumber": 82,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "RequestMatcher"
      ],
      "spread": false,
      "description": "Request matcher"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "get",
    "name": "when",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#when",
    "access": "public",
    "description": "Alias for `on`",
    "lineNumber": 98,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "RequestMatcher"
      ],
      "spread": false,
      "description": "Request matcher"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "get",
    "name": "respond",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#respond",
    "access": "public",
    "description": "Ask server to process the respond. If the fixture is already in response\nmode, a new fixture will be returned. Otherwise, it will be the same fixture",
    "lineNumber": 109,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Fixture"
      ],
      "spread": false,
      "description": "Fixture"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "_getCurrentResponseSet",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#_getCurrentResponseSet",
    "access": "private",
    "description": "Target the current response set based on call count configuration",
    "lineNumber": 119,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Response configuration object"
    },
    "params": []
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_any",
    "memberof": "src/Fixture.js~Fixture",
    "static": false,
    "longname": "src/Fixture.js~Fixture#_any",
    "access": "private",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "get",
    "name": "to",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#to",
    "access": "public",
    "description": "Syntax sugar for human readability",
    "lineNumber": 139,
    "since": "  1.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Fixture"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "get",
    "name": "fallback",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#fallback",
    "access": "public",
    "description": "Alias for respond that always return the fallback fixture",
    "lineNumber": 149,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Fixture"
      ],
      "spread": false,
      "description": "Fallback fixture"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "firstCall",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#firstCall",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "own",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "secondCall",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#secondCall",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "own",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "thirdCall",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#thirdCall",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "own",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "call",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#call",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      },
      {
        "name": "own",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "get",
    "name": "any",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#any",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "preset",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#preset",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "match",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Fixture.js~Fixture#match",
    "access": "public",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "server",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "sleep",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Fixture.js~Fixture#sleep",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "delay",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "extractParams",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#extractParams",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [
      {
        "name": "pathname",
        "types": [
          "*"
        ]
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "wrap",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#wrap",
    "access": "public",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "params": [
      {
        "name": "body",
        "types": [
          "*"
        ]
      },
      {
        "name": "wrapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getPath",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#getPath",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "_exceptionManagement",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#_exceptionManagement",
    "access": "private",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "_buildResponse",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Fixture.js~Fixture#_buildResponse",
    "access": "private",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "getResponse",
    "memberof": "src/Fixture.js~Fixture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Fixture.js~Fixture#getResponse",
    "access": "public",
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/helpers/FMFException.js",
    "content": "export default class FMFException extends Error {\r\n  constructor(message, previous = null) {\r\n    super(message);\r\n\r\n    this.previous = previous;\r\n\r\n    /* istanbul ignore else */\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, FMFException);\r\n    }\r\n  }\r\n\r\n  toString() {\r\n    return `FMF error: ${this.message}`;\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/helpers/FMFException.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "FMFException",
    "memberof": "src/helpers/FMFException.js",
    "static": true,
    "longname": "src/helpers/FMFException.js~FMFException",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/helpers/FMFException.js",
    "importStyle": "FMFException",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/FMFException.js~FMFException",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/FMFException.js~FMFException#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "previous",
    "memberof": "src/helpers/FMFException.js~FMFException",
    "static": false,
    "longname": "src/helpers/FMFException.js~FMFException#previous",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "toString",
    "memberof": "src/helpers/FMFException.js~FMFException",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/FMFException.js~FMFException#toString",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/helpers/FMFRequest.js",
    "content": "import parse from 'url-parse';\r\n\r\nexport class FMFRequest extends Request {\r\n  constructor(resource, init) {\r\n    super(resource, init);\r\n\r\n    const parts = parse(this.url, true);\r\n\r\n    for (let key in parts) {\r\n      Object.defineProperty(this, key, {\r\n        enumerable: true,\r\n        value: parts[key]\r\n      })\r\n    }\r\n  }\r\n\r\n  clone() {\r\n    return new FMFRequest(super.clone());\r\n  }\r\n}\r\n\r\nexport default FMFRequest;\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/helpers/FMFRequest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "FMFRequest",
    "memberof": "src/helpers/FMFRequest.js",
    "static": true,
    "longname": "src/helpers/FMFRequest.js~FMFRequest",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/helpers/FMFRequest.js",
    "importStyle": "{FMFRequest}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "Request"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/FMFRequest.js~FMFRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/FMFRequest.js~FMFRequest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "clone",
    "memberof": "src/helpers/FMFRequest.js~FMFRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/FMFRequest.js~FMFRequest#clone",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/helpers/RequestMatcher.js",
    "content": "import BooleanProcessor from '@/processors/BooleanProcessor';\r\nimport BodyProcessor from '@/processors/BodyProcessor';\r\nimport HeadersProcessor from '@/processors/HeadersProcessor';\r\nimport QueryProcessor from '@/processors/QueryProcessor';\r\nimport StringProcessor from '@/processors/StringProcessor';\r\nimport FMFException from '@/helpers/FMFException';\r\n\r\nexport class RequestMatcher {\r\n  _processors = [];\r\n  _requestKeys = [\r\n    'method', 'url', 'headers', 'destination', 'referrer', 'referrerPolicy', 'mode',\r\n    'credentials', 'redirect', 'integrity', 'cache',\r\n    'protocol', 'slashes', 'auth', 'username', 'password', 'host', 'hostname', 'port',\r\n    'pathname', 'query', 'hash', 'href', 'method', 'header', 'body'\r\n  ];\r\n\r\n  constructor(fixture) {\r\n    this.fixture = fixture;\r\n  }\r\n\r\n  get on() {\r\n    return this.fixture.on;\r\n  }\r\n\r\n  get and() {\r\n    return this;\r\n  }\r\n\r\n  get respond() {\r\n    return this.fixture.respond;\r\n  }\r\n\r\n  getProcessor(key) {\r\n    let processor;\r\n\r\n    switch (key) {\r\n      case 'headers':\r\n        processor = new HeadersProcessor(key, this);\r\n        break;\r\n      case 'query':\r\n        processor = new QueryProcessor(key, this);\r\n        break;\r\n      case 'slashes':\r\n        processor = new BooleanProcessor(key, this);\r\n        break;\r\n      case 'auth':\r\n      case 'cache':\r\n      case 'credentials':\r\n      case 'destination':\r\n      case 'hash':\r\n      case 'href':\r\n      case 'host':\r\n      case 'hostname':\r\n      case 'integrity':\r\n      case 'mode':\r\n      case 'method':\r\n      case 'password':\r\n      case 'pathname':\r\n      case 'port':\r\n      case 'protocol':\r\n      case 'redirect':\r\n      case 'referrer':\r\n      case 'referrerPolicy':\r\n      case 'url':\r\n      case 'username':\r\n        processor = new StringProcessor(key, this)\r\n        break;\r\n      default:\r\n        throw new FMFException(`Unsupported request parameter \"${key}\" to check`);\r\n    }\r\n\r\n    this._processors.push(processor);\r\n\r\n    return processor;\r\n  }\r\n\r\n  body(type = 'text') {\r\n    const processor = new BodyProcessor('headers', this, type);\r\n\r\n    this._processors.push(processor);\r\n\r\n    return processor;\r\n  }\r\n\r\n  header(name) {\r\n    const processor = new HeadersProcessor('headers', this, name);\r\n\r\n    this._processors.push(processor);\r\n\r\n    return processor;\r\n  }\r\n\r\n  async match(request, server) {\r\n    for (let processor of this._processors) {\r\n      if (!(await processor.process(request, server))) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  equal(conditions) {\r\n    if (!(conditions instanceof Object)) throw new Error('Request conditions set must be an object');\r\n\r\n    for (let key in conditions) {\r\n      if (!this._requestKeys.includes(key)) {\r\n        throw new FMFException(`Invalid key \"${key}\" for request conditions configuration`);\r\n      }\r\n\r\n      // Run setters\r\n      this[key].equal(conditions[key]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default RequestMatcher;\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/helpers/RequestMatcher.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "RequestMatcher",
    "memberof": "src/helpers/RequestMatcher.js",
    "static": true,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/helpers/RequestMatcher.js",
    "importStyle": "{RequestMatcher}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "_processors",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#_processors",
    "access": "private",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "_requestKeys",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#_requestKeys",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "fixture",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#fixture",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "get",
    "name": "on",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#on",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "get",
    "name": "and",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#and",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "get",
    "name": "respond",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#respond",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "getProcessor",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#getProcessor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "body",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#body",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "text",
        "defaultValue": "text"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "header",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#header",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "match",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#match",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "server",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "equal",
    "memberof": "src/helpers/RequestMatcher.js~RequestMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/RequestMatcher.js~RequestMatcher#equal",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "conditions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/helpers/ResponseConfigurator.js",
    "content": "import FMFException from '@/helpers/FMFException';\r\n\r\n/**\r\n * The response configurator class is common to fixtures and presets and offers a set\r\n * of tools to configure response content and behavior.\r\n *\r\n * This class should be seen as an abstract class as it uses `_getCurrentResponseSet` of its\r\n * child to locate the response to configure\r\n *\r\n * ** Note : ** The response configurator does not contain logic to follow\r\n * calls count.\r\n *\r\n * @version 1.0.0\r\n * @since 2.0.0\r\n */\r\nexport class ResponseConfigurator {\r\n  /**\r\n   * Stores the server instance\r\n   * @type {Server|null}\r\n   * @since 2.0.0\r\n   */\r\n  server = null;\r\n\r\n  /**\r\n   * Default response for fixture or preset. For fixture, it will be used\r\n   * when ordered responses are not matching defined call counts.\r\n   * @type {Object}\r\n   * @since 2.0.0\r\n   */\r\n  _any = {};\r\n\r\n  /**\r\n   * Allowed response keys\r\n   * @type {Array}\r\n   * @since 2.0.0\r\n   */\r\n  _responseKeys = ['body', 'delay', 'headers', 'status', 'statusText', 'wrapper', 'pattern', 'before', 'after'];\r\n\r\n  /**\r\n   * Response configurator constructor\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {Server}  [server=null] Server instance\r\n   */\r\n  constructor(server = null) {\r\n    this.server = server;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  _getCurrentResponseSet() {}\r\n\r\n  /**\r\n   * Sugar for chaining\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {ResponseConfigurator}  this\r\n   */\r\n  get with() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sugar for chaining\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {ResponseConfigurator}  this\r\n   */\r\n  get and() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the response parameters based on the object provided\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {Object}  [params={}] Parameters\r\n   * @see {@link ResponseConfigurator#_responseKeys} for available keys\r\n   * @throw {FMFException} If a key is not valid\r\n   */\r\n  set(params = {}) {\r\n    if (!(params instanceof Object)) throw new Error('Response set must be an object');\r\n\r\n    for (let key in params) {\r\n      if (!this._responseKeys.includes(key)) {\r\n        throw new FMFException(`Invalid key \"${key}\" for response set configuration`);\r\n      }\r\n\r\n      // Run setters\r\n      this[key](params[key]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the response body\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {String|Function}  body [description]\r\n   * @return  {ResponseConfigurator}  this\r\n   */\r\n  body(body) {\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (body === false) delete response.body;\r\n    else response.body = body;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the time the server will wait before sending back response\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {Number}  delay Delay in ms\r\n   * @return  {ResponseConfigurator}  this\r\n   * @see {@link Fixture#sleep}\r\n   */\r\n  delay(delay) {\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (delay === false) delete response.delay;\r\n    else response.delay = parseInt(delay, 10);\r\n\r\n    return this;\r\n  }\r\n\r\n  headers(headers) {\r\n    if (headers && !(headers instanceof Object || headers instanceof Headers)) {\r\n      throw new Error('Headers must be an object or an Headers instance');\r\n    }\r\n\r\n    if (headers instanceof Object) headers = new Headers(headers);\r\n\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (headers === false) delete response.headers;\r\n    else response.headers = headers;\r\n\r\n    return this;\r\n  }\r\n\r\n  status(status) {\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (status === false) delete response.status;\r\n    else response.status = parseInt(status, 10);\r\n\r\n    return this;\r\n  }\r\n\r\n  statusText(text) {\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (text === false) delete response.statusText;\r\n    else response.statusText = text;\r\n\r\n    return this;\r\n  }\r\n\r\n  wrapper(wrapper) {\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (wrapper === false) delete response.wrapper;\r\n    else response.wrapper = wrapper;\r\n\r\n    return this;\r\n  }\r\n\r\n  pattern(pattern) {\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (pattern === false) delete response.pattern;\r\n    else response.pattern = pattern;\r\n\r\n    return this;\r\n  }\r\n\r\n  before(cb) {\r\n    if (cb && !(cb instanceof Function)) {\r\n      throw new Error('Before hook must be a function');\r\n    }\r\n\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (cb === false) delete response.before;\r\n    else response.before = cb;\r\n\r\n    return this;\r\n  }\r\n\r\n  after(cb) {\r\n    if (cb && !(cb instanceof Function)) {\r\n      throw new Error('Before hook must be a function');\r\n    }\r\n\r\n    let response = this._getCurrentResponseSet();\r\n\r\n    if (cb === false) delete response.after;\r\n    else response.after = cb;\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default ResponseConfigurator\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/helpers/ResponseConfigurator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "ResponseConfigurator",
    "memberof": "src/helpers/ResponseConfigurator.js",
    "static": true,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/helpers/ResponseConfigurator.js",
    "importStyle": "{ResponseConfigurator}",
    "description": "The response configurator class is common to fixtures and presets and offers a set\nof tools to configure response content and behavior.\n\nThis class should be seen as an abstract class as it uses `_getCurrentResponseSet` of its\nchild to locate the response to configure\n\n** Note : ** The response configurator does not contain logic to follow\ncalls count.",
    "lineNumber": 16,
    "since": "2.0.0",
    "version": "1.0.0",
    "interface": false
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "server",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#server",
    "access": "public",
    "description": "Stores the server instance",
    "lineNumber": 22,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Server",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "_any",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#_any",
    "access": "private",
    "description": "Default response for fixture or preset. For fixture, it will be used\nwhen ordered responses are not matching defined call counts.",
    "lineNumber": 30,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "_responseKeys",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#_responseKeys",
    "access": "private",
    "description": "Allowed response keys",
    "lineNumber": 37,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#constructor",
    "access": "public",
    "description": "Response configurator constructor",
    "lineNumber": 45,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "server",
        "description": "Server instance"
      }
    ]
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "_getCurrentResponseSet",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#_getCurrentResponseSet",
    "access": "private",
    "description": "",
    "lineNumber": 52,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "get",
    "name": "with",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#with",
    "access": "public",
    "description": "Sugar for chaining",
    "lineNumber": 60,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "ResponseConfigurator"
      ],
      "spread": false,
      "description": "this"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "get",
    "name": "and",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#and",
    "access": "public",
    "description": "Sugar for chaining",
    "lineNumber": 70,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "ResponseConfigurator"
      ],
      "spread": false,
      "description": "this"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "set",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#set",
    "access": "public",
    "description": "Set the response parameters based on the object provided",
    "see": [
      "{@link ResponseConfigurator#_responseKeys} for available keys"
    ],
    "lineNumber": 82,
    "since": "  2.0.0",
    "version": "1.0.0",
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{FMFException} If a key is not valid"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params",
        "description": "Parameters"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "body",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#body",
    "access": "public",
    "description": "Set the response body",
    "lineNumber": 104,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ResponseConfigurator"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "delay",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#delay",
    "access": "public",
    "description": "Set the time the server will wait before sending back response",
    "see": [
      "{@link Fixture#sleep}"
    ],
    "lineNumber": 121,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "delay",
        "description": "Delay in ms"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ResponseConfigurator"
      ],
      "spread": false,
      "description": "this"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "headers",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#headers",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "headers",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "status",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#status",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "statusText",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#statusText",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "wrapper",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "wrapper",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "pattern",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#pattern",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "before",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#before",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "after",
    "memberof": "src/helpers/ResponseConfigurator.js~ResponseConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ResponseConfigurator.js~ResponseConfigurator#after",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/helpers/ServerHistory.js",
    "content": "export default class ServerHistory {\r\n  logs = [];\r\n  _history = [];\r\n  _call = null;\r\n  _target = null;\r\n  _verbose = false;\r\n\r\n  push(request, response) {\r\n    this._history.push({\r\n      request,\r\n      response\r\n    })\r\n  }\r\n\r\n  log(message) {\r\n    this.logs.push(message);\r\n\r\n    if (this._verbose) console.log(message); // eslint-disable-line\r\n  }\r\n\r\n  get request() {\r\n    if (this._call) {\r\n      const entry = this._history[this._call - 1].request;\r\n\r\n      this._call = null;\r\n      return entry;\r\n    }\r\n\r\n    this._target = 'request';\r\n    return this;\r\n  }\r\n\r\n  get response() {\r\n    if (this._call) {\r\n      const entry = this._history[this._call - 1].response;\r\n\r\n      this._call = null;\r\n      return entry;\r\n    }\r\n\r\n    this._target = 'response';\r\n    return this;\r\n  }\r\n\r\n  get first() {\r\n    return this.atCall(1);\r\n  }\r\n\r\n  get second() {\r\n    return this.atCall(2);\r\n  }\r\n\r\n  get third() {\r\n    return this.atCall(3);\r\n  }\r\n\r\n  get last() {\r\n    return this.atCall(this._history.length);\r\n  }\r\n\r\n  atCall(n) {\r\n    if (this._target) {\r\n      const entry = this._history[n-1][this._target];\r\n\r\n      this._target = null;\r\n      return entry;\r\n    }\r\n\r\n    this._call = n;\r\n    return this;\r\n  }\r\n\r\n  all() {\r\n    if (this._target) {\r\n      const entries = this._history.map(entry => entry[this._target]);\r\n      this._target = null;\r\n      return entries;\r\n    }\r\n    return this._history;\r\n  }\r\n\r\n  reset() {\r\n    this._history = [];\r\n    this._log = [];\r\n    this._call = null;\r\n    this._target = null;\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/helpers/ServerHistory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "class",
    "name": "ServerHistory",
    "memberof": "src/helpers/ServerHistory.js",
    "static": true,
    "longname": "src/helpers/ServerHistory.js~ServerHistory",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/helpers/ServerHistory.js",
    "importStyle": "ServerHistory",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "logs",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#logs",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "_history",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#_history",
    "access": "private",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "_call",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#_call",
    "access": "private",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "_target",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#_target",
    "access": "private",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "_verbose",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#_verbose",
    "access": "private",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "push",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#push",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "log",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#log",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "get",
    "name": "request",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#request",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "get",
    "name": "response",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#response",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "get",
    "name": "first",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#first",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "get",
    "name": "second",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#second",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "get",
    "name": "third",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#third",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "get",
    "name": "last",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#last",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "atCall",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#atCall",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "all",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#all",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "reset",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#reset",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "_log",
    "memberof": "src/helpers/ServerHistory.js~ServerHistory",
    "static": false,
    "longname": "src/helpers/ServerHistory.js~ServerHistory#_log",
    "access": "private",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Server from './Server';\r\nimport Preset from './Preset';\r\nimport Fixture from './Fixture';\r\nimport FMFRequest from './helpers/FMFRequest';\r\nimport presets from '@/presets';\r\n\r\nexport default Server;\r\n\r\nexport {\r\n  Fixture,\r\n  FMFRequest,\r\n  Preset,\r\n  Server,\r\n  presets\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/Preset.js",
    "content": "import ResponseConfigurator from './helpers/ResponseConfigurator';\r\nimport presets from './presets';\r\n\r\n/**\r\n * Presets are a quick way to add common response configuration and\r\n * avoid duplicating it through all fixtures when configuring\r\n * server response.\r\n *\r\n * Configuration itself is, like the fixtures, based on ResponseConfigurator\r\n * methods.\r\n */\r\nexport class Preset extends ResponseConfigurator {\r\n  /**\r\n   * Create a new preset instance that can be configured\r\n   * in the same manner than a regular fixture\r\n   *\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {Server}  server Server instance\r\n   * @param   {String}  name   Preset name\r\n   * @param   {Object}  [preset] Preset configuration object\r\n   */\r\n  constructor(server, name, preset = {}) {\r\n    super(server);\r\n\r\n    if (!name) throw new Error('You must provide a name to the preset');\r\n    this.name = name;\r\n\r\n    if (preset) {\r\n      if (!(preset instanceof Object)) throw new Error('Preset options must be provided as an object');\r\n      this.set(preset);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Presets can only handle a default response\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Object}  Current response configuration\r\n   */\r\n  _getCurrentResponseSet() {\r\n    return this._any;\r\n  }\r\n\r\n  /**\r\n   * Register/update the preset in the global pool. This made the preset available\r\n   * into all server's instances created *from* the registration\r\n   * @version 1.0.0\r\n   * @since   2.2.0\r\n   * @return  {Preset}  Self for chaining\r\n   */\r\n  register() {\r\n    presets[this.name] = Object.assign({}, this._any);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unregister the preset from the global pool.\r\n   *\r\n   * @version 1.0.0\r\n   * @since   2.2.0\r\n   * @return  {Preset}  Self for chaining\r\n   */\r\n  unregister() {\r\n    delete presets[this.name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove the preset from the server's instance pool\r\n   *\r\n   * If the preset is also globally registered, it won't be removed from the\r\n   * global pool\r\n   *\r\n   * @version 1.0.0\r\n   * @since   2.2.0\r\n   * @return  {Preset}  self for chaining\r\n   */\r\n  remove() {\r\n    delete this.server._presets[this.name];\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Preset;\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/Preset.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "Preset",
    "memberof": "src/Preset.js",
    "static": true,
    "longname": "src/Preset.js~Preset",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/Preset.js",
    "importStyle": "{Preset}",
    "description": "Presets are a quick way to add common response configuration and\navoid duplicating it through all fixtures when configuring\nserver response.\n\nConfiguration itself is, like the fixtures, based on ResponseConfigurator\nmethods.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/helpers/ResponseConfigurator.js~ResponseConfigurator"
    ]
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Preset.js~Preset",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Preset.js~Preset#constructor",
    "access": "public",
    "description": "Create a new preset instance that can be configured\nin the same manner than a regular fixture",
    "lineNumber": 23,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "Server instance"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Preset name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "preset",
        "description": "Preset configuration object"
      }
    ]
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "name",
    "memberof": "src/Preset.js~Preset",
    "static": false,
    "longname": "src/Preset.js~Preset#name",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "_getCurrentResponseSet",
    "memberof": "src/Preset.js~Preset",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Preset.js~Preset#_getCurrentResponseSet",
    "access": "private",
    "description": "Presets can only handle a default response",
    "lineNumber": 41,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Current response configuration"
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "register",
    "memberof": "src/Preset.js~Preset",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Preset.js~Preset#register",
    "access": "public",
    "description": "Register/update the preset in the global pool. This made the preset available\ninto all server's instances created *from* the registration",
    "lineNumber": 52,
    "since": "  2.2.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Preset"
      ],
      "spread": false,
      "description": "Self for chaining"
    },
    "params": []
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "unregister",
    "memberof": "src/Preset.js~Preset",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Preset.js~Preset#unregister",
    "access": "public",
    "description": "Unregister the preset from the global pool.",
    "lineNumber": 65,
    "since": "  2.2.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Preset"
      ],
      "spread": false,
      "description": "Self for chaining"
    },
    "params": []
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "remove",
    "memberof": "src/Preset.js~Preset",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Preset.js~Preset#remove",
    "access": "public",
    "description": "Remove the preset from the server's instance pool\n\nIf the preset is also globally registered, it won't be removed from the\nglobal pool",
    "lineNumber": 81,
    "since": "  2.2.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Preset"
      ],
      "spread": false,
      "description": "self for chaining"
    },
    "params": []
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/presets.js",
    "content": "export default {\r\n  default: {\r\n    body: 'Hello world !',\r\n    delay: 0,\r\n    headers: {'content-type': 'text/html'},\r\n    status: 200,\r\n    statusText: 'OK'\r\n  },\r\n\r\n  json: {\r\n    headers: {'content-type': 'application/json'},\r\n    wrapper: body => JSON.stringify(body)\r\n  },\r\n\r\n  204: {\r\n    body: null,\r\n    headers: {'content-type': 'text/html'},\r\n    status: 204,\r\n    statusText: 'No Content'\r\n  },\r\n\r\n  400: {\r\n    body: null,\r\n    headers: {'content-type': 'text/html'},\r\n    status: 400,\r\n    statusText: 'Bad Request'\r\n  },\r\n\r\n  401: {\r\n    body: null,\r\n    headers: {'content-type': 'text/html'},\r\n    status: 401,\r\n    statusText: 'Unauthorized'\r\n  },\r\n\r\n  403: {\r\n    body: null,\r\n    headers: {'content-type': 'text/html'},\r\n    status: 403,\r\n    statusText: 'Forbidden'\r\n  },\r\n\r\n  404: {\r\n    body: null,\r\n    headers: {'content-type': 'text/html'},\r\n    status: 404,\r\n    statusText: 'Not found'\r\n  },\r\n\r\n  500: {\r\n    body: null,\r\n    headers: {'content-type': 'text/html'},\r\n    status: 500,\r\n    statusText: 'Internal Server Error'\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/presets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/processors/BaseProcessor.js",
    "content": "import _isEqual from 'lodash.isequal';\r\n\r\nexport default class BaseProcessor {\r\n  _key = null;\r\n  _not = false;\r\n  _evaluate = null;\r\n\r\n  constructor(key, matcher) {\r\n    this._key = key;\r\n    this._matcher = matcher;\r\n  }\r\n\r\n  get is() {\r\n    return this;\r\n  }\r\n\r\n  get not() {\r\n    this._not = !this._not;\r\n\r\n    return this;\r\n  }\r\n\r\n  async _equal(current, expected, request) {\r\n    if (expected instanceof Function) return await expected(current, this._key, request);\r\n    if (expected instanceof RegExp) return expected.test(current);\r\n\r\n    // Try to parse current as JSON to convert boolean and numbers\r\n    try {\r\n      current = JSON.parse(current);\r\n\r\n      return _isEqual(current, expected);\r\n    } catch (err) {\r\n      return _isEqual(current, expected);\r\n    }\r\n  }\r\n\r\n  equal(expected) {\r\n    this._evaluate = async request => {\r\n      let current = request[this._key];\r\n\r\n      return await this._equal(current, expected, request);\r\n    }\r\n\r\n    return this._matcher;\r\n  }\r\n\r\n  async process(request, server) {\r\n    let passed = await this._evaluate(request, server);\r\n\r\n    return this._not ? !passed: passed;\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/BaseProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "BaseProcessor",
    "memberof": "src/processors/BaseProcessor.js",
    "static": true,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/BaseProcessor.js",
    "importStyle": "BaseProcessor",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "_key",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#_key",
    "access": "private",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "_not",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#_not",
    "access": "private",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "_evaluate",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#_evaluate",
    "access": "private",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "_matcher",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#_matcher",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "get",
    "name": "is",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#is",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "get",
    "name": "not",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#not",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "_equal",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#_equal",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "current",
        "types": [
          "*"
        ]
      },
      {
        "name": "expected",
        "types": [
          "*"
        ]
      },
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "equal",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#equal",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "expected",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "process",
    "memberof": "src/processors/BaseProcessor.js~BaseProcessor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/processors/BaseProcessor.js~BaseProcessor#process",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "server",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "src/processors/BodyProcessor.js",
    "content": "import BaseProcessor from '@/processors/BaseProcessor';\r\nimport FMFException from '@/helpers/FMFException';\r\n\r\nexport default class BodyProcessor extends BaseProcessor {\r\n  _type = null;\r\n\r\n  constructor(key, matcher, type) {\r\n    super(key, matcher);\r\n    this._type = type;\r\n  }\r\n\r\n  async _processBody(request) {\r\n    let current;\r\n\r\n    // Try to decode body\r\n    switch (this._type.toLowerCase()) {\r\n      case 'text':\r\n        try {\r\n          current = await request.clone().text();\r\n        } catch (err) {\r\n          /* istanbul ignore next */\r\n          throw new FMFException('Unable to parse body as blob', err);\r\n        }\r\n        break;\r\n      case 'json':\r\n        try {\r\n          current = await request.clone().json();\r\n        } catch (err) {\r\n          /* istanbul ignore next */\r\n          throw new FMFException('Unable to parse body as JSON', err);\r\n        }\r\n        break;\r\n      case 'formdata':\r\n        try {\r\n          current = await request.clone().formData();\r\n        } catch (err) {\r\n          /* istanbul ignore next */\r\n          throw new FMFException('Unable to parse body as FormData', err);\r\n        }\r\n        break;\r\n      case 'arraybuffer':\r\n        try {\r\n          current = await request.clone().arrayBuffer();\r\n        } catch (err) {\r\n          /* istanbul ignore next */\r\n          throw new FMFException('Unable to parse body as Blob', err);\r\n        }\r\n        break;\r\n      case 'blob':\r\n        try {\r\n          current = await request.clone().blob();\r\n        } catch (err) {\r\n          /* istanbul ignore next */\r\n          throw new FMFException('Unable to parse body as Blob', err);\r\n        }\r\n        break;\r\n      /* istanbul ignore next */\r\n      default:\r\n        throw new FMFException('Unknown body decoder callback')\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  equal(expected) {\r\n    this._evaluate = async request => {\r\n      const current = await this._processBody(request);\r\n\r\n      return await this._equal(current, expected, request);\r\n    }\r\n\r\n    return this._matcher;\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/BodyProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "BodyProcessor",
    "memberof": "src/processors/BodyProcessor.js",
    "static": true,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/BodyProcessor.js",
    "importStyle": "BodyProcessor",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "@/processors/BaseProcessor~BaseProcessor"
    ]
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_type",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#_type",
    "access": "private",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "_processBody",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#_processBody",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "equal",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#equal",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "expected",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "_evaluate",
    "memberof": "src/processors/BodyProcessor.js~BodyProcessor",
    "static": false,
    "longname": "src/processors/BodyProcessor.js~BodyProcessor#_evaluate",
    "access": "private",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/processors/BooleanProcessor.js",
    "content": "import BaseProcessor from './BaseProcessor';\r\n\r\nexport default class BooleanProcessor extends BaseProcessor {\r\n\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/BooleanProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "class",
    "name": "BooleanProcessor",
    "memberof": "src/processors/BooleanProcessor.js",
    "static": true,
    "longname": "src/processors/BooleanProcessor.js~BooleanProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/BooleanProcessor.js",
    "importStyle": "BooleanProcessor",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/processors/BaseProcessor.js~BaseProcessor"
    ]
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/processors/HeadersProcessor.js",
    "content": "import BaseProcessor from './BaseProcessor';\r\nimport FMFException from '@/helpers/FMFException';\r\n\r\nexport default class HeadersProcessor extends BaseProcessor {\r\n  _name = null;\r\n\r\n  constructor(key, matcher, name) {\r\n    super(key, matcher);\r\n    this._name = name;\r\n  }\r\n\r\n  equal(expected) {\r\n    this._evaluate = async request => {\r\n      const headers = request.headers;\r\n\r\n      /* istanbul ignore if */\r\n      if (!(headers instanceof Headers)) throw new FMFException('Unable to extract headers from request');\r\n\r\n      return await this._equal(this._name ? headers.get(this._name) : headers, expected);\r\n    }\r\n\r\n    return this._matcher;\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/HeadersProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "class",
    "name": "HeadersProcessor",
    "memberof": "src/processors/HeadersProcessor.js",
    "static": true,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/HeadersProcessor.js",
    "importStyle": "HeadersProcessor",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/processors/BaseProcessor.js~BaseProcessor"
    ]
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "_name",
    "memberof": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "static": false,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor#_name",
    "access": "private",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "equal",
    "memberof": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor#equal",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "expected",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "_evaluate",
    "memberof": "src/processors/HeadersProcessor.js~HeadersProcessor",
    "static": false,
    "longname": "src/processors/HeadersProcessor.js~HeadersProcessor#_evaluate",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/processors/QueryProcessor.js",
    "content": "import BaseProcessor from './BaseProcessor';\r\n\r\nexport default class QueryProcessor extends BaseProcessor {\r\n\r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/QueryProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "class",
    "name": "QueryProcessor",
    "memberof": "src/processors/QueryProcessor.js",
    "static": true,
    "longname": "src/processors/QueryProcessor.js~QueryProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/QueryProcessor.js",
    "importStyle": "QueryProcessor",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/processors/BaseProcessor.js~BaseProcessor"
    ]
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/processors/StringProcessor.js",
    "content": "import BaseProcessor from './BaseProcessor';\r\n\r\nexport default class StringProcessor extends BaseProcessor {\r\n  \r\n}\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/processors/StringProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "class",
    "name": "StringProcessor",
    "memberof": "src/processors/StringProcessor.js",
    "static": true,
    "longname": "src/processors/StringProcessor.js~StringProcessor",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/processors/StringProcessor.js",
    "importStyle": "StringProcessor",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/processors/BaseProcessor.js~BaseProcessor"
    ]
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "src/Server.js",
    "content": "import {FMFRequest, Fixture, Preset} from '.';\r\nimport ServerHistory from './helpers/ServerHistory';\r\nimport FMFException from './helpers/FMFException';\r\nimport presets from './presets';\r\nimport sinon from 'sinon';\r\n\r\n/**\r\n * Build a mock server to respond to any fetch calls. It replaces\r\n * `window.fetch` with a [Sinon stub](https://sinonjs.org/releases/latest/stubs/). Therefore,\r\n * all functionnalities provided by stub are available\r\n *\r\n * **Note :** All the server data is stored in the current instance. That may have\r\n * unattended side effects when using the same instance through many test without\r\n * resetting it each time\r\n *\r\n * @since 1.0.0\r\n * @version 1.0.0\r\n * @author Liqueur de Toile <contact@liqueurdetoile.com>\r\n */\r\nexport class Server {\r\n  /**\r\n   * Store the fixtures loaded into the server or created on-the-fly\r\n   * @type {Array}\r\n   * @since 2.0.0\r\n   * @see {@link Fixture}\r\n   */\r\n  _fixtures = [];\r\n\r\n  /**\r\n   * Store if server should output events to console\r\n   * @type {Boolean}\r\n   */\r\n  _verbose = false;\r\n\r\n  /**\r\n   * Store wether FMF shoud throw or send a 500 HTTP response when an error is raised\r\n   * @type {Boolean}\r\n   * @since 2.0.0\r\n   * @see {@link Server#throwOnError}\r\n   * @see {@link Server#warnOnError}\r\n   */\r\n  _throwOnError = false;\r\n\r\n  /**\r\n   * Store wether FMF shoud display a warning message in console when an error is raised\r\n   * @type {Boolean}\r\n   * @since 2.0.0\r\n   * @see {@link Server#throwOnError}\r\n   * @see {@link Server#warnOnError}\r\n   */\r\n  _warnOnError = true\r\n\r\n  /**\r\n   * Store the loaded presets and those created on-the-fly\r\n   * @type {Object}\r\n   * @since 2.0.0\r\n   */\r\n  _presets = {};\r\n\r\n  /**\r\n   * Store the server history\r\n   * @type {ServerHistory}\r\n   * @since 2.0.0\r\n   */\r\n  history = new ServerHistory();\r\n\r\n  /**\r\n   * Import the default presets into server\r\n   * @version 2.0.0\r\n   * @since   1.0.0\r\n   * @author Liqueur de Toile <contact@liqueurdetoile.com>\r\n   */\r\n  constructor() {\r\n    // Load presets\r\n    for (let name in presets) {\r\n      this._presets[name] = new Preset(this, name, presets[name]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start the server by stubbing `window.fetch`\r\n   * @version 2.0.0\r\n   * @since   1.0.0\r\n   * @return  {Server}               Server instance\r\n   */\r\n  start() {\r\n    /* istanbul ignore else */\r\n    if (!this.running) {\r\n      sinon.stub(window, 'fetch');\r\n      this.stub.callsFake(this._processRequest.bind(this));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Stop the server and, optionnally reset it\r\n   * @version 2.0.0\r\n   * @since   1.0.0\r\n   * @param   {Boolean} [resetServer=false] If `true`, `stop` will also reset server (see {@link Server#reset})\r\n   * @return  {Server}               Server instance\r\n   */\r\n  stop(resetServer = false) {\r\n    if (this.running) window.fetch.restore();\r\n\r\n    if (resetServer) this.reset();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Reset the server configuration to default, clear server history and stub history\r\n   * @version 2.0.0\r\n   * @since   1.0.0\r\n   * @param   {Boolean} [resetStub=true] If `true`, the stub history will also be resetted\r\n   * @return  {Server}               Server instance\r\n   */\r\n  reset(resetStub = true) {\r\n    if (this.running && resetStub) this.stub.resetHistory();\r\n    this.history.reset();\r\n    this._fixtures = [];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the verbose behavior of the server\r\n   * @version 1.0.0\r\n   * @since   2.1.0\r\n   * @param   {Boolean}  verbose If `true` turn the verbose mode on\r\n   * @return  {Server}               Server instance\r\n   */\r\n  verbose(verbose) {\r\n    this._verbose = !!verbose;\r\n    this.history._verbose = !!verbose;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Tells the server to display a warning in console when an error is raised or when\r\n   * something seems to went wrong in configuration.\r\n   *\r\n   * Default settings is true\r\n   *\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {Boolean}  warnOnError `true` will display warnings\r\n   * @return  {Server}               Server instance\r\n   */\r\n  warnOnError(warnOnError) {\r\n    this._warnOnError = !!warnOnError;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the behavior of the server when an Error is thrown. If set to `true`, the server will\r\n   * also throw the error at runtime. If set to false, it will respond with a 500 HTTP error\r\n   *\r\n   * At default, the server is set to throw on error that will usually be\r\n   * the most suitable behavior when running tests to discard FMF failures.\r\n   *\r\n   * **note** Only errors thrown during requests processing are affected by this parameter.\r\n   * Errors that occured on settings processing will always be raised\r\n   *\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {Boolean}  throwOnError If `true` server will throw\r\n   * @return  {Server}               Server instance\r\n   * @see {@link Server#_onError}\r\n   */\r\n  throwOnError(throwOnError) {\r\n    this._throwOnError = !!throwOnError;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Displays a warning message in console. It can be overridden\r\n   * to swap to another notification system\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {String|Error}  error Error description\r\n   */\r\n  warn(error) {\r\n    console.warn(error.toString()); // eslint-disable-line\r\n  }\r\n\r\n  /**\r\n   * Check if server is currently running by trying to access a stub property\r\n   * @version 1.0.0\r\n   * @since   1.1.0\r\n   * @return  {Boolean}\r\n   */\r\n  get running() {\r\n    return window.fetch.reset instanceof Function;\r\n  }\r\n\r\n  /**\r\n   * Exposes the underlying stub or throws error if server is not started\r\n   * @version 1.0.0\r\n   * @since   1.1.0\r\n   * @return  {Object}  Sinon stub\r\n   */\r\n  get stub() {\r\n    if (this.running) return window.fetch;\r\n\r\n    throw new FMFException('Server is not started');\r\n  }\r\n\r\n  /**\r\n   * Returns the selected preset or a new one based on name resolution.\r\n   *\r\n   * It allow a quick preset creation or edition that can be configured at once\r\n   * through the object provided within this call or with the classic\r\n   * ResponseConfigurator\r\n   *\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {String}  name        Preset name\r\n   * @param   {Object}  [preset={}] Preset content\r\n   * @return {Preset}\r\n   * @see {@link ResponseConfigurator}\r\n   */\r\n  preset(name, preset = {}) {\r\n    if (this._presets[name]) return this._presets[name].set(preset);\r\n\r\n    let newPreset = new Preset(this, name, preset);\r\n\r\n    this._presets[name] = newPreset;\r\n\r\n    return newPreset;\r\n  }\r\n\r\n  /**\r\n   * Import a fixture into the server pool. Fixture can be provided as a\r\n   * fixture instance or as a configuration object\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {Fixture|Object|Array}  fixtures Fixture(s) to import\r\n   * @return  {Server}               Server instance\r\n   * @throws {FMFException} If fixture cannot be parsed\r\n   */\r\n  import(fixtures) {\r\n    if (!(fixtures instanceof Array)) fixtures = [fixtures];\r\n\r\n    for (let fixture of fixtures) {\r\n      if (fixture instanceof Fixture) {\r\n        fixture.server = this;\r\n        this._fixtures.push(fixture);\r\n      }\r\n      else if (fixture instanceof Object) {\r\n        let f = new Fixture(this);\r\n        let conditions = fixture.on || fixture.when;\r\n\r\n        if (!fixture.respond) throw new FMFException('Fixture provided as object must have a respond property');\r\n        /* istanbul ignore else */\r\n        if (conditions) f.on.equal(conditions);\r\n        f.respond.set(fixture.respond);\r\n\r\n        this._fixtures.push(f)\r\n      }\r\n      else throw new FMFException('Invalid fixture provided');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * This getter is used when configuring a fixture in-the-fly. It will return\r\n   * and register a new Fixture and set it to `matching` mode\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Fixture}  New Fixture\r\n   */\r\n  get on() {\r\n    const fixture = new Fixture(this)\r\n\r\n    this._fixtures.push(fixture);\r\n\r\n    fixture._mode = 'on';\r\n\r\n    return fixture.on;\r\n  }\r\n\r\n  /**\r\n   * Alias for {@link Server#on}\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Fixture}  New fixture\r\n   */\r\n  get when() {\r\n    return this.on;\r\n  }\r\n\r\n  /**\r\n   * Returns the existing registered on the server or create and register a new fallback fixture\r\n   * to configure\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Fixture}  Fallback fixture\r\n   * @see {@link Server#_getDefaultFixture}\r\n   */\r\n  get fallback() {\r\n    return this._getDefaultFixture();\r\n  }\r\n\r\n  /**\r\n   * Returns the existing registered on the server or create a new fallback fixture\r\n   * to configure\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Fixture}  Fallback fixture\r\n   */\r\n  _getDefaultFixture() {\r\n    // If a default fixture exists, return it\r\n    const index = this._fixtures.findIndex(f => f._matcher === null);\r\n\r\n    if (index >= 0) return this._fixtures[index];\r\n\r\n    // Create a new default Fixture and register it\r\n    const fixture = new Fixture(this);\r\n\r\n    this._fixtures.push(fixture);\r\n    return fixture;\r\n  }\r\n\r\n  /**\r\n   * Process the respond call when called from a fixture to allow chainable\r\n   * fixtures on-the-fly configuration\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {Object}  [fixture={}] Calling fixture or void object if not called from a fixture\r\n   * @return  {Fixture}              Return either the default fixture or set the current to `respond` mode\r\n   */\r\n  _processRespond(fixture = {}) {\r\n    if (fixture._mode === 'respond') fixture = this._getDefaultFixture();\r\n\r\n    fixture._mode = 'respond';\r\n\r\n    return fixture;\r\n  }\r\n\r\n  /**\r\n   * Getter used when configuring fixture on-the-fly\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Fixture}  Return either the default fixture or set the current to `respond` mode\r\n   * @see {@link Server#_processRespond}\r\n   */\r\n  get respond() {\r\n    return this._getDefaultFixture();\r\n  }\r\n\r\n  /**\r\n   * Seeks for matching fixtures when processing a request\r\n   *\r\n   * An error will be raised if no fixtures have been set or if no matching fixtures have been\r\n   * found.\r\n   *\r\n   * FMF will also send a warning to the console\r\n   *\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {FMFRequest}  request Request\r\n   * @return  {Promise}         Resolved in fixture instance\r\n   * @throws  {FMFException}   If no fixtures are defined or no matching fixtures found\r\n   */\r\n  async _findFixture(request) {\r\n    let matches = [];\r\n    let fallback = null;\r\n\r\n    if (!this._fixtures.length) throw new FMFException('No fixtures defined');\r\n\r\n    for (let fixture of this._fixtures) {\r\n      // Do not register fallback fixture\r\n      if (fixture._matcher === null) {\r\n        fallback = fixture;\r\n        continue;\r\n      }\r\n      if (await fixture.match(request)) matches.push(fixture);\r\n    }\r\n\r\n    if (!matches.length) {\r\n      if (!fallback) throw new FMFException('Unable to find a matching fixture for the current request and no fixture is set as fallback');\r\n      matches[0] = fallback;\r\n    }\r\n\r\n    if (matches.length > 1) {\r\n      this.warn(`FMF : Server found ${matches.length} fixtures matching the request \"${request.url}\". Using the first one.`); // eslint-disable-line\r\n    }\r\n\r\n    return matches[0];\r\n  }\r\n\r\n  /**\r\n   * Process the incoming request and update history\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @param   {String|Request}  request Incoming request\r\n   * @param   {Object}  [init]  request options\r\n   * @return  {Promise}         Response\r\n   * @throws  {FMFException}  If request processing have failed\r\n   */\r\n  async _processRequest(request, init) {\r\n    try {\r\n      // Build FMFRequest object\r\n      request = new FMFRequest(request, init);\r\n\r\n      // Log incoming request\r\n      this.history.log(`Request : ${request.method} ${request.url}`)\r\n\r\n      // Locate matching fixture\r\n      let fixture = await this._findFixture(request.clone());\r\n\r\n      // Prepare response\r\n      let response = await fixture.getResponse(request.clone());\r\n\r\n      // Store request in history\r\n      this.history.push(request.clone(), response.clone());\r\n\r\n      this.history.log(`Response sent (${response.status} ${response.statusText})`);\r\n\r\n      return response;\r\n    } catch (err) {\r\n      this.history.log(err.toString());\r\n\r\n      if (this._warnOnError) this.warn(err);\r\n      if (this._throwOnError) /* istanbul ignore next */ throw (err instanceof FMFException ? err : new FMFException('Request process failure', err));\r\n\r\n      return new Response(err.stack, {\r\n        'content-type': 'text/html',\r\n        status: 500,\r\n        statusText: err.toString()\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returs the number of calls made to server since start or last reset\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {Number}  Number of requests received\r\n   */\r\n  get calls() {\r\n    return this.stub.callCount;\r\n  }\r\n\r\n  /**\r\n   * Returns the last request received by the server\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {FMFRequest}\r\n   * @see {@link ServerHistory}\r\n   */\r\n  get request() {\r\n    return this.history.last.request;\r\n  }\r\n\r\n  /**\r\n   * Returns the last response received by the server\r\n   * @version 1.0.0\r\n   * @since   2.0.0\r\n   * @return  {FMFRequest}\r\n   * @see {@link ServerHistory}\r\n   */\r\n\r\n  get response() {\r\n    return this.history.last.response;\r\n  }\r\n}\r\n\r\nexport default Server;\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/src/Server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "class",
    "name": "Server",
    "memberof": "src/Server.js",
    "static": true,
    "longname": "src/Server.js~Server",
    "access": "public",
    "export": true,
    "importPath": "fetch-mock-fixtures/src/Server.js",
    "importStyle": "{Server}",
    "description": "Build a mock server to respond to any fetch calls. It replaces\n`window.fetch` with a [Sinon stub](https://sinonjs.org/releases/latest/stubs/). Therefore,\nall functionnalities provided by stub are available\n\n**Note :** All the server data is stored in the current instance. That may have\nunattended side effects when using the same instance through many test without\nresetting it each time",
    "lineNumber": 20,
    "since": "1.0.0",
    "version": "1.0.0",
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Liqueur de Toile <contact@liqueurdetoile.com>"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "_fixtures",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#_fixtures",
    "access": "private",
    "description": "Store the fixtures loaded into the server or created on-the-fly",
    "see": [
      "{@link Fixture}"
    ],
    "lineNumber": 27,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "_verbose",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#_verbose",
    "access": "private",
    "description": "Store if server should output events to console",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "_throwOnError",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#_throwOnError",
    "access": "private",
    "description": "Store wether FMF shoud throw or send a 500 HTTP response when an error is raised",
    "see": [
      "{@link Server#throwOnError}",
      "{@link Server#warnOnError}"
    ],
    "lineNumber": 42,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_warnOnError",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#_warnOnError",
    "access": "private",
    "description": "Store wether FMF shoud display a warning message in console when an error is raised",
    "see": [
      "{@link Server#throwOnError}",
      "{@link Server#warnOnError}"
    ],
    "lineNumber": 51,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "_presets",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#_presets",
    "access": "private",
    "description": "Store the loaded presets and those created on-the-fly",
    "lineNumber": 58,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "history",
    "memberof": "src/Server.js~Server",
    "static": false,
    "longname": "src/Server.js~Server#history",
    "access": "public",
    "description": "Store the server history",
    "lineNumber": 65,
    "since": "2.0.0",
    "type": {
      "nullable": null,
      "types": [
        "ServerHistory"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#constructor",
    "access": "public",
    "description": "Import the default presets into server",
    "lineNumber": 73,
    "since": "  1.0.0",
    "version": "2.0.0",
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Liqueur de Toile <contact@liqueurdetoile.com>"
      }
    ]
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "start",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#start",
    "access": "public",
    "description": "Start the server by stubbing `window.fetch`",
    "lineNumber": 86,
    "since": "  1.0.0",
    "version": "2.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    },
    "params": []
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "stop",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#stop",
    "access": "public",
    "description": "Stop the server and, optionnally reset it",
    "lineNumber": 103,
    "since": "  1.0.0",
    "version": "2.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "resetServer",
        "description": "If `true`, `stop` will also reset server (see {@link Server#reset})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "reset",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#reset",
    "access": "public",
    "description": "Reset the server configuration to default, clear server history and stub history",
    "lineNumber": 118,
    "since": "  1.0.0",
    "version": "2.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "resetStub",
        "description": "If `true`, the stub history will also be resetted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "verbose",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#verbose",
    "access": "public",
    "description": "Set the verbose behavior of the server",
    "lineNumber": 133,
    "since": "  2.1.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "If `true` turn the verbose mode on"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "warnOnError",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#warnOnError",
    "access": "public",
    "description": "Tells the server to display a warning in console when an error is raised or when\nsomething seems to went wrong in configuration.\n\nDefault settings is true",
    "lineNumber": 151,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "warnOnError",
        "description": "`true` will display warnings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "throwOnError",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#throwOnError",
    "access": "public",
    "description": "Set the behavior of the server when an Error is thrown. If set to `true`, the server will\nalso throw the error at runtime. If set to false, it will respond with a 500 HTTP error\n\nAt default, the server is set to throw on error that will usually be\nthe most suitable behavior when running tests to discard FMF failures.\n\n**note** Only errors thrown during requests processing are affected by this parameter.\nErrors that occured on settings processing will always be raised",
    "see": [
      "{@link Server#_onError}"
    ],
    "lineNumber": 173,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "throwOnError",
        "description": "If `true` server will throw"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "warn",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#warn",
    "access": "public",
    "description": "Displays a warning message in console. It can be overridden\nto swap to another notification system",
    "lineNumber": 186,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "Error description"
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "get",
    "name": "running",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#running",
    "access": "public",
    "description": "Check if server is currently running by trying to access a stub property",
    "lineNumber": 196,
    "since": "  1.1.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "get",
    "name": "stub",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#stub",
    "access": "public",
    "description": "Exposes the underlying stub or throws error if server is not started",
    "lineNumber": 206,
    "since": "  1.1.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Sinon stub"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "preset",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#preset",
    "access": "public",
    "description": "Returns the selected preset or a new one based on name resolution.\n\nIt allow a quick preset creation or edition that can be configured at once\nthrough the object provided within this call or with the classic\nResponseConfigurator",
    "see": [
      "{@link ResponseConfigurator}"
    ],
    "lineNumber": 226,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Preset name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "preset",
        "description": "Preset content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Preset"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "import",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#import",
    "access": "public",
    "description": "Import a fixture into the server pool. Fixture can be provided as a\nfixture instance or as a configuration object",
    "lineNumber": 245,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Fixture",
          "Object",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fixtures",
        "description": "Fixture(s) to import"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Server"
      ],
      "spread": false,
      "description": "Server instance"
    },
    "throws": [
      {
        "types": [
          "FMFException"
        ],
        "description": "If fixture cannot be parsed"
      }
    ]
  },
  {
    "__docId__": 232,
    "kind": "get",
    "name": "on",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#on",
    "access": "public",
    "description": "This getter is used when configuring a fixture in-the-fly. It will return\nand register a new Fixture and set it to `matching` mode",
    "lineNumber": 277,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Fixture"
      ],
      "spread": false,
      "description": "New Fixture"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "get",
    "name": "when",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#when",
    "access": "public",
    "description": "Alias for {@link Server#on}",
    "lineNumber": 293,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Fixture"
      ],
      "spread": false,
      "description": "New fixture"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "get",
    "name": "fallback",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#fallback",
    "access": "public",
    "description": "Returns the existing registered on the server or create and register a new fallback fixture\nto configure",
    "see": [
      "{@link Server#_getDefaultFixture}"
    ],
    "lineNumber": 305,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Fixture"
      ],
      "spread": false,
      "description": "Fallback fixture"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "_getDefaultFixture",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#_getDefaultFixture",
    "access": "private",
    "description": "Returns the existing registered on the server or create a new fallback fixture\nto configure",
    "lineNumber": 316,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Fixture"
      ],
      "spread": false,
      "description": "Fallback fixture"
    },
    "params": []
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "_processRespond",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#_processRespond",
    "access": "private",
    "description": "Process the respond call when called from a fixture to allow chainable\nfixtures on-the-fly configuration",
    "lineNumber": 337,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "fixture",
        "description": "Calling fixture or void object if not called from a fixture"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Fixture"
      ],
      "spread": false,
      "description": "Return either the default fixture or set the current to `respond` mode"
    }
  },
  {
    "__docId__": 237,
    "kind": "get",
    "name": "respond",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#respond",
    "access": "public",
    "description": "Getter used when configuring fixture on-the-fly",
    "see": [
      "{@link Server#_processRespond}"
    ],
    "lineNumber": 352,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Fixture"
      ],
      "spread": false,
      "description": "Return either the default fixture or set the current to `respond` mode"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "_findFixture",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Server.js~Server#_findFixture",
    "access": "private",
    "description": "Seeks for matching fixtures when processing a request\n\nAn error will be raised if no fixtures have been set or if no matching fixtures have been\nfound.\n\nFMF will also send a warning to the console",
    "lineNumber": 370,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "FMFRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "Request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolved in fixture instance"
    },
    "throws": [
      {
        "types": [
          "FMFException"
        ],
        "description": "If no fixtures are defined or no matching fixtures found"
      }
    ]
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "_processRequest",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Server.js~Server#_processRequest",
    "access": "private",
    "description": "Process the incoming request and update history",
    "lineNumber": 406,
    "since": "  2.0.0",
    "version": "1.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "Incoming request"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "init",
        "description": "request options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Response"
    },
    "throws": [
      {
        "types": [
          "FMFException"
        ],
        "description": "If request processing have failed"
      }
    ]
  },
  {
    "__docId__": 240,
    "kind": "get",
    "name": "calls",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#calls",
    "access": "public",
    "description": "Returs the number of calls made to server since start or last reset",
    "lineNumber": 446,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Number of requests received"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "get",
    "name": "request",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#request",
    "access": "public",
    "description": "Returns the last request received by the server",
    "see": [
      "{@link ServerHistory}"
    ],
    "lineNumber": 457,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "FMFRequest"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "get",
    "name": "response",
    "memberof": "src/Server.js~Server",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Server.js~Server#response",
    "access": "public",
    "description": "Returns the last response received by the server",
    "see": [
      "{@link ServerHistory}"
    ],
    "lineNumber": 469,
    "since": "  2.0.0",
    "version": "1.0.0",
    "return": {
      "nullable": null,
      "types": [
        "FMFRequest"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "[![Build Status](https://travis-ci.org/liqueurdetoile/fetch-mock-fixtures.svg?branch=master)](https://travis-ci.org/liqueurdetoile/fetch-mock-fixtures)\r\n[![Coverage Status](https://coveralls.io/repos/github/liqueurdetoile/fetch-mock-fixtures/badge.svg?branch=master)](https://coveralls.io/github/liqueurdetoile/fetch-mock-fixtures?branch=master)\r\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\r\n[![Documentation](https://liqueurdetoile.github.io/fetch-mock-fixtures/badge.svg)](https://liqueurdetoile.github.io/fetch-mock-fixtures/)\r\n[![Greenkeeper badge](https://badges.greenkeeper.io/liqueurdetoile/fetch-mock-fixtures.svg)](https://greenkeeper.io/)\r\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\r\n\r\n<p align=\"center\"><a href=\"https://liqueurdetoile.com\" target=\"\\_blank\"><img src=\"https://hosting.liqueurdetoile.com/logo_lqdt.png\" alt=\"Liqueur de Toile\"></a></p>\r\n\r\n# Fetch-mock-fixtures (FMF)\r\nWhile most of mockers for fetch are only meant to intercept and define the next response content, FMF goes far beyond and offers a wide range of tools for testing js apps.\r\n\r\nWhat is featured :\r\n- BDD style syntax to configure server and fixtures in a more readable-friendly way. It's heavily inspired by [Chai `should` assertion library](https://www.chaijs.com/guide/styles/#should),\r\n- Easy way to configure response on-the-fly, mutating responses from call to call...\r\n- Enhanced [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) native object to automatically parse url details and query content with [`url-parse`](https://github.com/unshiftio/url-parse#readme),\r\n- Powerful response presets and fixtures system to avoid writing the same things again and again and ease functional testing,\r\n- Easy access to the full history or requests/responses handled by the server since its first start or last reset,\r\n- Parametrized request thanks to [`path-to-regexp`](https://github.com/pillarjs/path-to-regexp#readme) to enable dynamic fixtures routing in a few lines of code\r\n- and many more !\r\n\r\nFor instance, with FMF, you can do such things to quickly configure two fixtures in a mocha test (that will obviously succeed) :\r\n\r\n```javascript\r\nimport Server from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\ndescribe('Headers test', function() {\r\n  before(() => server.start()) // Start intercepting fetch calls\r\n  after(() => server.stop()) // Restore to normal behavior\r\n\r\n  it('should use json headers', async function() {\r\n    server\r\n      .when // or .on\r\n        .header('content-type').equal(/json/) // use a regexp here to avoid writing full header\r\n        .respond.with.preset('200')\r\n      .fallback.to.preset('400')\r\n\r\n    let response = await fetch('/', {\r\n      headers: {'content-type': 'application/json'}\r\n    });\r\n\r\n    response.status.should.equal(200);\r\n  })\r\n})\r\n```\r\n**How FMF can ease API outgoing requests unit tests ?**\r\n\r\nFMF enables really quick response configuration that allows testing the outgoing request to set up different responses (see above example). You only have to check a response property (like status) instead of manually parsing request built by your app to validate it.\r\n\r\nFurthermore, you can use the `before` and `after` hooks or `body` as a callback to alter response on very precise expectations.\r\n\r\n**How FMF can ease functional tests ?**\r\n\r\nIn real life, scripts are often sending multiple requests to do their job. FMF removes the pain of handling multiple responses by easing their management. Let's see this example with a two steps authentication login. A bit verbose for what is actually doing but it aims to illustrate things :\r\n\r\n```javascript\r\nimport Server from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\n// Define on-the-fly fixtures to handle login tests\r\nserver\r\n  .verbose(true) // Enable console login for each request/response/error\r\n  .when\r\n      .pathname.equal('/login')\r\n      .method.equal('POST')\r\n      .body('json').equal(body => body.username === 'foo')\r\n    .respond.with\r\n      .preset(401)\r\n  .when\r\n      .pathname.equal('/session')\r\n      .method.equal('POST')\r\n      .body('json').equal(token => body.authToken === '123')\r\n    .respond.with\r\n      .preset('json')\r\n      .body({success: true, sessionToken: '456'})\r\n  .fallback.to\r\n    .preset(403)\r\n\r\ndescribe('Login test suite', function() {\r\n  before(() => server.start())\r\n  after(() => server.stop())\r\n\r\n  it('should login', async function() {\r\n    await triggerTheLoginLogic('foo');\r\n    await sendTheTokenLogic('123');\r\n    logged.should.be.true;\r\n  })\r\n\r\n  it('should fail login on username', async function() {\r\n    await triggerTheLoginLogic('bar');\r\n    logged.should.be.false;\r\n  })\r\n\r\n  it('should fail login on token', async function() {\r\n    await triggerTheLoginLogic('foo');\r\n    await sendTheTokenLogic('hacked!');\r\n    logged.should.be.false;\r\n  })\r\n})\r\n```\r\nWe're not only sending back data to the app but also checking outgoing requests at the same time because the answer will only be sent if calling the right url with the right method and the right data. `with` and `to` are only optional sugars to improve human readability.\r\n\r\nLast not least, you can easily deploy url-based routing to use your \"real\" data inside each tests instead of providing fake data and get rid of on-the-fly fixtures (see [dynamic fixtures examples](https://liqueurdetoile.github.io/fetch-mock-fixtures/manual/dynamic-fixtures-examples)).\r\n\r\n**When to use FMF ?**\r\n\r\nAt any time :smile:\r\n\r\nNevertheless, FMF will truly give its best with any testing framework (Mocha, Jasmine, Junit...) that allows to automate operations between each tests like `start`, `stop` or `reset` the server.\r\n\r\n## Installation\r\n\r\nInstallation can easily be done through NPM or Yarn. Sinon is required by FMF to stub `fetch` but is not included in the bundle. It must be installed as well if not already present.\r\n\r\n```bash\r\nnpm install sinon fetch-mock-fixtures --save-dev\r\n\r\nyarn add sinon fetch-mock-fixtures --dev\r\n```\r\nFMF should be installed as a dev dependency. It is not meant to be used as an in-app offline mode feature.\r\n\r\n**Note** : FMF is built upon Promise, Proxy and fetch API (Request, Headers, Response) that are available in all modern browsers. If you intend to run tests on older browsers (IE) or versions, you may need to polyfill them. Here's some available tools you can use :\r\n- Promise: [ES6-Promise](https://www.npmjs.com/package/es6-promise)\r\n- Fetch API : [window.fetch polyfill](https://www.npmjs.com/package/whatwg-fetch)\r\n- Proxy: [proxy-polyfill](https://www.npmjs.com/package/proxy-polyfill)\r\n\r\n## Full documentation and API reference\r\nPlease pay visit to [the docs pages](https://liqueurdetoile.github.io/fetch-mock-fixtures/).\r\n\r\n## Bugs and improvements\r\nAny bugs and issues can be filed on the [github repository](https://github.com/liqueurdetoile/fetch-mock-fixtures/issues).\r\n\r\nYou are free and very welcome to fork the project and submit any PR to fix or improve FMF.\r\n\r\nI'm especially interested for good will who wish to improve query matcher processors to provide more tools to evaluate query and choose the right response.\r\n\r\n## Changelog\r\n- 2.2.0 : Add global preset configuration within server instance\r\n- 2.1.0 : Add history logging and verbose mode\r\n- 2.0.0 : BREAKING CHANGE - A brand new FMF highly **not** compatible with previous version\r\n- 1.0.1 : Add requests history and possibility to set up different responses based on requests order. Add delay as a response parameter into fixture.\r\n",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"fetch-mock-fixtures\",\r\n  \"version\": \"0.0.0\",\r\n  \"description\": \"Fixtures based mocker for fetch API with BDD style configuration\",\r\n  \"main\": \"dist/index.min.js\",\r\n  \"keywords\": [\r\n    \"fetch\",\r\n    \"mock\",\r\n    \"fixtures\",\r\n    \"bdd\"\r\n  ],\r\n  \"author\": \"Liqueur de Toile\",\r\n  \"license\": \"MIT\",\r\n  \"homepage\": \"https://github.com/liqueurdetoile/fetch-mock-fixtures\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/liqueurdetoile/fetch-mock-fixtures.git\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/liqueurdetoile/fetch-mock-fixtures/issues\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"webpack --config webpack.conf/build.js -p\",\r\n    \"test\": \"cross-env BABEL_ENV=test karma start --single-run --browsers ChromeHeadless && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage\",\r\n    \"test:dry\": \"cross-env BABEL_ENV=test karma start --single-run --browsers ChromeHeadless\",\r\n    \"test:watch\": \"cross-env BABEL_ENV=test karma start --browsers ChromeHeadless  --log-level warn\",\r\n    \"test:all\": \"cross-env BABEL_ENV=test karma start --single-run --log-level error\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.4.5\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.4.4\",\r\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.4.4\",\r\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.2.0\",\r\n    \"@babel/preset-env\": \"^7.4.5\",\r\n    \"babel-eslint\": \"^10.0.2\",\r\n    \"babel-loader\": \"^8.0.6\",\r\n    \"babel-plugin-istanbul\": \"^5.1.4\",\r\n    \"babel-plugin-transform-builtin-extend\": \"^1.1.2\",\r\n    \"chai\": \"^4.2.0\",\r\n    \"coveralls\": \"^3.0.4\",\r\n    \"cross-env\": \"^5.2.0\",\r\n    \"cz-conventional-changelog\": \"^2.1.0\",\r\n    \"eslint\": \"^6.0.0\",\r\n    \"eslint-loader\": \"^2.1.2\",\r\n    \"json-loader\": \"^0.5.7\",\r\n    \"karma\": \"^4.1.0\",\r\n    \"karma-babel-preprocessor\": \"^8.0.0\",\r\n    \"karma-chai\": \"^0.1.0\",\r\n    \"karma-chrome-launcher\": \"^2.2.0\",\r\n    \"karma-coverage\": \"^1.1.2\",\r\n    \"karma-coverage-istanbul-reporter\": \"^2.0.4\",\r\n    \"karma-edge-launcher\": \"^0.4.2\",\r\n    \"karma-firefox-launcher\": \"^1.1.0\",\r\n    \"karma-ie-launcher\": \"^1.0.0\",\r\n    \"karma-mocha\": \"^1.3.0\",\r\n    \"karma-mocha-reporter\": \"^2.2.5\",\r\n    \"karma-sinon\": \"^1.0.5\",\r\n    \"karma-sourcemap-loader\": \"^0.3.7\",\r\n    \"karma-webpack\": \"^4.0.2\",\r\n    \"mocha\": \"^6.1.4\",\r\n    \"mocha-lcov-reporter\": \"^1.3.0\",\r\n    \"pouchdb\": \"^7.1.1\",\r\n    \"semantic-release\": \"^15.13.16\",\r\n    \"sinon\": \"^7.3.2\",\r\n    \"webpack\": \"^4.35.0\",\r\n    \"webpack-bundle-analyzer\": \"^3.3.2\",\r\n    \"webpack-cli\": \"^3.3.4\",\r\n    \"webpack-merge\": \"^4.2.1\"\r\n  },\r\n  \"dependencies\": {\r\n    \"lodash.isequal\": \"^4.5.0\",\r\n    \"path-to-regexp\": \"^3.0.0\",\r\n    \"url-parse\": \"^1.4.6\"\r\n  },\r\n  \"peerDependencies\": {\r\n    \"sinon\": \"^7\"\r\n  },\r\n  \"config\": {\r\n    \"commitizen\": {\r\n      \"path\": \"./node_modules/cz-conventional-changelog\"\r\n    }\r\n  }\r\n}\r\n",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "[![Build Status](https://travis-ci.org/liqueurdetoile/fetch-mock-fixtures.svg?branch=master)](https://travis-ci.org/liqueurdetoile/fetch-mock-fixtures)\r\n[![Coverage Status](https://coveralls.io/repos/github/liqueurdetoile/fetch-mock-fixtures/badge.svg?branch=master)](https://coveralls.io/github/liqueurdetoile/fetch-mock-fixtures?branch=master)\r\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\r\n[![Documentation](https://liqueurdetoile.github.io/fetch-mock-fixtures/badge.svg)](https://liqueurdetoile.github.io/fetch-mock-fixtures/)\r\n[![Greenkeeper badge](https://badges.greenkeeper.io/liqueurdetoile/fetch-mock-fixtures.svg)](https://greenkeeper.io/)\r\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\r\n\r\n<p align=\"center\"><a href=\"https://liqueurdetoile.com\" target=\"\\_blank\"><img src=\"https://hosting.liqueurdetoile.com/logo_lqdt.png\" alt=\"Liqueur de Toile\"></a></p>\r\n\r\n# Fetch-mock-fixtures (FMF)\r\nWhile most of mockers for fetch are only meant to intercept and define the next response content, FMF goes far beyond and offers a wide range of tools for testing js apps.\r\n\r\nWhat is featured :\r\n- BDD style syntax to configure server and fixtures in a more readable-friendly way. It's heavily inspired by [Chai `should` assertion library](https://www.chaijs.com/guide/styles/#should),\r\n- Easy way to configure response on-the-fly, mutating responses from call to call...\r\n- Enhanced [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) native object to automatically parse url details and query content with [`url-parse`](https://github.com/unshiftio/url-parse#readme),\r\n- Powerful response presets and fixtures system to avoid writing the same things again and again and ease functional testing,\r\n- Easy access to the full history or requests/responses handled by the server since its first start or last reset,\r\n- Parametrized request thanks to [`path-to-regexp`](https://github.com/pillarjs/path-to-regexp#readme) to enable dynamic fixtures routing in a few lines of code\r\n- and many more !\r\n\r\nFor instance, with FMF, you can do such things to quickly configure two fixtures in a mocha test (that will obviously succeed) :\r\n\r\n```javascript\r\nimport Server from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\ndescribe('Headers test', function() {\r\n  before(() => server.start()) // Start intercepting fetch calls\r\n  after(() => server.stop()) // Restore to normal behavior\r\n\r\n  it('should use json headers', async function() {\r\n    server\r\n      .when // or .on\r\n        .header('content-type').equal(/json/) // use a regexp here to avoid writing full header\r\n        .respond.with.preset('200')\r\n      .fallback.to.preset('400')\r\n\r\n    let response = await fetch('/', {\r\n      headers: {'content-type': 'application/json'}\r\n    });\r\n\r\n    response.status.should.equal(200);\r\n  })\r\n})\r\n```\r\n**How FMF can ease API outgoing requests unit tests ?**\r\n\r\nFMF enables really quick response configuration that allows testing the outgoing request to set up different responses (see above example). You only have to check a response property (like status) instead of manually parsing request built by your app to validate it.\r\n\r\nFurthermore, you can use the `before` and `after` hooks or `body` as a callback to alter response on very precise expectations.\r\n\r\n**How FMF can ease functional tests ?**\r\n\r\nIn real life, scripts are often sending multiple requests to do their job. FMF removes the pain of handling multiple responses by easing their management. Let's see this example with a two steps authentication login. A bit verbose for what is actually doing but it aims to illustrate things :\r\n\r\n```javascript\r\nimport Server from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\n// Define on-the-fly fixtures to handle login tests\r\nserver\r\n  .verbose(true) // Enable console login for each request/response/error\r\n  .when\r\n      .pathname.equal('/login')\r\n      .method.equal('POST')\r\n      .body('json').equal(body => body.username === 'foo')\r\n    .respond.with\r\n      .preset(401)\r\n  .when\r\n      .pathname.equal('/session')\r\n      .method.equal('POST')\r\n      .body('json').equal(token => body.authToken === '123')\r\n    .respond.with\r\n      .preset('json')\r\n      .body({success: true, sessionToken: '456'})\r\n  .fallback.to\r\n    .preset(403)\r\n\r\ndescribe('Login test suite', function() {\r\n  before(() => server.start())\r\n  after(() => server.stop())\r\n\r\n  it('should login', async function() {\r\n    await triggerTheLoginLogic('foo');\r\n    await sendTheTokenLogic('123');\r\n    logged.should.be.true;\r\n  })\r\n\r\n  it('should fail login on username', async function() {\r\n    await triggerTheLoginLogic('bar');\r\n    logged.should.be.false;\r\n  })\r\n\r\n  it('should fail login on token', async function() {\r\n    await triggerTheLoginLogic('foo');\r\n    await sendTheTokenLogic('hacked!');\r\n    logged.should.be.false;\r\n  })\r\n})\r\n```\r\nWe're not only sending back data to the app but also checking outgoing requests at the same time because the answer will only be sent if calling the right url with the right method and the right data. `with` and `to` are only optional sugars to improve human readability.\r\n\r\nLast not least, you can easily deploy url-based routing to use your \"real\" data inside each tests instead of providing fake data and get rid of on-the-fly fixtures (see [dynamic fixtures examples](https://liqueurdetoile.github.io/fetch-mock-fixtures/manual/dynamic-fixtures-examples)).\r\n\r\n**When to use FMF ?**\r\n\r\nAt any time :smile:\r\n\r\nNevertheless, FMF will truly give its best with any testing framework (Mocha, Jasmine, Junit...) that allows to automate operations between each tests like `start`, `stop` or `reset` the server.\r\n\r\n## Installation\r\n\r\nInstallation can easily be done through NPM or Yarn. Sinon is required by FMF to stub `fetch` but is not included in the bundle. It must be installed as well if not already present.\r\n\r\n```bash\r\nnpm install sinon fetch-mock-fixtures --save-dev\r\n\r\nyarn add sinon fetch-mock-fixtures --dev\r\n```\r\nFMF should be installed as a dev dependency. It is not meant to be used as an in-app offline mode feature.\r\n\r\n**Note** : FMF is built upon Promise, Proxy and fetch API (Request, Headers, Response) that are available in all modern browsers. If you intend to run tests on older browsers (IE) or versions, you may need to polyfill them. Here's some available tools you can use :\r\n- Promise: [ES6-Promise](https://www.npmjs.com/package/es6-promise)\r\n- Fetch API : [window.fetch polyfill](https://www.npmjs.com/package/whatwg-fetch)\r\n- Proxy: [proxy-polyfill](https://www.npmjs.com/package/proxy-polyfill)\r\n\r\n## Full documentation and API reference\r\nPlease pay visit to [the docs pages](https://liqueurdetoile.github.io/fetch-mock-fixtures/).\r\n\r\n## Bugs and improvements\r\nAny bugs and issues can be filed on the [github repository](https://github.com/liqueurdetoile/fetch-mock-fixtures/issues).\r\n\r\nYou are free and very welcome to fork the project and submit any PR to fix or improve FMF.\r\n\r\nI'm especially interested for good will who wish to improve query matcher processors to provide more tools to evaluate query and choose the right response.\r\n\r\n## Changelog\r\n- 2.2.0 : Add global preset configuration within server instance\r\n- 2.1.0 : Add history logging and verbose mode\r\n- 2.0.0 : BREAKING CHANGE - A brand new FMF highly **not** compatible with previous version\r\n- 1.0.1 : Add requests history and possibility to set up different responses based on requests order. Add delay as a response parameter into fixture.\r\n",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\readme.md",
    "name": "./readme.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\manual\\pages\\getting_started.md",
    "name": "./manual/pages/getting_started.md",
    "content": "# Getting started\r\n\r\n** For installation tips, please consult [documentation home](index.html#installation). **\r\n\r\n** Note on ES6 syntax : ** In all examples here, we're using ES6 modules import and, sometimes, the new spread operator. We're also using async/await syntax for asynchronous calls. All are supported natively by modern browsers.\r\n\r\nFMF itself have been transpiled with Babel to support only alive browsers that share more than 5% of the market. It means that FMF is really not designed to test apps which are willing to support really old browsers as it will certainly be unsupported by them when testing. Nevertheless, you can still try to tweak the build to increase browsers coverage but with no guarantee.\r\n\r\nAt its most basic intend, FMF can be simply used as a convenient way to trap a remote `fetch` call and send a given response. For this to work, the server must have been started and provided with the response. At the end, the server must be stopped in order to resume on native `fetch` API.\r\n\r\nHere's a simple example :\r\n\r\n```javascript\r\nimport Server from 'fetch-mock-fixtures';\r\n\r\nconst server = new Server();\r\n\r\nserver.start();\r\n\r\nserver.respond.with.body('Hello world !');\r\n\r\nlet response = await fetch(/** can have any arguments */);\r\nlet data = await response.text();\r\n\r\nconsole.log(data); // will output Hello world !\r\n\r\n// What about the next call ?\r\nresponse = await fetch(/** can have any arguments */);\r\ndata = await response.text();\r\n\r\nconsole.log(data); // will output Hello world again !\r\n\r\nserver.stop();\r\n```\r\n\r\nNothing too fancy here : we're starting the server, setting it to respond with 'Hello world !', running fetch twice and stop the server.\r\n\r\nBehind the scene, we have :\r\n- overridden `window.fetch` to intercept calls\r\n- Set up a single fixture to the server that matches all incoming requests\r\n- restored `window.fetch` to its native state\r\n\r\nPlease read other parts of the documentation for a more advanced usage.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\manual\\pages\\server.md",
    "name": "./manual/pages/server.md",
    "content": "# Server control, configuration and history\r\nBefore being used, you must create a server instance :\r\n\r\n```javascript\r\nimport Server from 'fetch-mock-fixtures'\r\n\r\nconst server = new Server()\r\n```\r\n\r\nThe constructor takes no arguments. Global presets are loaded when server instance is created. From server instance, you can start, stop and reset the server, configure presets and fixtures and access server history.\r\n\r\n## Server control\r\nMethod / Property  |  Description\r\n--|--\r\n`start()`  | Start the server by mocking native `window.fetch` with a [Sinon stub](https://sinonjs.org/releases/latest/stubs/)\r\n`stop(reset=false)`  |  Stop the server by restoring `window.fetch`. You can optionally pass `true` as argument to also reset the server\r\n`reset(resetStub=true)`  | Reset the server (clear all fixtures and history) and, optionnally reset the stub history\r\n`running`  |  If `true` server is running\r\n`stub`  |  Direct access to the sinon stub\r\n\r\n## Adding fixtures to server\r\nAdding fixtures to the server is pretty simple. See [fixtures](fixtures.html) documentation.\r\n\r\n## Logging and verbose mode\r\n*Since v2.1.0*\r\n\r\nTo help go through requests history analysis or to debug fixtures, FMF logs all events in history. You can access logs through `server.history.logs`.\r\n\r\nLogs can also be displayed at runtime to console with the verbose mode of the server. Simply call the chainable `verbose` method on server instance.\r\n\r\n```javascript\r\nimport Server from 'fetch-mock-fixtures'\r\n\r\nconst server = new Server()\r\n\r\nserver.verbose(true) // enable verbose mode\r\nserver.verbose(false) // disable verbose mode\r\n```\r\n\r\n## Error management\r\nWhen encountering an error during configuration, the server will throw an error.\r\n\r\nDuring request processing, the server will display a warning in console and send back a 500 response with error description. This behavior can be changed with :\r\n- `warnOnError(true|false)` : Activate/deactivate warnings in console\r\n- `throwOnError(true|false)` : If `true`, tells the server to throw an error instead of sending back a 500 error.\r\n\r\n## Server's history\r\nThe server keeps track of all incoming requests and responses. As convenience, you can access the last request and response by calling `server.request` or `server.response`. For more advanced selection tools, the history is available under `server.history`. See [history tests](../test-file/tests/units/history.spec.js.html) for available tools.\r\n\r\nThe request is stored as a FMFRequest that also exposes parsed informations about the url using [url-parse](https://github.com/unshiftio/url-parse#readme)).\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\manual\\pages\\response-configuration.md",
    "name": "./manual/pages/response-configuration.md",
    "content": "# Response configuration\r\nFixtures and presets share the same response configurator. It allows to set up response content and/or adapt request processing behavior.\r\n\r\n## Configure response\r\nFrom the fixture or the preset, you can either use the `set` method and/or use the BDD style :\r\n```javascript\r\nconst server = new Server()\r\n\r\nserver.respond // will register a new Fixture\r\n  .set({\r\n    status: 200\r\n  })\r\n  .headers({'content-type': 'application/json'})\r\n  .body(body => JSON.stringify({message: 'Hellow world !'}));\r\n\r\n// Server will now respond to all requests with a JSON response and status 200\r\n```\r\nThe response properties name are the same between object set approach and BDD style.\r\nThe last assignment (no matter the way you're doing it) will override the previous. You can remove an option by providing false as value :\r\n\r\n```javascript\r\nconst server = new Server()\r\n\r\nserver.respond // will register a single fixture\r\n  .body(body => JSON.stringify({message: 'Hello world !'}));\r\n\r\n// Remove body callback\r\nserver.respond // will fetch the fixture\r\n  .body(false);\r\n```\r\n\r\n### Default response values\r\nThere's no default value for a fixture/preset response. You can use set up a preset and use it to automatically populate one\r\nor more response options of a fixture.\r\n\r\n### Response configuration persistence\r\nFixtures are stored within server and persists until server is reset. If you share the same server between many tests, any changes to fixtures\r\nconfiguration will persist into next tests. This can sometimes be tricky if you're updating an option of the fallback fixture in one test. See [fixtures](fixtures.html) for more informations. This can also be really useful as you can create fixtures only once and share them along all tests.\r\n\r\n## Available response options\r\nEach response option can be removed by affecting the false value to it. ** It is evaluated as a strict comparison.**\r\n\r\nFMF doesn't provide any default values, but Response implementation usually set up a status 200 with 'text/html' encoding to a new Response object when no options is provided.\r\n\r\nOption  | Allowed value(s)  |  Description\r\n--|---|--\r\nbody  |  null &verbar; Blob &verbar; BufferSource &verbar; FormData &verbar; ReadableStream &verbar; URLSearchParams &verbar; USVString &verbar; Function  | You can use any of the available types for a native [Response](https://developer.mozilla.org/fr/docs/Web/API/Response/Response) object. FMF also accepts a callback that will return the body content or alter the response (see [fixture lifecycle](fixtures.html#fixture-lifecycle))\r\ndelay  | Number  | The fixture response will be delayed by X ms\r\nheaders  | Object &verbar; [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers)  |  The object will be used to instantiate the Headers\r\nstatus  | Number |  Status code of the response (2XX - 5XX). Some status code may have some requirements. For instance, trying to set up a body with a 204 status code will fail. It is not a FMF behavior but from native Response object.\r\nstatusText  |  String | Status text along the status code\r\nwrapper  | Function | Wrapper callback that transforms body. See [wrappers](#using_wrappers)\r\npreset  |  String | **Only available within a fixture**. See [presets](presets.html)\r\npattern  | String | Pattern to apply to extract parameters from incoming request url. See [patterns](#using_pattern)\r\nbefore  | Function  |  Callback called before the response is built. See [fixture lifecycle](fixtures.html#fixture-lifecycle)\r\nafter  |  Function |  Callback called after the response have been built.  See [fixture lifecycle](fixtures.html#fixture-lifecycle)\r\n\r\n## Using wrappers\r\nWrappers are used as body processors when preparing the response. Body stored from fixture is provided and the processed body must be returned. The main goal is to get rid of little transformations when providing the body to the fixture. Only one wrapper is allowed per response.\r\n\r\nFor instance, let's say we're working on a JSON API that expects the server's response to be always wrapped in the same patterns. You can use wrapper and two global presets to get rid of emulating this behavior each time you're creating a fixture :\r\n\r\n```javascript\r\nimport {presets, Server} from 'fetch-mock-fixtures';\r\n\r\n// Add the presets to global presets object\r\n// You can do it in your tests bootstrap\r\npresets = Object.assign(presets, {\r\n  'api-success': {\r\n    headers: {'content-type': 'application/json'},\r\n    wrapper: body => JSON.stringify({\r\n      success: true,\r\n      data: body\r\n    })\r\n  },\r\n  'api-failure': {\r\n    headers: {'content-type': 'application/json'},\r\n    wrapper: body => JSON.stringify({\r\n      success: false\r\n      error: body\r\n    })\r\n  }\r\n})\r\n\r\n// In tests scripts\r\nconst server = new Server()\r\n\r\nserver.respond.with.preset('api-success').and.body({\r\n  id: 1,\r\n  name: 'foo'\r\n});\r\n\r\n// Parsed JSON response will be {success: true, data: {id: 1, name: 'foo'}}\r\n\r\n```\r\n## Using patterns\r\nPatterns are a way to automatically extract parameters from the url. They will be provided as an object and first argument to the body callback (see fixtures#body_callback).\r\n\r\nTo extract params, url is parsed with [`path-to-regexp`](https://github.com/pillarjs/path-to-regexp#readme). Please refer to this for advanced syntax.\r\n\r\nHere's a simple example that use extract user id from url :\r\n\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures';\r\n\r\nusers = [\r\n  {id: 1, name: 'foo'},\r\n  {id: 2, name: 'bar'},\r\n  {id: 3, name: 'baz'},\r\n]\r\n\r\nserver.start().respond\r\n  .with.pattern('/api/users/:id?')\r\n  .and.body({id} => return id ? users.find(user => user.id === id) || users)\r\n\r\n```\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\manual\\pages\\presets.md",
    "name": "./manual/pages/presets.md",
    "content": "# Presets\r\n\r\n## Using presets\r\nYou can tell a fixture to use a preset to build its response by simply calling its `preset` method with the name of the preset :\r\n\r\n```javascript\r\nconst server = new Server();\r\n\r\nserver.respond.with.preset(400);\r\n```\r\n\r\nThe preset is only evaluated and merged by the fixture at request time. You can easily override preset through [fixture response configuration](fixtures.html).\r\n\r\nIf the preset is not found in the server instance, an exception will be raised at request time.\r\n\r\n## adding/editing a preset\r\nIt can be done by providing an object with its `set` method and/or using BDD style syntax. Alternatively, the configuration object can be provided to `server.preset` :\r\n\r\n```javascript\r\nconst server = new Server();\r\n\r\n// In the server.preset call\r\nserver.preset('myPreset', {\r\n  status: 250\r\n  statusText: 'weird status'\r\n});\r\n\r\n// Another syntax, the same result\r\nserver.preset('myPreset').set({status: 250}).statusText('weird')\r\n```\r\nYou can have a look at the [response configuration](response-configuration.html) for more details about the available options.\r\n\r\n## Preset scope\r\nA preset can be added to a single server instance or in global scope.\r\n\r\nTo add a preset to server instance, simply create it with `server.preset`.\r\n\r\nTo add a preset to the global scope, just amend the `presets` property of the global export :\r\n\r\n```javascript\r\nimport {presets} from 'fetch-mock-fixtures';\r\n\r\npresets.myPreset = {\r\n  status: 250\r\n  statusText: 'weird status'\r\n} // myPreset will now be available globally\r\n```\r\n\r\n## Built-in presets\r\nFMF already have commonly used built-in presets. See [`presets.js`](../file/src/presets.js.html) for details.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\manual\\pages\\fixtures.md",
    "name": "./manual/pages/fixtures.md",
    "content": "# Fixture in-depth\r\nThe fixture is the heart of FMF. Basically, a fixture organizes :\r\n- the response content (body, headers, status, statusText) and additional options (delay, wrapper, pattern, before and after hooks)\r\n- Optionally, the conditions that the request must match to allow use of the fixture\r\n\r\n## Request processing\r\nWhen the server receives a request, it :\r\n1. tries to find a fixture with conditions that are matching explicitly the request. If multiple fixtures are found, it uses the first one. If none is found, it uses the fallback fixture if available or raise and error,\r\n2. passes the request to the fixture and await the response that triggers the fixture lifecycle,\r\n3. send back the response or an error if a problem occurred (see [server error management](server.html#Error_management)).\r\n\r\n## Fixture lifecycle\r\nWhen provided with the request, the fixture will :\r\n\r\n1. Process the `before` hook is one have been set,\r\n2. Extract parameters from the url if a pattern have been set,\r\n3. Process the body callback or get the body value,\r\n4. Finalize the response setup from preset (if one have been used) and its own response configuration,\r\n5. Apply wrapper to body if one is set\r\n6. Construct a Response instance from response configuration\r\n7. Process the `after` hook if one have been set,\r\n8. Delay the response if asked to,\r\n9. Return the response to the server instance.\r\n\r\nYou can use any of hooks and body callback to amend response content or even cut the lifecycle by throwing another response or error.\r\n\r\n## Fixture hooks and body callback\r\nIn each hooks and callbacks, you can throw to stop fixture processing. If you throw :\r\n- A Response instance, it will be send back to the client immediately\r\n- A Preset instance, it will be used to send back a response (useful for an HTTP error for instance)\r\n- An error, it will used accordingly to server error management configuration\r\n\r\n### `before` hook\r\nIt occurs at the very start of the fixture request processing. It receives the server instance, the request and the actual response configuration of the fixture as arguments.\r\n\r\nYou can return an updated response object that will be used for the rest of the lifecycle.\r\n\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures'\r\n\r\nconst server = new Server();\r\n\r\nserver.respond.before((server, request, response) => {\r\n  // Detect multiple identical requests\r\n  if(request.url === server.request.url) throw new Error('Duplicate requests');\r\n})\r\n```\r\n### Body callback ###\r\nThe body callback is provided with two arguments :\r\n- The params parsed from the request url as a key/value object\r\n- An object exposing request, response and server as properties\r\n\r\nThis is the best place for building [dynamic fixtures](../test-file/tests/examples/filesystem.fixture.spec.js.html) as parameterss are directly provided to the callback.\r\n\r\n### `after` hook\r\nThe after hook is ran at the very end and is provided with the server instance and Response instance as arguments.\r\n\r\nIt is most likely the place to do some cleanings or data resets between calls.\r\n\r\n### Hooks scope\r\nThe hooks are called within the scope of the fixture and `this` will refer to the fixture instance **only if using regular function declaration**. The scope of an arrow function is where the function have been declared, usually your test suite. For instance, to extract parameters from the `before` hook :\r\n\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures'\r\n\r\nconst server = new Server();\r\n\r\n// Won't work - Scope problem\r\nserver.respond.before((server, request, response) => {\r\n  const params = this.extractParams(request.pathname, response.pattern);\r\n})\r\n\r\n// This will work\r\nserver.respond.before(function(server, request, response) {\r\n  const params = this.extractParams(request.pathname, response.pattern);\r\n})\r\n```\r\n\r\n## Adding fixtures to server\r\nAs soon as you have some sample data you are using in many tests, it may be appropriate to stop adding fixtures on-the-fly to the server instance.\r\n\r\nFor simple datasets, a bunch of presets may be handful but if you're going on using calls count (see [requests matcher](requests_matcher.html)), you can simply declare all your fixtures in one file that you can import/require into your test script. Then, you can simply add fixtures to the server by importing them :\r\n\r\n```javascript\r\nimport {Server} from 'fetch-mock-fixtures'\r\nimport fixtures from '../myfixtures';\r\n\r\nconst server = new Server();\r\nserver.import(fixtures);\r\n```\r\n\r\nThe fixtures can be response configuration object or fixtures instance.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "F:\\Projets\\fetch-mock-fixtures\\manual\\pages\\requests-matcher.md",
    "name": "./manual/pages/requests-matcher.md",
    "content": "# Requests matcher\r\nEach fixture has a built-in requests matcher. You can configure a fixture to match only some requests properties and/or match only calls count.\r\n\r\n## Matching request properties\r\nFMF is extending the native Request object with properties build from the parsing of the url with [url-parse](https://github.com/unshiftio/url-parse#readme)). Therefore, you can directly access pathname, port, basic authentication...\r\n\r\nSuch matching evaluation is built in processors. By this time, there's only a common swiss army knife called `equal`. To add a matching configuration, you can do it with a one-shot call or with BDD style after using `on` or `when` getter.\r\n\r\nHave a look to [the tests](../test-file/tests/units/requests.processing.spec.js.html#lineNumber84) for examples on usage.\r\n\r\nThe next call to `respond` will set the fixture in response configuration mode.\r\n\r\nYou can then go on next conditional fixture by calling `on` or `when` again.\r\n\r\nIf you directly call `respond` or `fallback`, you will go on the fallback fixture and create or overwrite it.\r\n\r\nThe fallback fixture is the one (you can have only one obviously) that have no matching conditions. It will only be used if none of the others fixtures is matching the request.\r\n\r\n## Matching calls count\r\nYou can also configure a fixture to match only the nth call to the server or the nth call to itself.\r\n\r\nYou will find [some examples](../test-file/tests/units/requests.processing.spec.js.html#lineNumber63) in tests.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 243,
    "kind": "testFile",
    "name": "tests/examples/filesystem.fixture.spec.js",
    "content": "import Server from '@';\r\n\r\nconst server = new Server();\r\n\r\n// Callback to dynamically fetch fixture file based on path\r\nconst fetchFixture = function(server, request, response) {\r\n  const path = this.getPath(request, response)\r\n  let newResponse;\r\n\r\n  try {\r\n    newResponse = require(`fixtures/${path}.fixture.js`).default;\r\n  } catch (err) {\r\n    throw server.preset(404);\r\n  }\r\n\r\n  newResponse = Object.assign(\r\n    {},\r\n    response,\r\n    newResponse,\r\n    {\r\n      headers: {'content-type': 'application/json'},\r\n      wrapper: body => JSON.stringify(body)\r\n    }\r\n  );\r\n\r\n  return newResponse;\r\n}\r\n\r\ndescribe('Webpack require dynamic fixture example', function() {\r\n  before(() => {\r\n    server.start().respond.before(fetchFixture);\r\n  })\r\n\r\n  after(() => {\r\n    server.stop();\r\n  })\r\n\r\n  it('should load a fixture without pattern', async function() {\r\n    let response, data;\r\n\r\n    response = await fetch('/api/users');\r\n    response.status.should.equal(200);\r\n    data = await response.json();\r\n    data.should.deep.equal([\r\n      {\r\n        id: 1,\r\n        name: 'foo'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'bar'\r\n      }\r\n    ]);\r\n\r\n    response = await fetch('/api/users/1');\r\n    response.status.should.equal(200);\r\n    data = await response.json();\r\n    data.should.deep.equal({\r\n      id: 1,\r\n      name: 'foo'\r\n    });\r\n\r\n    response = await fetch('/api/users', {method: 'POST'});\r\n    response.status.should.equal(201);\r\n    data = await response.json();\r\n    data.should.deep.equal({\r\n      id: 3,\r\n      name: 'baz'\r\n    });\r\n\r\n    response = await fetch('/api/users/5');\r\n    response.status.should.equal(404);\r\n  })\r\n\r\n  it('should load a fixture with pattern', async function() {\r\n    server.respond.pattern('/api2/users/:id?');\r\n\r\n    let response, data;\r\n\r\n    response = await fetch('/api2/users');\r\n    response.status.should.equal(200);\r\n    data = await response.json();\r\n    data.should.deep.equal([\r\n      {\r\n        id: 1,\r\n        name: 'foo'\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'bar'\r\n      }\r\n    ]);\r\n\r\n    response = await fetch('/api2/users/1');\r\n    response.status.should.equal(200);\r\n    data = await response.json();\r\n    data.should.deep.equal({\r\n      id: 1,\r\n      name: 'foo'\r\n    });\r\n\r\n    response = await fetch('/api2/users/5');\r\n    response.status.should.equal(404);\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/examples/filesystem.fixture.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "tests/examples/filesystem.fixture.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/examples/filesystem.fixture.spec.js~describe0",
    "access": null,
    "description": "Webpack require dynamic fixture example",
    "lineNumber": 29
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "tests/examples/filesystem.fixture.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/examples/filesystem.fixture.spec.js~describe0.it1",
    "access": null,
    "description": "should load a fixture without pattern",
    "lineNumber": 38
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "tests/examples/filesystem.fixture.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/examples/filesystem.fixture.spec.js~describe0.it2",
    "access": null,
    "description": "should load a fixture with pattern",
    "lineNumber": 75
  },
  {
    "__docId__": 247,
    "kind": "testFile",
    "name": "tests/examples/pouchdb.fixture.spec.js",
    "content": "import Server from '@';\r\nimport PouchDB from 'pouchdb';\r\n\r\nlet db;\r\n\r\n/** Data that will be stored and restored each time in database */\r\nconst fixtures = [\r\n  {\r\n    _id: 'users/1',\r\n    id: 1,\r\n    name: 'foo'\r\n  },\r\n  {\r\n    _id: 'users/2',\r\n    id: 1,\r\n    name: 'bar'\r\n  },\r\n  {\r\n    _id: 'objects/1',\r\n    id: '1',\r\n    value: 'object1'\r\n  }\r\n];\r\n\r\n/** Callback to search/upsert database */\r\nconst fetchFixture = async function(params, {request, response, server}) {\r\n  if (!params.model) throw server.preset(404);\r\n\r\n  const get = async function({model, id}) {\r\n    if (id) {\r\n      try {\r\n        const _id = `${model}/${id}`;\r\n        return await db.get(_id);\r\n      } catch (err) {\r\n        throw server.preset(err.status);\r\n      }\r\n    }\r\n\r\n    let docs = await db.allDocs({\r\n      include_docs: true\r\n    });\r\n\r\n    return docs.rows.filter(row => row.id.indexOf(model) === 0).map(row => row.doc)\r\n  }\r\n\r\n  const upsert = async function({model, id}) {\r\n    if (!id && request.method !== 'POST') {\r\n      throw server.preset(400);\r\n    }\r\n\r\n    if (id && request.method === 'POST') {\r\n      throw server.preset(400);\r\n    }\r\n\r\n    id = id || (await get({model})).length + 1;\r\n\r\n    const _id = `${model}/${id}`;\r\n    let doc;\r\n    let data = await request.json();\r\n\r\n    try {\r\n      doc = await db.get(_id);\r\n    } catch (err) {\r\n      if (err.status === 404) {\r\n        doc = Object.assign({_id}, data);\r\n      } else throw server.preset(err.status);\r\n    }\r\n\r\n    try {\r\n      await db.put(doc);\r\n    } catch (err) {\r\n      throw server.preset(err.status);\r\n    }\r\n\r\n    return doc;\r\n  }\r\n\r\n  if (request.method === 'POST') response.status = 201;\r\n  if (request.method === 'GET') return get(params);\r\n  if (['POST', 'PUT', 'PATCH'].includes(request.method)) return upsert(params);\r\n}\r\n\r\nconst server = new Server();\r\n\r\ndescribe('Dynamic fixture from database', function() {\r\n  beforeEach(async () => {\r\n    db = new PouchDB('FMF');\r\n\r\n    await db.bulkDocs(fixtures);\r\n    server.start()\r\n      .respond\r\n      .with.preset('json')\r\n      .with.body(fetchFixture)\r\n      .with.pattern('/apidb/:model/:id?');\r\n  })\r\n\r\n  afterEach(async () => {\r\n    await db.destroy();\r\n    server.stop();\r\n  })\r\n\r\n  it('should fetch all rows from a model', async function() {\r\n    let response = await fetch('/apidb/users');\r\n    let data = await response.json();\r\n\r\n    data.length.should.equal(2);\r\n  })\r\n\r\n  it('should fetch once record from a model', async function() {\r\n    let response = await fetch('/apidb/users/1');\r\n    let data = await response.json();\r\n\r\n    data.name.should.equal('foo');\r\n  })\r\n\r\n  it('should create a new record', async function() {\r\n    let response = await fetch('/apidb/users', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        name: 'baz'\r\n      })\r\n    });\r\n\r\n    response.status.should.equal(201);\r\n    let data = await response.json();\r\n\r\n    data.name.should.equal('baz');\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/examples/pouchdb.fixture.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "tests/examples/pouchdb.fixture.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/examples/pouchdb.fixture.spec.js~describe3",
    "access": null,
    "description": "Dynamic fixture from database",
    "lineNumber": 85
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "tests/examples/pouchdb.fixture.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "tests/examples/pouchdb.fixture.spec.js~describe3.it4",
    "access": null,
    "description": "should fetch all rows from a model",
    "lineNumber": 102
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "tests/examples/pouchdb.fixture.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "tests/examples/pouchdb.fixture.spec.js~describe3.it5",
    "access": null,
    "description": "should fetch once record from a model",
    "lineNumber": 109
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "tests/examples/pouchdb.fixture.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "tests/examples/pouchdb.fixture.spec.js~describe3.it6",
    "access": null,
    "description": "should create a new record",
    "lineNumber": 116
  },
  {
    "__docId__": 252,
    "kind": "testFile",
    "name": "tests/units/errors.spec.js",
    "content": "import {Server} from '@';\r\n\r\nconst server = new Server();\r\n\r\ndescribe('Errors management', function() {\r\n  before(() => server.start())\r\n  beforeEach(() => server.reset())\r\n  after(() => server.stop())\r\n\r\n  describe('Server warnings', function() {\r\n    beforeEach(() => sinon.stub(console, 'warn'))\r\n    afterEach(() => console.warn.restore()) // eslint-disable-line\r\n\r\n    it('should warn on error by default', async function() {\r\n      await fetch()\r\n      console.warn.calledOnce.should.be.true; // eslint-disable-line\r\n    })\r\n\r\n    it('should be set to not warn on error', async function() {\r\n      server.warnOnError(false);\r\n      await fetch();\r\n      console.warn.calledOnce.should.be.false; // eslint-disable-line\r\n    })\r\n  })\r\n\r\n  describe('Server errors', function() {\r\n    it('should respond with 500 error when process failing', async function() {\r\n      const response = await fetch();\r\n\r\n      response.status.should.equal(500);\r\n    })\r\n\r\n    it('should be set to throw on error', async function() {\r\n      let thrown = false;\r\n\r\n      server.throwOnError(true);\r\n\r\n      try {\r\n        await fetch();\r\n      } catch (err) {\r\n        err.should.be.instanceof(Error);\r\n        thrown = true;\r\n      }\r\n\r\n      if (!thrown) expect.fail('Error not thrown');\r\n    })\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/errors.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "tests/units/errors.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe7",
    "access": null,
    "description": "Errors management",
    "lineNumber": 5
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "tests/units/errors.spec.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe7.describe8",
    "access": null,
    "description": "Server warnings",
    "lineNumber": 10
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "tests/units/errors.spec.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe7.describe8.it9",
    "access": null,
    "description": "should warn on error by default",
    "lineNumber": 14
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "tests/units/errors.spec.js~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe7.describe8.it10",
    "access": null,
    "description": "should be set to not warn on error",
    "lineNumber": 19
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "tests/units/errors.spec.js~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe7.describe11",
    "access": null,
    "description": "Server errors",
    "lineNumber": 26
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "tests/units/errors.spec.js~describe7.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe7.describe11.it12",
    "access": null,
    "description": "should respond with 500 error when process failing",
    "lineNumber": 27
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "tests/units/errors.spec.js~describe7.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/errors.spec.js~describe7.describe11.it13",
    "access": null,
    "description": "should be set to throw on error",
    "lineNumber": 33
  },
  {
    "__docId__": 260,
    "kind": "testFile",
    "name": "tests/units/fixtures.spec.js",
    "content": "import {FMFRequest, Fixture, Server} from '@';\r\nimport RequestMatcher from '@/helpers/RequestMatcher';\r\n\r\nconst server = new Server();\r\n\r\ndescribe('Fixtures test suite', function() {\r\n  before(() => server.start())\r\n  afterEach(() => server.reset())\r\n  after(() => server.stop());\r\n\r\n  describe('Fixture configuration', function() {\r\n    it('should create a fixture', function() {\r\n      const f = new Fixture(server);\r\n\r\n      f.should.be.instanceof(Fixture);\r\n      expect(f._matcher).to.be.null;\r\n      f.on.should.be.instanceof(RequestMatcher);\r\n      f.on.should.deep.equal(f._matcher);\r\n      f.respond.should.deep.equal(f);\r\n    })\r\n  })\r\n\r\n  describe('Fixture requests processing', function() {\r\n    it('should process fixture lifecyle', async function() {\r\n      const request = new FMFRequest('/api/v1/users/1');\r\n      const f = new Fixture(server);\r\n      const before = sinon.spy();\r\n      const body = sinon.spy();\r\n      const after = sinon.spy();\r\n      const response = {\r\n        pattern: '/api/v1/users/:id?',\r\n        before,\r\n        body,\r\n        after\r\n      };\r\n\r\n      f.respond.set(response)\r\n\r\n      await f.getResponse(request);\r\n\r\n      before.calledOnce.should.be.true;\r\n      body.calledOnce.should.true;\r\n      after.calledOnce.should.be.true;\r\n    })\r\n\r\n    it('should alter response from before response callback', async function() {\r\n      server.respond.with.preset('default');\r\n\r\n      let response = await fetch('/api/v1/users/1');\r\n      response.status.should.equal(200);\r\n\r\n      server.respond.before(() => ({\r\n        status: 404\r\n      }));\r\n\r\n      response = await fetch('/api/v1/users/1');\r\n      response.status.should.equal(404);\r\n    })\r\n\r\n    it('should use a preset if one is thrown in fixture lifecycle', async function() {\r\n      server.respond\r\n        .with.preset('default')\r\n        .before(server => {\r\n          throw server.preset(404)\r\n        });\r\n\r\n      let response = await fetch('/api/v1/users/1');\r\n      response.status.should.equal(404);\r\n    })\r\n\r\n    it('should use a Response instance if one is thrown in fixture lifecycle', async function() {\r\n      server.respond\r\n        .with.preset('default')\r\n        .body(() => {\r\n          throw new Response(null, {status: 404});\r\n        });\r\n\r\n      let response = await fetch('/api/v1/users/1');\r\n      response.status.should.equal(404);\r\n    })\r\n\r\n    it('should use a response object descriptor if one is thrown in fixture lifecycle', async function() {\r\n      server.respond\r\n        .with.preset('default')\r\n        .after(() => {\r\n          throw {status: 404}\r\n        });\r\n\r\n      let response = await fetch('/api/v1/users/1');\r\n      response.status.should.equal(404);\r\n    })\r\n\r\n    it('should throw on Error', async function() {\r\n      let response;\r\n\r\n      server\r\n        .warnOnError(false)\r\n        .throwOnError(true)\r\n        .respond\r\n        .with.preset('default')\r\n        .before(() => {\r\n          throw new TypeError()\r\n        });\r\n\r\n      try {\r\n        response = await fetch('/api/v1/users/1');\r\n      } catch (err) {\r\n        err.should.be.instanceof(Error);\r\n        err.previous.should.be.instanceof(TypeError);\r\n      }\r\n\r\n      expect(response).to.be.undefined;\r\n    })\r\n\r\n    it('should return a 500 error for Error throws', async function() {\r\n      server\r\n        .throwOnError(false)\r\n        .respond\r\n        .with.preset('default')\r\n        .before(() => {\r\n          throw new TypeError()\r\n        });\r\n\r\n      let response = await fetch('/api/v1/users/1');\r\n      response.status.should.equal(500);\r\n      response.statusText.should.equal('FMF error: Unable to process before callback');\r\n    })\r\n\r\n    it('should throw by default for other throws', async function() {\r\n      let response;\r\n\r\n      server\r\n        .throwOnError(true)\r\n        .respond\r\n        .with.preset('default')\r\n        .before(() => {\r\n          throw 'My custom error'\r\n        });\r\n\r\n      try {\r\n        response = await fetch('/api/v1/users/1');\r\n      } catch (err) {\r\n        err.toString().should.equal('FMF error: Unable to process before callback');\r\n        err.previous.should.equal('My custom error');\r\n      }\r\n\r\n      expect(response).to.be.undefined;\r\n    })\r\n\r\n    it('should return a 500 error for other throws', async function() {\r\n      server\r\n        .throwOnError(false)\r\n        .respond\r\n        .with.preset('default')\r\n        .before(() => {\r\n          throw 'My custom error'\r\n        });\r\n\r\n      let response = await fetch('/api/v1/users/1');\r\n      response.status.should.equal(500);\r\n    })\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/fixtures.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "tests/units/fixtures.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14",
    "access": null,
    "description": "Fixtures test suite",
    "lineNumber": 6
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "tests/units/fixtures.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe15",
    "access": null,
    "description": "Fixture configuration",
    "lineNumber": 11
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe15.it16",
    "access": null,
    "description": "should create a fixture",
    "lineNumber": 12
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "tests/units/fixtures.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17",
    "access": null,
    "description": "Fixture requests processing",
    "lineNumber": 23
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17.it18",
    "access": null,
    "description": "should process fixture lifecyle",
    "lineNumber": 24
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17.it19",
    "access": null,
    "description": "should alter response from before response callback",
    "lineNumber": 46
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17.it20",
    "access": null,
    "description": "should use a preset if one is thrown in fixture lifecycle",
    "lineNumber": 60
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17.it21",
    "access": null,
    "description": "should use a Response instance if one is thrown in fixture lifecycle",
    "lineNumber": 71
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17.it22",
    "access": null,
    "description": "should use a response object descriptor if one is thrown in fixture lifecycle",
    "lineNumber": 82
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17.it23",
    "access": null,
    "description": "should throw on Error",
    "lineNumber": 93
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17.it24",
    "access": null,
    "description": "should return a 500 error for Error throws",
    "lineNumber": 115
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17.it25",
    "access": null,
    "description": "should throw by default for other throws",
    "lineNumber": 129
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "tests/units/fixtures.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/fixtures.spec.js~describe14.describe17.it26",
    "access": null,
    "description": "should return a 500 error for other throws",
    "lineNumber": 150
  },
  {
    "__docId__": 274,
    "kind": "testFile",
    "name": "tests/units/FMFRequest.spec.js",
    "content": "import FMFRequest from '@/helpers/FMFRequest';\r\n\r\ndescribe('Extended request test suite', function() {\r\n  it('should create Request from fetch params and expose parsed request properties', function() {\r\n    let r = new FMFRequest('/api/test?param1=true&param2=test', {method: 'GET'});\r\n\r\n    r.method.should.equal('GET');\r\n    r.url.should.equal('http://localhost:9876/api/test?param1=true&param2=test');\r\n    r.pathname.should.equal('/api/test');\r\n    r.query.should.deep.equal({\r\n      param1: 'true',\r\n      param2: 'test'\r\n    });\r\n  })\r\n\r\n  it('should extend existing Request Object and expose parsed request properties', function() {\r\n    let r = new FMFRequest(new Request('/api/test?param1=true&param2=test', {method: 'GET'}));\r\n\r\n    r.method.should.equal('GET');\r\n    r.url.should.equal('http://localhost:9876/api/test?param1=true&param2=test');\r\n    r.pathname.should.equal('/api/test');\r\n    r.query.should.deep.equal({\r\n      param1: 'true',\r\n      param2: 'test'\r\n    });\r\n  })\r\n\r\n  it('should return an FMF request as clone', function() {\r\n    let r = new FMFRequest('/');\r\n\r\n    r.clone().should.be.instanceof(FMFRequest);\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/FMFRequest.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "tests/units/FMFRequest.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/FMFRequest.spec.js~describe27",
    "access": null,
    "description": "Extended request test suite",
    "lineNumber": 3
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "tests/units/FMFRequest.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/FMFRequest.spec.js~describe27.it28",
    "access": null,
    "description": "should create Request from fetch params and expose parsed request properties",
    "lineNumber": 4
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "tests/units/FMFRequest.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/FMFRequest.spec.js~describe27.it29",
    "access": null,
    "description": "should extend existing Request Object and expose parsed request properties",
    "lineNumber": 16
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "tests/units/FMFRequest.spec.js~describe27",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/FMFRequest.spec.js~describe27.it30",
    "access": null,
    "description": "should return an FMF request as clone",
    "lineNumber": 28
  },
  {
    "__docId__": 279,
    "kind": "testFile",
    "name": "tests/units/history.spec.js",
    "content": "import {FMFRequest, Server} from '@';\r\n\r\nconst server = new Server();\r\n\r\ndescribe('History test suite', function() {\r\n  before(async () => {\r\n    server.start()\r\n    server.respond.with.preset('default');\r\n\r\n    await (await fetch('/1')).text();\r\n    await fetch('/2');\r\n    await fetch('/3');\r\n    await fetch('/4');\r\n    await fetch('/5');\r\n  })\r\n  after(() => server.stop())\r\n\r\n  it('should get last request and response', function() {\r\n    server.request.should.be.instanceof(FMFRequest);\r\n    server.request.pathname.should.equal('/5');\r\n    server.response.should.be.instanceof(Response);\r\n  })\r\n\r\n  it('should get nth request', function() {\r\n    server.history.first.request.pathname.should.equal('/1');\r\n    server.history.second.request.pathname.should.equal('/2');\r\n    server.history.third.request.pathname.should.equal('/3');\r\n    server.history.request.atCall(4).pathname.should.equal('/4');\r\n  })\r\n\r\n  it('should have cloned response before body parsing', function() {\r\n    server.history.response.first.should.be.instanceof(Response);\r\n    server.history.response.first.bodyUsed.should.be.false;\r\n  })\r\n\r\n  it('should return all history, all requests or all responses', function() {\r\n    server.history.all().length.should.equal(5);\r\n    server.history.all()[0].request.should.exist;\r\n    server.history.all()[0].response.should.exist;\r\n\r\n    server.history.request.all().length.should.equal(5);\r\n    server.history.request.all()[0].should.be.instanceof(FMFRequest);\r\n\r\n    server.history.response.all().length.should.equal(5);\r\n    server.history.response.all()[0].should.be.instanceof(Response);\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/history.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "tests/units/history.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/history.spec.js~describe31",
    "access": null,
    "description": "History test suite",
    "lineNumber": 5
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "tests/units/history.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/history.spec.js~describe31.it32",
    "access": null,
    "description": "should get last request and response",
    "lineNumber": 18
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "tests/units/history.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/history.spec.js~describe31.it33",
    "access": null,
    "description": "should get nth request",
    "lineNumber": 24
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "tests/units/history.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/history.spec.js~describe31.it34",
    "access": null,
    "description": "should have cloned response before body parsing",
    "lineNumber": 31
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "tests/units/history.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/history.spec.js~describe31.it35",
    "access": null,
    "description": "should return all history, all requests or all responses",
    "lineNumber": 36
  },
  {
    "__docId__": 285,
    "kind": "testFile",
    "name": "tests/units/log.spec.js",
    "content": "import {Server} from '@';\r\n\r\nconst server = new Server();\r\n\r\ndescribe('Log and verbose tests', function() {\r\n  before(() => server.start());\r\n  afterEach(() => server.reset());\r\n  after(() => server.stop());\r\n\r\n  it('should log request/response/error', async function() {\r\n    server.warnOnError(false);\r\n    await fetch('/api/log');\r\n    server.respond.with.preset('default');\r\n    await fetch('/api/log');\r\n\r\n    server.history.logs.should.deep.equal([\r\n      'Request : GET http://localhost:9876/api/log',\r\n      'FMF error: No fixtures defined',\r\n      'Request : GET http://localhost:9876/api/log',\r\n      'Response sent (200 OK)'\r\n    ])\r\n  })\r\n\r\n  it('should log and verbose request/response/error', async function() {\r\n    sinon.spy(console, 'log');\r\n\r\n    server.warnOnError(false).verbose(true);\r\n    await fetch('/api/log');\r\n    server.respond.with.preset('default');\r\n    await fetch('/api/log');\r\n\r\n    console.log.args.should.deep.equal([ // eslint-disable-line\r\n      ['Request : GET http://localhost:9876/api/log'],\r\n      ['FMF error: No fixtures defined'],\r\n      ['Request : GET http://localhost:9876/api/log'],\r\n      ['Response sent (200 OK)']\r\n    ])\r\n\r\n    console.log.restore(); // eslint-disable-line\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/log.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "tests/units/log.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/log.spec.js~describe36",
    "access": null,
    "description": "Log and verbose tests",
    "lineNumber": 5
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "tests/units/log.spec.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/log.spec.js~describe36.it37",
    "access": null,
    "description": "should log request/response/error",
    "lineNumber": 10
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "tests/units/log.spec.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/log.spec.js~describe36.it38",
    "access": null,
    "description": "should log and verbose request/response/error",
    "lineNumber": 24
  },
  {
    "__docId__": 289,
    "kind": "testFile",
    "name": "tests/units/presets.spec.js",
    "content": "import {Preset, Server, presets} from '@';\r\n\r\nconst p1 = {\r\n  body: null,\r\n  delay: 0,\r\n  headers: new Headers({'content-type': 'application/json'}),\r\n  status: 200,\r\n  statusText: 'OK',\r\n  wrapper: '%data%',\r\n  pattern: 'pattern',\r\n  before: () => 'before',\r\n  after: () => 'after'\r\n};\r\n\r\nconst r1 = p1;\r\n\r\nconst p2 = {\r\n  body: 'test',\r\n  delay: 1000,\r\n  headers: false,\r\n  status: 200,\r\n  statusText: 'OK',\r\n  wrapper: false,\r\n  pattern: false,\r\n  before: false,\r\n  after: false\r\n}\r\n\r\nconst r2 = {\r\n  body: 'test',\r\n  delay: 1000,\r\n  status: 200,\r\n  statusText: 'OK'\r\n}\r\n\r\nlet server;\r\n\r\ndescribe('Presets test suite', function() {\r\n  beforeEach(function() {\r\n    server = new Server();\r\n  });\r\n\r\n  it('should create a blank preset', function() {\r\n    const preset = server.preset('test');\r\n\r\n    preset.should.be.instanceof(Preset);\r\n  });\r\n\r\n  it('should create a configured preset', function() {\r\n    const preset = server.preset('test', {\r\n      status: 204\r\n    });\r\n\r\n    preset._any.should.deep.equal({status: 204});\r\n  });\r\n\r\n  it('should update preset', function() {\r\n    let preset;\r\n\r\n    preset = server.preset('test', p1);\r\n    preset._any.should.deep.equal(r1);\r\n    server._presets['test'].should.equal(preset);\r\n    preset = server.preset('test', p2);\r\n    server._presets['test'].should.equal(preset);\r\n    preset._any.should.deep.equal(r2);\r\n  })\r\n\r\n  it('should configure preset with BDD style', function() {\r\n    let preset = server.preset('test').delay(5000);\r\n\r\n    preset._any.delay.should.equal(5000);\r\n  })\r\n\r\n  it('should delete preset', function() {\r\n    server.preset('test').remove();\r\n\r\n    expect(server._presets.test).to.be.undefined;\r\n  })\r\n\r\n  it('should throw if name is not provided', function() {\r\n    expect(server.preset.bind(server)).to.throw();\r\n  })\r\n\r\n  it('should throw if params are not an object', function() {\r\n    expect(server.preset.bind(server, 'test', 'foo')).to.throw();\r\n  })\r\n\r\n  it('should add presets app-wide (manual way)', function() {\r\n    presets.apisuccess = {\r\n      status: 201\r\n    };\r\n\r\n    const server = new Server();\r\n    server._presets.apisuccess.should.exist;\r\n  })\r\n\r\n  it('should register a preset globally', function() {\r\n    let preset = server.preset('test').delay(5000);\r\n\r\n    preset.register();\r\n    presets.test.delay.should.equal(5000);\r\n  })\r\n\r\n  it('should unregister global presets', function() {\r\n    server.preset('test').unregister();\r\n    expect(server._presets.test).to.be.instanceof(Object);\r\n    expect(presets.test).to.be.undefined;\r\n  })\r\n});\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/presets.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "tests/units/presets.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39",
    "access": null,
    "description": "Presets test suite",
    "lineNumber": 38
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it40",
    "access": null,
    "description": "should create a blank preset",
    "lineNumber": 43
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it41",
    "access": null,
    "description": "should create a configured preset",
    "lineNumber": 49
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it42",
    "access": null,
    "description": "should update preset",
    "lineNumber": 57
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it43",
    "access": null,
    "description": "should configure preset with BDD style",
    "lineNumber": 68
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it44",
    "access": null,
    "description": "should delete preset",
    "lineNumber": 74
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it45",
    "access": null,
    "description": "should throw if name is not provided",
    "lineNumber": 80
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it46",
    "access": null,
    "description": "should throw if params are not an object",
    "lineNumber": 84
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it47",
    "access": null,
    "description": "should add presets app-wide (manual way)",
    "lineNumber": 88
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it48",
    "access": null,
    "description": "should register a preset globally",
    "lineNumber": 97
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "tests/units/presets.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/presets.spec.js~describe39.it49",
    "access": null,
    "description": "should unregister global presets",
    "lineNumber": 104
  },
  {
    "__docId__": 301,
    "kind": "testFile",
    "name": "tests/units/processors/base.spec.js",
    "content": "import BaseProcessor from '@/processors/BaseProcessor';\r\n\r\ndescribe('Processors test suite', function() {\r\n  describe('Base processor evaluation methods', function() {\r\n    const p = new BaseProcessor();\r\n\r\n    describe('Equality', function() {\r\n      it('should evaluate equality of strings', async function() {\r\n        let current = 'test';\r\n        let expected = 'test';\r\n\r\n        (await p._equal(current, expected)).should.be.true;\r\n      })\r\n\r\n      it('should evaluate equality of numbers', async function() {\r\n        let current = '1';\r\n        let expected = 1;\r\n\r\n        (await p._equal(current, expected)).should.be.true;\r\n      })\r\n\r\n      it('should evaluate equality of booleans', async function() {\r\n        let current = 'true';\r\n        let expected = true;\r\n\r\n        (await p._equal(current, expected)).should.be.true;\r\n      })\r\n\r\n      it('should execute reg exp', async function() {\r\n        let current = 'bar is a foo baz';\r\n        let expected = /foo/;\r\n\r\n        (await p._equal(current, expected)).should.be.true;\r\n      })\r\n\r\n      it('should execute callback', async function() {\r\n        let current = 'bar is a foo baz';\r\n        let expected = current => current.indexOf('foo') > 0;\r\n\r\n        (await p._equal(current, expected)).should.be.true;\r\n      })\r\n\r\n      it('should execute async callback', async function() {\r\n        let current = 'bar is a foo baz';\r\n        let expected = async current => current.indexOf('foo') > 0;\r\n\r\n        (await p._equal(current, expected)).should.be.true;\r\n      })\r\n    })\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/processors/base.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "tests/units/processors/base.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/processors/base.spec.js~describe50",
    "access": null,
    "description": "Processors test suite",
    "lineNumber": 3
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "describe51",
    "testId": 51,
    "memberof": "tests/units/processors/base.spec.js~describe50",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/processors/base.spec.js~describe50.describe51",
    "access": null,
    "description": "Base processor evaluation methods",
    "lineNumber": 4
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "tests/units/processors/base.spec.js~describe50.describe51",
    "testDepth": 2,
    "static": true,
    "longname": "tests/units/processors/base.spec.js~describe50.describe51.describe52",
    "access": null,
    "description": "Equality",
    "lineNumber": 7
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "tests/units/processors/base.spec.js~describe50.describe51.describe52",
    "testDepth": 3,
    "static": true,
    "longname": "tests/units/processors/base.spec.js~describe50.describe51.describe52.it53",
    "access": null,
    "description": "should evaluate equality of strings",
    "lineNumber": 8
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "tests/units/processors/base.spec.js~describe50.describe51.describe52",
    "testDepth": 3,
    "static": true,
    "longname": "tests/units/processors/base.spec.js~describe50.describe51.describe52.it54",
    "access": null,
    "description": "should evaluate equality of numbers",
    "lineNumber": 15
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "tests/units/processors/base.spec.js~describe50.describe51.describe52",
    "testDepth": 3,
    "static": true,
    "longname": "tests/units/processors/base.spec.js~describe50.describe51.describe52.it55",
    "access": null,
    "description": "should evaluate equality of booleans",
    "lineNumber": 22
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "tests/units/processors/base.spec.js~describe50.describe51.describe52",
    "testDepth": 3,
    "static": true,
    "longname": "tests/units/processors/base.spec.js~describe50.describe51.describe52.it56",
    "access": null,
    "description": "should execute reg exp",
    "lineNumber": 29
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "tests/units/processors/base.spec.js~describe50.describe51.describe52",
    "testDepth": 3,
    "static": true,
    "longname": "tests/units/processors/base.spec.js~describe50.describe51.describe52.it57",
    "access": null,
    "description": "should execute callback",
    "lineNumber": 36
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "tests/units/processors/base.spec.js~describe50.describe51.describe52",
    "testDepth": 3,
    "static": true,
    "longname": "tests/units/processors/base.spec.js~describe50.describe51.describe52.it58",
    "access": null,
    "description": "should execute async callback",
    "lineNumber": 43
  },
  {
    "__docId__": 311,
    "kind": "testFile",
    "name": "tests/units/RequestMatcher.spec.js",
    "content": "import FMFRequest from '@/helpers/FMFRequest';\r\nimport Fixture from '@/Fixture';\r\nimport RequestMatcher from '@/helpers/RequestMatcher';\r\nimport BaseProcessor from '@/processors/BaseProcessor';\r\nimport BooleanProcessor from '@/processors/BooleanProcessor';\r\nimport BodyProcessor from '@/processors/BodyProcessor';\r\nimport HeadersProcessor from '@/processors/HeadersProcessor';\r\nimport QueryProcessor from '@/processors/QueryProcessor';\r\nimport StringProcessor from '@/processors/StringProcessor';\r\n\r\ndescribe('Request configurator test suite', function() {\r\n  it('should create a matcher', function() {\r\n    const f = new Fixture();\r\n\r\n    f.on.should.be.instanceof(RequestMatcher);\r\n    f.on.on.should.deep.equal(f._matcher);\r\n  })\r\n\r\n  it('should throw on unsupported FMFRequest property', function() {\r\n    const f = new Fixture();\r\n\r\n    expect(() => f.on.bugsy).to.throw();\r\n    expect(() => f.on.equal({bugsy: true})).to.throw();\r\n  })\r\n\r\n  it('should return a processor', function() {\r\n    const f = new Fixture();\r\n\r\n    f.on.method.should.be.instanceof(BaseProcessor);\r\n    f.on._processors.length.should.equal(1);\r\n    f.on._processors[0].should.be.instanceof(StringProcessor);\r\n  })\r\n\r\n  it('should process equal', async function () {\r\n    const f = new Fixture();\r\n    const r = new FMFRequest('/');\r\n\r\n    f.on.method.equal('GET').should.deep.equal(f._matcher);\r\n    (await f.match(r)).should.be.true;\r\n  })\r\n\r\n  it('should process header', async function () {\r\n    const f = new Fixture();\r\n    const r = new FMFRequest('/', {headers: {'content-type': 'application/json'}});\r\n\r\n    f.on.header('content-type').equal(/json/).should.deep.equal(f._matcher);\r\n    (await f.match(r)).should.be.true;\r\n  })\r\n\r\n  it('should provide the right processor', function() {\r\n    const f = new Fixture();\r\n\r\n    f.on.equal({}).should.deep.equal(f._matcher);\r\n    f.on.body().should.be.instanceof(BodyProcessor);\r\n    f.on.headers.should.be.instanceof(HeadersProcessor);\r\n    f.on.header().should.be.instanceof(HeadersProcessor);\r\n    f.on.query.should.be.instanceof(QueryProcessor);\r\n    f.on.slashes.should.be.instanceof(BooleanProcessor);\r\n\r\n    [\r\n      'method', 'url', 'destination', 'referrer', 'referrerPolicy', 'mode',\r\n      'credentials', 'redirect', 'integrity', 'cache',\r\n      'protocol', 'auth', 'username', 'password', 'host', 'hostname', 'port',\r\n      'pathname', 'hash', 'href', 'method'\r\n    ].forEach(key => f.on[key].should.be.instanceof(StringProcessor));\r\n  })\r\n\r\n  it('should throw is equal argument is not and object when called on matcher', function() {\r\n    const f = new Fixture();\r\n\r\n    expect(f.on.equal.bind(f, null)).to.throw();\r\n  })\r\n\r\n  it('should throw is with invalid key when called on matcher', function() {\r\n    const f = new Fixture();\r\n\r\n    expect(f.on.equal.bind(f, {foo: 'bar'})).to.throw();\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/RequestMatcher.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "tests/units/RequestMatcher.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/RequestMatcher.spec.js~describe59",
    "access": null,
    "description": "Request configurator test suite",
    "lineNumber": 11
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "tests/units/RequestMatcher.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/RequestMatcher.spec.js~describe59.it60",
    "access": null,
    "description": "should create a matcher",
    "lineNumber": 12
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "tests/units/RequestMatcher.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/RequestMatcher.spec.js~describe59.it61",
    "access": null,
    "description": "should throw on unsupported FMFRequest property",
    "lineNumber": 19
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "tests/units/RequestMatcher.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/RequestMatcher.spec.js~describe59.it62",
    "access": null,
    "description": "should return a processor",
    "lineNumber": 26
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "tests/units/RequestMatcher.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/RequestMatcher.spec.js~describe59.it63",
    "access": null,
    "description": "should process equal",
    "lineNumber": 34
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "tests/units/RequestMatcher.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/RequestMatcher.spec.js~describe59.it64",
    "access": null,
    "description": "should process header",
    "lineNumber": 42
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "tests/units/RequestMatcher.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/RequestMatcher.spec.js~describe59.it65",
    "access": null,
    "description": "should provide the right processor",
    "lineNumber": 50
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "tests/units/RequestMatcher.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/RequestMatcher.spec.js~describe59.it66",
    "access": null,
    "description": "should throw is equal argument is not and object when called on matcher",
    "lineNumber": 68
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "tests/units/RequestMatcher.spec.js~describe59",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/RequestMatcher.spec.js~describe59.it67",
    "access": null,
    "description": "should throw is with invalid key when called on matcher",
    "lineNumber": 74
  },
  {
    "__docId__": 321,
    "kind": "testFile",
    "name": "tests/units/requests.processing.spec.js",
    "content": "import {Server} from '@';\r\n\r\nconst server = new Server();\r\n\r\ndescribe('Request processing test suite', function() {\r\n  before(() => {\r\n    server.start();\r\n  })\r\n\r\n  afterEach(() => server.reset());\r\n\r\n  after(() => server.stop());\r\n\r\n  it('should throw if no fixtures defined', async function() {\r\n    try {\r\n      server.warnOnError(false);\r\n      await fetch('/');\r\n    } catch (err) {\r\n      err.should.be.instanceof(Error);\r\n    }\r\n  })\r\n\r\n  it('should throw if no matching fixtures found', async function() {\r\n    server\r\n      .on\r\n      .method.is.equal('POST')\r\n      .respond\r\n      .with.status(201)\r\n\r\n    try {\r\n      await fetch('/');\r\n    } catch (err) {\r\n      err.should.be.instanceof(Error);\r\n    }\r\n  })\r\n\r\n  it('Should reset between calls', async function() {\r\n    let response;\r\n\r\n    server.respond.with.preset('json').and.body({test: true});\r\n    response = await fetch('/');\r\n    response.headers.get('content-type').should.equal('application/json');\r\n\r\n    server\r\n      .reset()\r\n      .respond.with.preset('default');\r\n\r\n    response = await fetch('/');\r\n    response.headers.get('content-type').should.equal('text/html');\r\n  })\r\n\r\n  it('should return response build from fixture', async function() {\r\n    server.respond.with.preset('json').and.body({test: true});\r\n\r\n    const response = await fetch('/');\r\n\r\n    response.headers.get('content-type').should.equal('application/json');\r\n\r\n    const data = await response.json();\r\n    data.test.should.be.true;\r\n  })\r\n\r\n  it('should return ordered responses', async function() {\r\n    server\r\n      .respond\r\n      .to.firstCall().with.body('first global call').and.status(201)\r\n      .to.call(2).with.body('Second global call. ** never see. Overriden by local call ** ').and.status(202)\r\n      .to.secondCall(true).with.body('Second local call').and.status(203)\r\n      .to.thirdCall().with.status(204)\r\n      .to.any.with.body('Other calls').and.status(206);\r\n\r\n    let response;\r\n\r\n    response = await fetch('/');\r\n    response.status.should.equal(201);\r\n    response = await fetch('/');\r\n    response.status.should.equal(203);\r\n    response = await fetch('/');\r\n    response.status.should.equal(204);\r\n    response = await fetch('/');\r\n    response.status.should.equal(206);\r\n  })\r\n\r\n  it('should parse body of request for matching', async function() {\r\n    server\r\n      .throwOnError(true)\r\n      .when.pathname.equal('/text')\r\n      .and.body('text').equal('test')\r\n      .respond.with.status('200')\r\n      .when.pathname.equal('/json')\r\n      .and.body('json').equal({test: true})\r\n      .respond.with.status('200')\r\n      .when.pathname.equal('/formdata')\r\n      .and.body('formData').equal(data => data instanceof FormData)\r\n      .respond.with.status('200')\r\n      .when.pathname.equal('/blob')\r\n      .and.body('blob').equal(blob => blob instanceof Blob)\r\n      .respond.with.status('200')\r\n      .when.pathname.equal('/arraybuffer')\r\n      .and.body('arrayBuffer').equal(ab => ab instanceof ArrayBuffer)\r\n      .respond.with.status('200')\r\n      .fallback.to.preset(400);\r\n\r\n    let response;\r\n\r\n    response = await fetch('/text', {method: 'POST', body: 'test'});\r\n    response.status.should.equal(200);\r\n\r\n    response = await fetch('/json', {method: 'POST', body: JSON.stringify({test: true})});\r\n    response.status.should.equal(200);\r\n\r\n    let r = server.request;\r\n    if (r.formData instanceof Function) {\r\n      let body = new FormData();\r\n      body.append('test', true);\r\n      response = await fetch('/formdata', {\r\n        method: 'POST',\r\n        body\r\n      });\r\n      response.status.should.equal(200);\r\n    } else {\r\n      console.warn('\"Skip test on parsing body as formData as is not supported by this browser'); // eslint-disable-line\r\n    }\r\n\r\n    response = await fetch('/blob', {\r\n      method: 'POST',\r\n      body: new Blob()\r\n    });\r\n    response.status.should.equal(200);\r\n\r\n    response = await fetch('/arraybuffer', {\r\n      method: 'POST',\r\n      body: new ArrayBuffer()\r\n    });\r\n    response.status.should.equal(200);\r\n  })\r\n\r\n  it  ('should delay response', async function() {\r\n    server.respond.with.preset('json').body({test: true}).delay(500);\r\n\r\n    const start = +new Date();\r\n    const response = await fetch('/');\r\n    const end = +new Date();\r\n    const delay = end - start;\r\n\r\n    response.status.should.equal(200);\r\n    expect(delay >= 500).true;\r\n  })\r\n\r\n  it('should negate request matching', async function() {\r\n    server\r\n      .on.pathname.not.equal('/login')\r\n      .respond.with.status(200)\r\n      .respond.with.status(401);\r\n\r\n    let response\r\n\r\n    response = await fetch('/login');\r\n    response.status.should.equal(401)\r\n\r\n    response = await fetch('/notlogin');\r\n    response.status.should.equal(200)\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/requests.processing.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "tests/units/requests.processing.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/requests.processing.spec.js~describe68",
    "access": null,
    "description": "Request processing test suite",
    "lineNumber": 5
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "tests/units/requests.processing.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/requests.processing.spec.js~describe68.it69",
    "access": null,
    "description": "should throw if no fixtures defined",
    "lineNumber": 14
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "tests/units/requests.processing.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/requests.processing.spec.js~describe68.it70",
    "access": null,
    "description": "should throw if no matching fixtures found",
    "lineNumber": 23
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "tests/units/requests.processing.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/requests.processing.spec.js~describe68.it71",
    "access": null,
    "description": "Should reset between calls",
    "lineNumber": 37
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "tests/units/requests.processing.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/requests.processing.spec.js~describe68.it72",
    "access": null,
    "description": "should return response build from fixture",
    "lineNumber": 52
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "tests/units/requests.processing.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/requests.processing.spec.js~describe68.it73",
    "access": null,
    "description": "should return ordered responses",
    "lineNumber": 63
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "tests/units/requests.processing.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/requests.processing.spec.js~describe68.it74",
    "access": null,
    "description": "should parse body of request for matching",
    "lineNumber": 84
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "tests/units/requests.processing.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/requests.processing.spec.js~describe68.it75",
    "access": null,
    "description": "should delay response",
    "lineNumber": 138
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "tests/units/requests.processing.spec.js~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/requests.processing.spec.js~describe68.it76",
    "access": null,
    "description": "should negate request matching",
    "lineNumber": 150
  },
  {
    "__docId__": 331,
    "kind": "testFile",
    "name": "tests/units/respond.spec.js",
    "content": "import {Fixture, Server} from '@';\r\n\r\nconst p1 = {\r\n  body: null,\r\n  delay: 0,\r\n  headers: new Headers({'content-type': 'application/json'}),\r\n  status: 200,\r\n  statusText: 'OK',\r\n  wrapper: '%data%',\r\n  pattern: 'pattern',\r\n  before: () => 'before',\r\n  after: () => 'after'\r\n};\r\n\r\nconst p2 = {\r\n  body: 'test',\r\n  delay: 1000,\r\n  headers: false,\r\n  status: 200,\r\n  statusText: 'OK',\r\n  wrapper: false,\r\n  pattern: false,\r\n  before: false,\r\n  after: false\r\n}\r\n\r\nconst r2 = {\r\n  body: 'test',\r\n  delay: 1000,\r\n  status: 200,\r\n  statusText: 'OK'\r\n}\r\n\r\nlet server;\r\n\r\ndescribe('Respond test suite', function() {\r\n  beforeEach(function() {\r\n    server = new Server();\r\n  });\r\n\r\n  it('should create a blank fixture and register it', function() {\r\n    const f = server.respond;\r\n\r\n    f.should.be.instanceof(Fixture);\r\n    server._fixtures[0].should.deep.equal(f);\r\n  })\r\n\r\n  it('should set a default response', function() {\r\n    server.respond.set(p1);\r\n    server._fixtures[0]._any.should.deep.equal(p1);\r\n  })\r\n\r\n  it('should update default response', function() {\r\n    server.respond.set(p1).set(p2);\r\n    server._fixtures[0]._any.should.deep.equal(r2);\r\n  })\r\n\r\n  it('should change default response again', function() {\r\n    server.respond.set(p1);\r\n    server.respond.set(p2);\r\n    server._fixtures.length.should.equal(1);\r\n    server._fixtures[0]._any.should.deep.equal(r2);\r\n  })\r\n\r\n  it('should register ordered responses with global call count', function() {\r\n    server.respond.set(p1);\r\n    server._fixtures[0]._any.should.deep.equal(p1);\r\n    server.respond.to.firstCall().set(p2)\r\n    server._fixtures[0].globalCalls[1].should.deep.equal(r2);\r\n  })\r\n\r\n  it('should register ordered responses with own call count', function() {\r\n    server.respond.set(p1);\r\n    server._fixtures[0]._any.should.deep.equal(p1);\r\n    server.respond.to.firstCall(true).set(p2)\r\n    server._fixtures[0].ownCalls[1].should.deep.equal(r2);\r\n  })\r\n});\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/respond.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "tests/units/respond.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe77",
    "access": null,
    "description": "Respond test suite",
    "lineNumber": 36
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "tests/units/respond.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe77.it78",
    "access": null,
    "description": "should create a blank fixture and register it",
    "lineNumber": 41
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "tests/units/respond.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe77.it79",
    "access": null,
    "description": "should set a default response",
    "lineNumber": 48
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "tests/units/respond.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe77.it80",
    "access": null,
    "description": "should update default response",
    "lineNumber": 53
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "tests/units/respond.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe77.it81",
    "access": null,
    "description": "should change default response again",
    "lineNumber": 58
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "tests/units/respond.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe77.it82",
    "access": null,
    "description": "should register ordered responses with global call count",
    "lineNumber": 65
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "tests/units/respond.spec.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/respond.spec.js~describe77.it83",
    "access": null,
    "description": "should register ordered responses with own call count",
    "lineNumber": 72
  },
  {
    "__docId__": 339,
    "kind": "testFile",
    "name": "tests/units/ResponseConfigurator.spec.js",
    "content": "import Fixture from '@/Fixture';\r\n\r\ndescribe('Response configurator test suite', function() {\r\n  it('should set/unset a response from object', function() {\r\n    const f = new Fixture();\r\n    const set = {\r\n      headers: new Headers({'content-type': 'application/json'}),\r\n      status: 200,\r\n      statusText: 'OK',\r\n      delay: 1000,\r\n      wrapper: () => {},\r\n      before: () => {},\r\n      after: () => {},\r\n      body: {test: 'ok'},\r\n      pattern: '/:id',\r\n      preset: 200\r\n    }\r\n\r\n    const unset = {\r\n      headers: false,\r\n      status: false,\r\n      statusText: false,\r\n      delay: false,\r\n      wrapper: false,\r\n      before: false,\r\n      after: false,\r\n      body: false,\r\n      pattern: false,\r\n      preset: false\r\n    }\r\n\r\n    f.respond.set(set);\r\n    f._any.should.deep.equal(set);\r\n\r\n    f.respond.set(unset);\r\n    f._any.should.deep.equal({});\r\n  })\r\n\r\n  it('should throw with set if argument is not an object', function() {\r\n    const f = new Fixture();\r\n\r\n    expect(f.respond.set.bind(f, 'foo')).to.throw();\r\n  })\r\n\r\n  it('should throw with set if key is not allowed', function() {\r\n    const f = new Fixture();\r\n\r\n    expect(f.respond.set.bind(f, {foo: 'baz'})).to.throw();\r\n  })\r\n\r\n  it('should throw if headers are not valid', function() {\r\n    const f = new Fixture();\r\n\r\n    expect(f.respond.headers.bind(f, 'foo')).to.throw();\r\n  })\r\n\r\n  it('should throw if before and after are not callbacks', function() {\r\n    const f = new Fixture();\r\n\r\n    expect(f.respond.before.bind(f, 'foo')).to.throw();\r\n    expect(f.respond.after.bind(f, 'foo')).to.throw();\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/ResponseConfigurator.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "tests/units/ResponseConfigurator.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/ResponseConfigurator.spec.js~describe84",
    "access": null,
    "description": "Response configurator test suite",
    "lineNumber": 3
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "tests/units/ResponseConfigurator.spec.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/ResponseConfigurator.spec.js~describe84.it85",
    "access": null,
    "description": "should set/unset a response from object",
    "lineNumber": 4
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "tests/units/ResponseConfigurator.spec.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/ResponseConfigurator.spec.js~describe84.it86",
    "access": null,
    "description": "should throw with set if argument is not an object",
    "lineNumber": 39
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "tests/units/ResponseConfigurator.spec.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/ResponseConfigurator.spec.js~describe84.it87",
    "access": null,
    "description": "should throw with set if key is not allowed",
    "lineNumber": 45
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "tests/units/ResponseConfigurator.spec.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/ResponseConfigurator.spec.js~describe84.it88",
    "access": null,
    "description": "should throw if headers are not valid",
    "lineNumber": 51
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "tests/units/ResponseConfigurator.spec.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/ResponseConfigurator.spec.js~describe84.it89",
    "access": null,
    "description": "should throw if before and after are not callbacks",
    "lineNumber": 57
  },
  {
    "__docId__": 346,
    "kind": "testFile",
    "name": "tests/units/server.controls.spec.js",
    "content": "import {Server, Fixture} from '@';\r\n\r\ndescribe('Server control test suite', function() {\r\n  it('should construct a server', function() {\r\n    const server = new Server();\r\n\r\n    server.should.be.instanceof(Server);\r\n  })\r\n\r\n  it('should start, reset and stop server', function() {\r\n    const server = new Server();\r\n    sinon.spy(server, 'reset');\r\n\r\n    server.running.should.be.false;\r\n    server.start().should.deep.equal(server);\r\n    server.running.should.be.true;\r\n    server.reset().should.deep.equal(server);\r\n    server.reset.calledOnce.should.be.true;\r\n    server.running.should.be.true;\r\n    server.stop().should.deep.equal(server);\r\n    server.running.should.be.false;\r\n    server.reset.calledTwice.should.be.false;\r\n    server.stop(true).should.deep.equal(server);\r\n    server.reset.calledTwice.should.be.true;\r\n  })\r\n\r\n  it('should expose stub when running and throw when not running', function() {\r\n    const server = new Server();\r\n\r\n    expect(() => server.stub).to.throw();\r\n    server.start();\r\n    server.stub.should.be.instanceof(Function);\r\n    server.stop();\r\n  })\r\n\r\n  it('should import fixtures', async function() {\r\n    const server = new Server();\r\n    const f1 = new Fixture();\r\n    const f2 = {\r\n      on: {\r\n        headers: headers => !headers.has('x-device')\r\n      },\r\n      respond: {\r\n        preset: 400\r\n      }\r\n    }\r\n    let response;\r\n\r\n    f1\r\n      .on.equal({\r\n        headers: headers => headers.has('x-device')\r\n      })\r\n      .respond.set({\r\n        status: 200\r\n      })\r\n\r\n    server.import(f1);\r\n    server.import([f2]);\r\n\r\n    server._fixtures.length.should.equal(2);\r\n\r\n    server.start().throwOnError(true);\r\n    response = await fetch('/');\r\n    response.status.should.equal(400);\r\n    response = await fetch('/', {headers: {'x-device': \"123\"}});\r\n    response.status.should.equal(200);\r\n    server.stop();\r\n  })\r\n\r\n  it('should manage import errors', function() {\r\n    const server = new Server();\r\n\r\n    expect(server.import.bind(server, 'foo')).to.throw();\r\n    expect(server.import.bind(server, {status: 200})).to.throw();\r\n  })\r\n})\r\n",
    "static": true,
    "longname": "F:/Projets/fetch-mock-fixtures/tests/units/server.controls.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "tests/units/server.controls.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe90",
    "access": null,
    "description": "Server control test suite",
    "lineNumber": 3
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "tests/units/server.controls.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe90.it91",
    "access": null,
    "description": "should construct a server",
    "lineNumber": 4
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "tests/units/server.controls.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe90.it92",
    "access": null,
    "description": "should start, reset and stop server",
    "lineNumber": 10
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "tests/units/server.controls.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe90.it93",
    "access": null,
    "description": "should expose stub when running and throw when not running",
    "lineNumber": 27
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "tests/units/server.controls.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe90.it94",
    "access": null,
    "description": "should import fixtures",
    "lineNumber": 36
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "tests/units/server.controls.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "tests/units/server.controls.spec.js~describe90.it95",
    "access": null,
    "description": "should manage import errors",
    "lineNumber": 70
  }
]